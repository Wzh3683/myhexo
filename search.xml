<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在Win10系统下利用Docker部署Gunicorn+Flask打造独立镜像</title>
      <link href="/2020/07/20/Blog/%E5%9C%A8Win10%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%88%A9%E7%94%A8Docker%E9%83%A8%E7%BD%B2Gunicorn-Flask%E6%89%93%E9%80%A0%E7%8B%AC%E7%AB%8B%E9%95%9C%E5%83%8F/"/>
      <url>/2020/07/20/Blog/%E5%9C%A8Win10%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%88%A9%E7%94%A8Docker%E9%83%A8%E7%BD%B2Gunicorn-Flask%E6%89%93%E9%80%A0%E7%8B%AC%E7%AB%8B%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h3><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux机器或Windows 机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口。</p><h3 id="Docker组成"><a href="#Docker组成" class="headerlink" title="Docker组成"></a>Docker组成</h3><p>DockerClient客户端<br>Docker Daemon守护进程<br>Docker Image镜像<br>DockerContainer容器</p><h3 id="Docker优点"><a href="#Docker优点" class="headerlink" title="Docker优点"></a>Docker优点</h3><p>Docker其强大的跨平台特性，可以让我们在任何系统下部署项目，包括经常令人诟病的Windows，值得一提的是本次在Win10下部署项目的流程同样适用于Centos、Mac os、Ubuntu等系统，其兼容性可见一斑。</p><h3 id="flask项目结构"><a href="#flask项目结构" class="headerlink" title="flask项目结构"></a>flask项目结构</h3><ol><li><p>文件结构<br><img src="https://ae01.alicdn.com/kf/H1e68122f36214643b7bd7cc6cd7d59697.jpg" alt=""></p></li><li><p>manage.py是项目的入口文件，这里我们利用Sockert.io让Flask支持Websocket</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request,jsonify</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"><span class="keyword">from</span> flask_socketio <span class="keyword">import</span> SocketIO,send,emit,join_room, leave_room</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> user_view</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">"SQLALCHEMY_DATABASE_URI"</span>] = <span class="string">"mysql://root:root@localhost:3306/md"</span></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_COMMIT_ON_TEARDOWN'</span>] = <span class="literal">True</span></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">app.config[<span class="string">'BROKER_URL'</span>] = <span class="string">'redis://localhost:6379'</span></span><br><span class="line">app.config[<span class="string">'CELERY_RESULT_BACKEND'</span>] = <span class="string">'redis://localhost:6379'</span></span><br><span class="line">app.config[<span class="string">'CELERY_ACCEPT_CONTENT'</span>] = [<span class="string">'json'</span>, <span class="string">'pickle'</span>]</span><br><span class="line">app.config[<span class="string">'REDIS_URL'</span>] = <span class="string">'redis://localhost:6379'</span></span><br><span class="line">app.config[<span class="string">'JSON_AS_ASCII'</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">CORS(app,cors_allowed_origins=<span class="string">"*"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.register_blueprint(user_view.user)</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line">socketio = SocketIO(app,cors_allowed_origins=<span class="string">'*'</span>,async_mode=<span class="string">"threading"</span>,message_queue=app.config[<span class="string">'CELERY_RESULT_BACKEND'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">celery = Celery(app.name)</span><br><span class="line">celery.conf.update(app.config)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">celery.conf.CELERYBEAT_SCHEDULE = &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="string">"test"</span>:&#123;</span><br><span class="line">            <span class="string">"task"</span>:<span class="string">"get_cron"</span>,</span><br><span class="line">            <span class="string">"schedule"</span>:timedelta(seconds=<span class="number">10</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery.task(name="get_cron")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cron</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    get_sendback.delay()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="meta">@celery.task()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sendback</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    socketio.emit(<span class="string">'sendback'</span>,<span class="string">'message'</span>,broadcast=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/task')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_background_task</span><span class="params">()</span>:</span></span><br><span class="line">    get_sendback.delay()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'开始'</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/',methods=['GET','POST',"PUT","DELETE"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#res = db.session.execute("insert into user (`username`) values ('123') ")</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># res = db.session.execute(" select id,username from user ").fetchall()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># data = request.args.get("id")</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># #data = request.form.get("id")</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># #return 'Hello Flask'</span></span><br><span class="line">    <span class="comment"># return jsonify(&#123;'result': [dict(row) for row in res]&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">'message'</span>:<span class="string">'你好,Docker'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@socketio.on('join')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_join</span><span class="params">(data)</span>:</span></span><br><span class="line">    username = <span class="string">'user1'</span></span><br><span class="line">    room = <span class="string">'room1'</span></span><br><span class="line">    join_room(room)</span><br><span class="line">    send(username + <span class="string">' has entered the room.'</span>, room=room)</span><br><span class="line"></span><br><span class="line"><span class="meta">@socketio.on('message')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_message</span><span class="params">(message)</span>:</span></span><br><span class="line">    message = urllib.parse.unquote(message)</span><br><span class="line">    print(message)</span><br><span class="line">    send(message,broadcast=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@socketio.on('connect', namespace='/chat')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_connect</span><span class="params">()</span>:</span></span><br><span class="line">    emit(<span class="string">'my response'</span>, &#123;<span class="string">'data'</span>: <span class="string">'Connected'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@socketio.on('disconnect', namespace='/chat')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_disconnect</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Client disconnected'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route("/sendback",methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendback</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    socketio.emit(<span class="string">'sendback'</span>,<span class="string">'message'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    socketio.run(app,debug=<span class="literal">True</span>,host=<span class="string">"0.0.0.0"</span>,port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure></li><li><p>接下来使用Gunicorn+gevent来运行Flask项目，Gunicorn服务器作为wsgi app的容器，能够与各种Web框架兼容（flask，django等）,得益于gevent等技术，使用Gunicorn能够在基本不改变wsgi app代码的前提下，大幅度提高wsgi app的性能。那到底怎么提升性能？说简单点，Gunicorn 默认的网络模型是 select ，当我们把worker 替换成 gevent 后，则改为 epoll 监听模型。</p></li></ol><h3 id="相关部署"><a href="#相关部署" class="headerlink" title="相关部署"></a>相关部署</h3><ol><li><p>安装相应的库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gunicorn gevent --user</span><br></pre></td></tr></table></figure></li><li><p>编辑项目目录下的gunicorn.conf.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">workers = <span class="number">3</span>    <span class="comment"># 进程数</span></span><br><span class="line">worker_class = <span class="string">"gevent"</span>   <span class="comment"># 异步模式</span></span><br><span class="line">bind = <span class="string">"0.0.0.0:5000"</span></span><br></pre></td></tr></table></figure><p>由于Gunicorn并不支持Windows环境，所以只需要写好配置，不需要运行。</p></li><li><p>编辑项目目录下的requirements.txt文件，这里面都是我们项目所依赖的库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flask==<span class="number">1.0</span><span class="number">.2</span></span><br><span class="line">flask-cors</span><br><span class="line">flask-socketio</span><br><span class="line">flask-sqlalchemy</span><br><span class="line">pymysql</span><br><span class="line">celery</span><br><span class="line">gunicorn</span><br><span class="line">gevent</span><br><span class="line">redis==<span class="number">3.3</span><span class="number">.11</span></span><br></pre></td></tr></table></figure></li><li><p>随后在项目目录下创建一个 Dockerfile 文件，这个文件可以理解为打包镜像的脚本，你需要这个镜像做什么，就把任务写到脚本中，Docker通过执行这个脚本来打包镜像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM python:<span class="number">3.6</span></span><br><span class="line">WORKDIR /Project/myflask</span><br><span class="line"></span><br><span class="line">COPY requirements.txt ./</span><br><span class="line">RUN pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">COPY . .</span><br><span class="line">ENV LANG C.UTF<span class="number">-8</span></span><br><span class="line">CMD [<span class="string">"gunicorn"</span>, <span class="string">"manage:app"</span>, <span class="string">"-c"</span>, <span class="string">"./gunicorn.conf.py"</span>]</span><br></pre></td></tr></table></figure><p> 可以看到，我们项目的镜像首先基于python3.6这个基础镜像，然后声明项目目录在/Project/myflask中，拷贝依赖表，之后安装相应的依赖，这里在安装过程 中我们指定了国内的源用来提高打包速度，最后利用gunicorn运行项目，值得一提的是，ENV LANG C.UTF-8是为了声明Docker内部环境中的编码，防止中文乱 码问题。</p></li></ol><h3 id="打包及运行"><a href="#打包及运行" class="headerlink" title="打包及运行"></a>打包及运行</h3><ol><li><p>最后我们就可以愉快的打包整个项目了，在项目根目录下执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t <span class="string">'myflask'</span> .</span><br></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/H84ed871993214f0ba0dcb873f9fd9fa4j.jpg" alt=""></p></li><li><p>此时看到Docker通过读取Dockerfile文件来下载所需的基础镜像和依赖库，这里一定要指定Docker的下载源，否则速度会非常缓慢，打包好的镜像文件大概有1g左右。</p><p> 下载结束之后，可以看到myflask这个镜像已经静静躺在镜像库中了，运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://wangxs020202.gitee.io/images/note/dokjx3.png" alt=""></p></li><li><p>然后我们就可以利用这个镜像来通过容器跑Flask项目了，运行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -p <span class="number">5000</span>:<span class="number">5000</span> myflask</span><br></pre></td></tr></table></figure><p> 这里的命令是通过端口映射把docker内部的端口5000映射到宿主机的5000端口上，后面的参数是镜像名称。我们看到，在Win10下，已经不可思议的通过Gunicorn把Flask跑起来了，这在之前没有Docker技术之前是不可想象的。</p><p> <img src="https://wangxs020202.gitee.io/images/note/dokjx4.png" alt=""></p></li><li><p>通过网址访问一下，这里注意一点，就是Windows系统下，访问Docker容器需要通过分配的ip来访问，而不是我们常用的localhost。</p><p> <img src="https://wangxs020202.gitee.io/images/note/dokjx5.png" alt=""></p></li><li><p>我们发现项目已经跑起来了<br> <img src="https://wangxs020202.gitee.io/images/note/dokjx6.png" alt=""></p></li></ol><h3 id="docker对于linux最友好。"><a href="#docker对于linux最友好。" class="headerlink" title="docker对于linux最友好。"></a>docker对于linux最友好。</h3><p>今日犯了一个错误，就是将项目进行build的时候，报错了。是因为我的requirements.txt有一个pywin32的包，然后该包不与linux响通，所以打包出现错误。</p><p>结语：到这里我们的 Docker+Flask + Gunicorn就部署完毕了，将这个镜像上传Dockerhub仓库，在任何时间、任何地点、任何系统上，只要连着网、只要我们想，就都可以在短短1分钟之内部署好我们的项目，这就是Docker技术对开发人员最好的馈赠。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> docker </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;mongodb的安装和卸载&#39;</title>
      <link href="/2020/07/15/Blog/mongodb%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/"/>
      <url>/2020/07/15/Blog/mongodb%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="卸载mongo"><a href="#卸载mongo" class="headerlink" title="卸载mongo"></a>卸载mongo</h3><p>使用管理员身份运行命令提示符，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc delete MongoDB Server</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> 数据库 </tag>
            
            <tag> pymongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;本地连接mongodb服务失败&#39;</title>
      <link href="/2020/07/15/Blog/%E6%9C%AC%E5%9C%B0%E8%BF%9E%E6%8E%A5mongodb%E6%9C%8D%E5%8A%A1%E5%A4%B1%E8%B4%A5/"/>
      <url>/2020/07/15/Blog/%E6%9C%AC%E5%9C%B0%E8%BF%9E%E6%8E%A5mongodb%E6%9C%8D%E5%8A%A1%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>使用mongo的时候很容易就断开mongo本地连接，或者mongo意外崩了，刚开始就简单的重新安装mongodb数据库，但是这样我们数据库的数据就丢失了，还有麻烦，所以就找找解决方法，写了这篇博客。</p><h3 id="连接本地MongDB服务失败"><a href="#连接本地MongDB服务失败" class="headerlink" title="连接本地MongDB服务失败"></a>连接本地MongDB服务失败</h3><p>连接Mongodb数据库，突然报了一个错误，” Error: couldn’t connect to server 127.0.0.1:27017, connection attempt failed: SocketException: Error connecting to 127.0.0.1:27017”，意思是无法连接到本地mongo的服务。</p><ol><li><p>在命令提示符模式下，输入mongo出现了以下错误<br><img src="/img/%E6%95%B0%E6%8D%AE%E5%BA%93/mongo1.png" alt=""></p></li><li><p>然后才mongo的bin目录下，进入命令提示符，输入mongod，发现找不到D:\data\db\ 路径。<br><img src="/img/%E6%95%B0%E6%8D%AE%E5%BA%93/mongo2.png" alt=""></p></li></ol><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><p>输入cmd，以管理员身份运行命令提示符。<br><img src="/img/%E6%95%B0%E6%8D%AE%E5%BA%93/mongo3.png" alt=""></p></li><li><p>输入命令：</p><div class="note info">            <p>“你的mongod.exe的路径” –dbpath “你的data路径”</p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;D:\Program Files (x86)\mongo\bin\mongod.exe&quot; --dbpath &quot;D:\Program Files (x86)\mongo\data&quot;</span><br></pre></td></tr></table></figure><p><img src="/img/%E6%95%B0%E6%8D%AE%E5%BA%93/mongo4.png" alt=""><br><img src="/img/%E6%95%B0%E6%8D%AE%E5%BA%93/mongo5.png" alt=""></p></li><li><p>然后我们发现光标正在等待中</p></li><li><p>在你的mongo文件夹的安装目录bin目录下,我的在”D:\Program Files (x86)\mongo\bin”输入cmd,执行mongo.exe。<br><img src="/img/%E6%95%B0%E6%8D%AE%E5%BA%93/mongo6.png" alt=""></p></li><li><p>然后我们发现已经连上mongo数据库了，然后我们使用mongo命令，发现已经ok了。<br><img src="/img/%E6%95%B0%E6%8D%AE%E5%BA%93/mongo7.png" alt=""></p></li></ol><p>感谢大佬们的浏览，希望可以帮到亲们。<br>喜欢不要吝啬自己又细又长有好看的手手，点个好评（。＾▽＾）</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;mongodb导入文件夹&#39;</title>
      <link href="/2020/07/14/Blog/mongodb%E5%AF%BC%E5%85%A5%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
      <url>/2020/07/14/Blog/mongodb%E5%AF%BC%E5%85%A5%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="MongoDB导入文件夹-内含json文件和bson文件"><a href="#MongoDB导入文件夹-内含json文件和bson文件" class="headerlink" title="MongoDB导入文件夹(内含json文件和bson文件)"></a>MongoDB导入文件夹(内含json文件和bson文件)</h3><p>导入（指定文件夹）数据</p><p>在Linux下的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -d db_name 文件夹目录</span><br></pre></td></tr></table></figure><p>在windows下的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">需要进入mongo文件下的bin目录下，输入cmd，进入命令行：</span><br><span class="line">mongorestore.exe -d db_name 文件目录&#x2F;路径</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;pymongo的使用&#39;</title>
      <link href="/2020/07/14/Blog/pymongo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/07/14/Blog/pymongo%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="python连接mongodb"><a href="#python连接mongodb" class="headerlink" title="python连接mongodb"></a>python连接mongodb</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="comment">#连接mongodb，端口27017</span></span><br><span class="line">conn = pymongo.MongoClient(<span class="string">'localhost'</span>,<span class="number">27017</span>)</span><br><span class="line"><span class="comment">#连接数据库</span></span><br><span class="line">db = conn.goods</span><br><span class="line"><span class="comment">#连接数据表</span></span><br><span class="line">table = db.snack</span><br></pre></td></tr></table></figure><h3 id="pymongo的增删改查"><a href="#pymongo的增删改查" class="headerlink" title="pymongo的增删改查"></a>pymongo的增删改查</h3><h4 id="pymongo的增加"><a href="#pymongo的增加" class="headerlink" title="pymongo的增加"></a>pymongo的增加</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#插入数据</span></span><br><span class="line">table.insert(&#123;<span class="string">'name'</span>:<span class="string">'跳跳糖'</span>&#125;)        <span class="comment">#可以插入一个或多个</span></span><br><span class="line">table.insert([&#123;<span class="string">'name'</span>:<span class="string">'跳跳糖'</span>&#125;,&#123;<span class="string">'name'</span>:<span class="string">'棒棒糖'</span>&#125;])</span><br><span class="line">table.insert_one(&#123;<span class="string">'name'</span>:<span class="string">'跳跳糖'</span>&#125;)<span class="comment">#插入一条数据</span></span><br><span class="line">table.insert_many([&#123;<span class="string">'name'</span>:<span class="string">'跳跳糖'</span>&#125;,&#123;<span class="string">'name'</span>:<span class="string">'棒棒糖'</span>&#125;])<span class="comment">#插入多条数据</span></span><br></pre></td></tr></table></figure><h4 id="pymongo的查询"><a href="#pymongo的查询" class="headerlink" title="pymongo的查询"></a>pymongo的查询</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询数据</span></span><br><span class="line">table.find_one(&#123;<span class="string">'name'</span>:<span class="string">'跳跳糖'</span>&#125;)    <span class="comment">#查询一条数据，返回的是字典形式的数据</span></span><br><span class="line">table.find()    <span class="comment">#返回的是一个mongo对象，查询的是所有数据，可以使用list强转,也可for循环取值</span></span><br><span class="line">table.find(&#123;<span class="string">'name'</span>:<span class="string">'跳跳糖'</span>&#125;)     <span class="comment">#查询一条数据，返回mongo对象，使用for循环和list强转</span></span><br></pre></td></tr></table></figure><h4 id="pymongo的修改"><a href="#pymongo的修改" class="headerlink" title="pymongo的修改"></a>pymongo的修改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改数据</span></span><br><span class="line"><span class="comment">#都是修改数据，只不过有的Python版本，update会爆红，但是一样可以修改，所以推荐会用update_one，然后$set可以使用，也可以不使用。</span></span><br><span class="line">table.update(&#123;<span class="string">'name'</span>:<span class="string">'好吃罐头'</span>&#125;,&#123;<span class="string">'name'</span>:<span class="string">'橘子罐头'</span>&#125;)</span><br><span class="line">table.update(&#123;<span class="string">'name'</span>:<span class="string">'好吃罐头'</span>&#125;,&#123;<span class="string">'$set'</span>:&#123;<span class="string">'name'</span>:<span class="string">'橘子罐头'</span>&#125;&#125;)</span><br><span class="line">table.update_one(&#123;<span class="string">'name'</span>:<span class="string">'泡泡堂'</span>&#125;,&#123;<span class="string">'$set'</span>:&#123;<span class="string">'name'</span>:<span class="string">'跳跳糖'</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> 数据库 </tag>
            
            <tag> pymongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;深拷贝与浅拷贝&#39;</title>
      <link href="/2020/07/14/Blog/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2020/07/14/Blog/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="COPY模块"><a href="#COPY模块" class="headerlink" title="COPY模块"></a>COPY模块</h3><p>作用：copy模块用于对象的拷贝操作。</p><p>该模块提供了两个主要的方法：copy.copy()和copy.deepcopy(),分别代表的浅拷贝和深拷贝</p><h3 id="copy模块之浅拷贝"><a href="#copy模块之浅拷贝" class="headerlink" title="copy模块之浅拷贝"></a>copy模块之浅拷贝</h3><p>浅拷贝：不管多么复杂的数据结构，浅拷贝只会拷贝第一层/表层/顶层。<br>浅拷贝是对一个对象的顶层的拷贝。<br>通俗的理解就是：拷贝了引用，并没有拷贝内容。</p><div class="note info">            <p>注意点：<br>    浅拷贝对不可变类型和可变类型的copy不同<br>    copy.copy对于可变类型，会进行浅拷贝<br>    copy.copy对于不可变类型，不会拷贝，仅仅是指向</p>          </div><p><img src="/img/python/copy.jpg" alt=""></p><h4 id="浅拷贝需要分三种情况来讨论："><a href="#浅拷贝需要分三种情况来讨论：" class="headerlink" title="浅拷贝需要分三种情况来讨论："></a>浅拷贝需要分三种情况来讨论：</h4><p>1.拷贝不可变对象：只是增加一个指向原对象的引用，改变会互相影响。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">b = copy.copy(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变一方，另一方也改变</span></span><br><span class="line">b[<span class="number">2</span>].append(<span class="number">5</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>2.拷贝可变对象(一层结构)：产生新的对象，开辟新的内存空间，改变互不影响。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = copy.copy(a)</span><br><span class="line">print(b)  <span class="comment">#[1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看两者的内存地址，不同，开辟了新的内存空间</span></span><br><span class="line">print(id(a))  <span class="comment">#2661167251848</span></span><br><span class="line">print(id(b))  <span class="comment">#2661167251784</span></span><br><span class="line">print(a <span class="keyword">is</span> b) <span class="comment">#False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变了一方，另一方关我卵事</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]    </span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b.append(<span class="number">4</span>)</span><br><span class="line">print(b) <span class="comment">#[1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">a.append(<span class="number">5</span>)</span><br><span class="line">print(a) <span class="comment">#[1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure><p>3.拷贝可变对象(多层结构)：产生新的对象，开辟新的内存空间，不改变包含的子对象则互不影响、改变包含的子对象则互相影响。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">b = copy.copy(a)</span><br><span class="line">print(b)  <span class="comment"># [1, 2, [3, 4]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看两者的内存地址，不同，开辟了新的内存空间</span></span><br><span class="line">print(id(b)) <span class="comment"># 1902708310280</span></span><br><span class="line"></span><br><span class="line">print(id(a)) <span class="comment"># 1902708310408</span></span><br><span class="line">print(a <span class="keyword">is</span> b) <span class="comment">#False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 1.没有对包含的子对象进行修改，另一方关我卵事</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]    </span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">b.append(<span class="number">5</span>)</span><br><span class="line">print(b) <span class="comment">#[1, 2, [3, 4], 5]</span></span><br><span class="line">a.append(<span class="number">6</span>)</span><br><span class="line">print(a) <span class="comment">#[1, 2, [3, 4], 6]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.对包含的子对象进行修改，另一方也随之改变</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]    </span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">b[<span class="number">2</span>].append(<span class="number">5</span>)</span><br><span class="line">print(b) <span class="comment"># [1, 2, [3, 4, 5]]</span></span><br><span class="line">a[<span class="number">2</span>].append(<span class="number">6</span>)</span><br><span class="line">print(a) <span class="comment"># [1, 2, [3, 4, 6]]</span></span><br></pre></td></tr></table></figure><h3 id="copy模块之深拷贝"><a href="#copy模块之深拷贝" class="headerlink" title="copy模块之深拷贝"></a>copy模块之深拷贝</h3><p>深拷贝：完全复制原变量的所有数据（递归性质的拷贝），在内存中生成一套完全一样的内容，我们对这两个变量中的一个进行任意修改都不会影响另一个变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">b = copy.deepcopy(a)</span><br><span class="line">print(id(a))  </span><br><span class="line">print(id(b))</span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2082974974344</span></span><br><span class="line"><span class="comment">#2082974974280</span></span><br><span class="line"><span class="comment">#False</span></span><br></pre></td></tr></table></figure><p><img src="/img/python/deepcopy.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;mongodb的安装与增删改查&#39;</title>
      <link href="/2020/07/14/Blog/mongodb%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
      <url>/2020/07/14/Blog/mongodb%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="mongodb-配置"><a href="#mongodb-配置" class="headerlink" title="mongodb 配置"></a>mongodb 配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mongo的配置：</span></span><br><span class="line"><span class="number">1.</span>创建数据库文件及日志文件目录，并将目录写入配置文件</span><br><span class="line"><span class="number">2.</span>在系统终端执行以下命令：</span><br><span class="line">    mongod --bind_ip <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> --logpath</span><br><span class="line">        <span class="string">"D:\MongoDB\log\mongodb.log"</span> --logappend --dbpath</span><br><span class="line">        <span class="string">"D:\MongoDB\data"</span> --port <span class="number">27017</span> --serviceName <span class="string">"MongoDB"</span></span><br><span class="line">        --serviceDisplayName <span class="string">"MongoDB"</span> --install</span><br><span class="line">    <span class="number">3.</span>将MongoDB服务设为开机自启</span><br></pre></td></tr></table></figure><h3 id="mongodb-介绍"><a href="#mongodb-介绍" class="headerlink" title="mongodb 介绍"></a>mongodb 介绍</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关系型数据库与非关系型数据库：</span></span><br><span class="line"><span class="comment">#主要原因：数据结构不同</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#关系型数据库：(指采用了关系模型来组织数据的数据库)</span></span><br><span class="line">mysql由数据库，数据表，字段，记录构成。(<span class="string">'端口'</span>：<span class="number">3306</span>)</span><br><span class="line">sqlit3</span><br><span class="line"><span class="comment">#非关系型数据库：(非关系型数据库以键值对存储，且结构不固定)</span></span><br><span class="line">redis（<span class="string">'端口'</span>：<span class="number">6379</span>）</span><br><span class="line">mongodb由数据库，集合，文档，键值对数据构成。（<span class="string">'端口'</span>：<span class="number">27017</span>）</span><br></pre></td></tr></table></figure><h3 id="mongodb-常用操作"><a href="#mongodb-常用操作" class="headerlink" title="mongodb 常用操作"></a>mongodb 常用操作</h3><p>mongodb 常用命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#常用命令：</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>).查看数据库    <span class="comment">#注释：因为创建的数据里没有数据，所以不显示。不显示空库</span></span><br><span class="line">show dbs</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>).创建并使用数据库     <span class="comment">#注释：如果该数据库存在，则切换到数据库，该数据库不存在，则创建并切换到该数据库</span></span><br><span class="line">use tst</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>).查看当前工作的数据库</span><br><span class="line">db</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>).创建集合并插入一条数据</span><br><span class="line">db.数据表名.insert(&#123;<span class="string">'name'</span>:<span class="string">'hui'</span>,<span class="string">'age'</span>:<span class="number">20</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>).查看当前数据库所有表</span><br><span class="line">show tables</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>).查询表中所有数据</span><br><span class="line">db.数据表.find(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>).删除表操作</span><br><span class="line">db.goods.drop()</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>).删除数据库</span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><h3 id="mongodb-的增加操作"><a href="#mongodb-的增加操作" class="headerlink" title="mongodb 的增加操作"></a>mongodb 的增加操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mongodb的增添操作：（字典，键值对数据）</span></span><br><span class="line"><span class="number">1</span>).插入一条或多条数据,多条需要加[]</span><br><span class="line">db.表名.insert(&#123;&#125;)/db.表名.insert([&#123;&#125;,&#123;&#125;])</span><br><span class="line">    <span class="comment">#db.snack.insert([</span></span><br><span class="line">        <span class="comment">#&#123;name:"旺旺",price:20,num:150,brief:'旺旺旺旺'&#125;,</span></span><br><span class="line">       <span class="comment">#&#123;name:"饼干",price:5,num:200,brief:"是爱你的形状"&#125;,</span></span><br><span class="line">        <span class="comment">#&#123;name:"巧克力",price:10,num:200,brief:"你跟巧克力似的甜甜的"&#125;,</span></span><br><span class="line">    <span class="comment">#])</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>).插入一条数据：</span><br><span class="line">db.表名.insertOne(&#123;&#125;)</span><br><span class="line">    <span class="comment">#db.snack.insertOne(&#123;name:"O泡果奶",price:20,num:150,brief:'ooo'&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>).插入多条数据：</span><br><span class="line">db.表名.insertMant([&#123;&#125;,&#123;&#125;])</span><br><span class="line">    <span class="comment">#db.snack.insertMany([</span></span><br><span class="line">        <span class="comment">#&#123;name:"苹果",price:10,num:200,brief:"苹果很脆"&#125;,</span></span><br><span class="line">        <span class="comment">#&#123;name:"香蕉",price:12,num:200,brief:"又粗又长"&#125;</span></span><br><span class="line"><span class="comment">#])</span></span><br></pre></td></tr></table></figure><h3 id="mongodb-的查询"><a href="#mongodb-的查询" class="headerlink" title="mongodb 的查询"></a>mongodb 的查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mongodb的查询操作:</span></span><br><span class="line">db.tablename.find(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#排序</span></span><br><span class="line">db.snack.find().sort(&#123;<span class="string">'定位的键'</span>:<span class="number">1</span>/<span class="number">-1</span>&#125;)<span class="comment">#(1的时候升序，-1的时候降序)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分页</span></span><br><span class="line">db.goods.find().limit(每页显示几条数据)</span><br><span class="line"></span><br><span class="line"><span class="comment">#条件查询(等值查询)</span></span><br><span class="line">db.snack.find(&#123;num:<span class="number">200</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#and：满足所有查询条件</span></span><br><span class="line">db.snack.find(&#123;<span class="string">'price'</span>:<span class="number">10</span>,<span class="string">'num'</span>:<span class="number">200</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#or：满足其中一个条件</span></span><br><span class="line">db.snack.find(&#123;$<span class="keyword">or</span>: [&#123;num:<span class="number">200</span>&#125;,&#123;price:<span class="number">20</span>&#125;]&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#非等值查询-----大于($gt)，小于($lt)，大于等于($ate)，小于等于($lte)，不等于($ne)</span></span><br><span class="line">db.snack.find(&#123;<span class="string">'price'</span>:&#123;$gt: <span class="number">10</span>&#125;&#125;)---价格大于<span class="number">10</span>元</span><br><span class="line">db.snack.find(&#123;<span class="string">'price'</span>:&#123;$lt: <span class="number">10</span>&#125;&#125;)---价格小于<span class="number">10</span>元</span><br><span class="line">db.snack.find(&#123;<span class="string">'price'</span>:&#123;$gte: <span class="number">10</span>&#125;&#125;)---价格大于等于<span class="number">10</span>元</span><br><span class="line">db.snack.find(&#123;<span class="string">'price'</span>:&#123;$lte: <span class="number">10</span>&#125;&#125;)---价格小于等于<span class="number">10</span>元</span><br><span class="line">db.snack.find(&#123;<span class="string">'price'</span>:&#123;$ne: <span class="number">10</span>&#125;&#125;)---价格不等于<span class="number">10</span>元 </span><br><span class="line">db.snack.find(&#123;$<span class="keyword">or</span>: [&#123;<span class="string">'price'</span>:&#123;$gt:<span class="number">10</span>&#125;&#125;,&#123;<span class="string">'price'</span>:&#123;$lt:<span class="number">5</span>&#125;&#125;]&#125;)---价格大于<span class="number">10</span>块或者小于<span class="number">5</span>块</span><br><span class="line">db.snack.find(&#123;<span class="string">'price'</span>:&#123;$gt: <span class="number">10</span>,$lt:<span class="number">20</span>&#125;&#125;)---价格大于<span class="number">10</span>块小于<span class="number">20</span>块的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#模糊查询</span></span><br><span class="line">db.snack.find(&#123;<span class="string">'brief'</span>:&#123;<span class="string">'$regex'</span>:<span class="string">'的'</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="mongodb-的修改"><a href="#mongodb-的修改" class="headerlink" title="mongodb 的修改"></a>mongodb 的修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mongodb修改操作</span></span><br><span class="line"><span class="comment">#都是修改，只修改一条数据</span></span><br><span class="line">db.goods.update(&#123;<span class="string">'name'</span>:<span class="string">'跳跳糖'</span>&#125;,&#123;<span class="string">'name'</span>:<span class="string">'蹦蹦糖'</span>&#125;)</span><br><span class="line">db.snack.update(&#123;<span class="string">'name'</span>:<span class="string">'饼干'</span>&#125;,&#123;<span class="string">'$set'</span>:&#123;<span class="string">'price'</span>:<span class="number">5.5</span>&#125;&#125;)---将名字是饼干的价格修改为<span class="number">5.5</span></span><br><span class="line"><span class="comment">#参数中的第一个字典用于定位要修改的数据</span></span><br><span class="line">    <span class="comment">#参数中第二个字典是指要更新已定位的数据</span></span><br><span class="line">    <span class="comment">#第二个参数中的字典是指定要将哪个字段的修改为什么</span></span><br></pre></td></tr></table></figure><h3 id="mongodb-的删除"><a href="#mongodb-的删除" class="headerlink" title="mongodb 的删除"></a>mongodb 的删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mongodb的删除操作：</span></span><br><span class="line"><span class="comment">#数据表数据全部删除</span></span><br><span class="line">db.tablename.remove(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除指定数据</span></span><br><span class="line">db.tablename.remove(&#123;<span class="string">'name'</span>:<span class="string">'跳跳糖'</span>&#125;)</span><br><span class="line">db.goods.remove(&#123;<span class="string">'name'</span>:&#123;$regex: <span class="string">'糖'</span>&#125;&#125;)<span class="comment">#根据条件删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#db.goods.remove()报错，不能删除</span></span><br></pre></td></tr></table></figure><h3 id="1-6-mongodb-的分组聚合"><a href="#1-6-mongodb-的分组聚合" class="headerlink" title="1.6 mongodb 的分组聚合"></a>1.6 mongodb 的分组聚合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分组聚合查询</span></span><br><span class="line"><span class="comment">#####语法：db.tablename.aggregate([&#123;&#125;,&#123;&#125;,&#123;&#125;])</span></span><br><span class="line">1.$project：可以筛选显示字段-----&gt;#1显示，0不显示</span><br><span class="line">db.snack.aggregate([&#123;<span class="string">'$project'</span>:&#123;<span class="string">'brief'</span>:<span class="number">1</span>,<span class="string">'_id'</span>:<span class="number">0</span>,<span class="string">'name'</span>:<span class="number">1</span>&#125;])</span><br><span class="line">                         </span><br><span class="line"><span class="number">2.</span>$match：用于条件的限定</span><br><span class="line">db.snack.aggregate([&#123;<span class="string">'$match'</span>:&#123;<span class="string">'name'</span>:&#123;<span class="string">'$regex'</span>:<span class="string">'旺'</span>&#125;&#125;&#125;])</span><br><span class="line">                         </span><br><span class="line"><span class="number">3.</span>$group：分组,一般与聚合函数(max,min,sum,avg,count)使用,还可以配合排序</span><br><span class="line">db.snack.aggregate([&#123;<span class="string">'$group'</span>: &#123; _id: <span class="string">"$price"</span>,totla:&#123;<span class="string">'$sum'</span>:<span class="string">'$price'</span>&#125;&#125;&#125;])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;python查找算法&#39;</title>
      <link href="/2020/07/13/Blog/python%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
      <url>/2020/07/13/Blog/python%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h3><p>算法简介 顺序查找又称为线性查找，是一种最简单的查找方法。适用于线性表的顺序存储结构和链式存储结构。该算法的时间复杂度为O(n)。 基本思路 从第一个元素m开始逐个与需要查找的元素x进行比较，当比较到元素值相同(即m=x)时返回元素m的下标，如果比较到最后都没有找到，则返回-1。 优缺点 缺点：是当n 很大时，平均查找长度较大，效率低； 优点：是对表中数据元素的存储没有要求。另外，对于线性链表，只能进行顺序查找。 算法实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sequential_search</span><span class="params">(lis, key)</span>:</span></span><br><span class="line">length = len(lis)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line"><span class="keyword">if</span> lis[i] == key:</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h3><p>折半查也叫二分查找(Binary Search),是一种在有序数组中查找某一特定元素的查找算法。查找过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则查找过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。 这种查找算法每一次比较都使查找范围缩小一半。</p><p>算法描述 给予一个包含 个带值元素的数组A 1、 令 L为0 ， R为 n-1 2、 如果L&gt;R，则搜索以失败告终 3、 令 m (中间值元素)为 ⌊(L+R)/2⌋ 4、 如果 AmT，令 R为 m - 1 并回到步骤二 复杂度分析 时间复杂度：折半搜索每次把搜索区域减少一半，时间复杂度为 O(logn) 空间复杂度：O(1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(lis, key)</span>:</span></span><br><span class="line">low = <span class="number">0</span></span><br><span class="line">high = len(lis) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> low &lt;= high:</span><br><span class="line">mid = int((low + high) / <span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> key &lt; lis[mid]:</span><br><span class="line">high = mid - <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> key &gt; lis[mid]:</span><br><span class="line">low = mid + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span>,lis.index(key)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">list = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>]</span><br><span class="line">print(binary_search(list,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><h3 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h3><p>插值查找是根据要查找的关键字key与查找表中最大最小记录的关键字比较后的 查找方法，其核心就在于插值的计算公式 (key-a[low])/(a[high]-a[low])*(high-low)。 时间复杂度o(logn)但对于表长较大而关键字分布比较均匀的查找表来说，效率较高。</p><p>算法思想 基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。当然，差值查找也属于有序查找。 注：对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好的多。反之，数组中如果分布非常不均匀，那么插值查找未必是很合适的选择。</p><p>复杂度分析 时间复杂性：如果元素均匀分布，则O（log log n）），在最坏的情况下可能需要O（n）。 空间复杂度：O（1）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(lis, key)</span>:</span></span><br><span class="line">  low = <span class="number">0</span></span><br><span class="line">  high = len(lis) - <span class="number">1</span></span><br><span class="line">  time = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> low &lt; high:</span><br><span class="line">    time += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 计算mid值是插值算法的核心代码</span></span><br><span class="line">    mid = low + int((high - low) * (key - lis[low])/(lis[high] - lis[low]))</span><br><span class="line">    print(<span class="string">"mid=%s, low=%s, high=%s"</span> % (mid, low, high))</span><br><span class="line">    <span class="keyword">if</span> key &lt; lis[mid]:</span><br><span class="line">      high = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> key &gt; lis[mid]:</span><br><span class="line">      low = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="comment"># 打印查找的次数</span></span><br><span class="line">      print(<span class="string">"times: %s"</span> % time)</span><br><span class="line">      <span class="keyword">return</span> mid</span><br><span class="line">  print(<span class="string">"times: %s"</span> % time)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  LIST = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">54</span>, <span class="number">99</span>, <span class="number">123</span>, <span class="number">200</span>, <span class="number">222</span>, <span class="number">444</span>]</span><br><span class="line">  result = binary_search(LIST, <span class="number">444</span>)</span><br><span class="line">  print(result)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;python排序算法&#39;</title>
      <link href="/2020/07/12/Blog/python%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2020/07/12/Blog/python%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>排序算法（Sorting algorithm）是一种能将一串数据依照特定顺序进行排列的一种算法。</p><p>常用排序算法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">冒泡排序(*****)</span><br><span class="line">选择排序(*****)</span><br><span class="line">插入排序</span><br><span class="line">快速排序</span><br><span class="line">希尔排序</span><br><span class="line">归并排序</span><br><span class="line">堆排序</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序(quick sort)的采用了分治的策略。<br>分治策略：将原问题分解为若干个规模更小但结构与原问题相似的子问题。递归地解这些子问题，然后将这些子问题的解组合为原问题的解。<br>快速排序：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</p><p>时间复杂度：O(nlog₂n)<br>空间复杂度：O(nlog₂n)<br>稳定性：不稳定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(list)</span>:</span></span><br><span class="line"><span class="comment">#判断列表长度是一位的话，直接返回，不需要排序</span></span><br><span class="line"><span class="keyword">if</span> len(list) &lt; <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> list</span><br><span class="line"><span class="comment">#基准值，也就是随机变量， 从列表中随机选取一个元素</span></span><br><span class="line">tmp = list[<span class="number">0</span>]</span><br><span class="line">left = [x <span class="keyword">for</span> x <span class="keyword">in</span> list[<span class="number">1</span>:] <span class="keyword">if</span> x &lt;= tmp]<span class="comment">#小于等于基准值的元素组成的数组</span></span><br><span class="line">print(left)</span><br><span class="line">right = [x <span class="keyword">for</span> x <span class="keyword">in</span> list[<span class="number">1</span>:] <span class="keyword">if</span> x &gt; tmp]<span class="comment">#大于基准值的元素组成的数组</span></span><br><span class="line"><span class="comment"># print(right)</span></span><br><span class="line"><span class="keyword">return</span> quick_sort(left) + [tmp] + quick_sort(right) <span class="comment">#调用本身，递归</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">print(quick_sort(li))</span><br><span class="line"></span><br><span class="line"><span class="comment">#参考结果：</span></span><br><span class="line">    <span class="comment"># 随机 2 #第一次取出基准值</span></span><br><span class="line">    <span class="comment"># 左 [1]</span></span><br><span class="line">    <span class="comment"># 右 [4, 6, 3, 8, 5]</span></span><br><span class="line">    <span class="comment"># 随机 4    #第二次取出基准值</span></span><br><span class="line">    <span class="comment"># 左 [3]</span></span><br><span class="line">    <span class="comment"># 右 [6, 8, 5]</span></span><br><span class="line">    <span class="comment"># 随机 6  #第三次取出基准值</span></span><br><span class="line">    <span class="comment"># 左 [5]</span></span><br><span class="line">    <span class="comment"># 右 [8]</span></span><br><span class="line">    <span class="comment"># [1, 2, 3, 4, 5, 6, 8]</span></span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。<br>冒泡排序就是遍历数据，每次只与下一个数字比较，如果这两个数顺序不对，则与交换过来。<br>就上面那个问题来说，因为要升序排列，所以数字越大越排在后面。则两个数比较的时候，如果后一个数比当前数小，则顺序不对，要将这两个数交换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(li)</span>:</span></span><br><span class="line">cli = len(li)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(cli):<span class="comment">#遍历所有数组</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(cli-i<span class="number">-1</span>):<span class="comment">#</span></span><br><span class="line"><span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]: <span class="comment">#比较相邻两个元素，判断大小交换位置</span></span><br><span class="line">li[j],li[j+<span class="number">1</span>]=li[j+<span class="number">1</span>],li[j]</span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>]</span><br><span class="line">bubble_sort(li)</span><br><span class="line">print(li)     </span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序：第1趟，在待排序记录r1 ~ r[n]中选出最小的记录，将它与r1交换；第2趟，在待排序记录r2 ~ r[n]中选出最小的记录，将它与r2交换；以此类推，第i趟在待排序记录r[i] ~ r[n]中选出最小的记录，将它与r[i]交换，使有序序列不断增长直到全部排序完毕</p><p>时间复杂度：O(n²)<br>空间复杂度：O(1)<br>稳定性：不稳定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(slist)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(slist)):</span><br><span class="line">        x = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, len(slist)):</span><br><span class="line">            <span class="keyword">if</span> slist[j] &lt; slist[x]:</span><br><span class="line">                x = j</span><br><span class="line">        slist[i], slist[x] = slist[x], slist[i]</span><br><span class="line">    <span class="keyword">return</span> slist</span><br><span class="line"></span><br><span class="line">slist = select_sort([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>])</span><br><span class="line">print(slist)</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序：插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序；首先将第一个作为已经排好序的，然后每次从后的取出插入到前面并排序；</p><p>时间复杂度：O(n²)<br>空间复杂度：O(1)<br>稳定性：稳定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(ilist)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ilist)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">            <span class="keyword">if</span> ilist[i] &lt; ilist[j]:</span><br><span class="line">                ilist.insert(j, ilist.pop(i))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> ilist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">list = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line">print(insert_sort(list))</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序：采用的也是分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并</p><p>时间复杂度：O(nlog₂n)<br>空间复杂度：O(1)<br>稳定性：稳定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge_arr</span><span class="params">(arr_l, arr_r)</span>:</span></span><br><span class="line">        array = []</span><br><span class="line">        <span class="keyword">while</span> len(arr_l) <span class="keyword">and</span> len(arr_r):</span><br><span class="line">            <span class="keyword">if</span> arr_l[<span class="number">0</span>] &lt;= arr_r[<span class="number">0</span>]:</span><br><span class="line">                array.append(arr_l.pop(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">elif</span> arr_l[<span class="number">0</span>] &gt; arr_r[<span class="number">0</span>]:</span><br><span class="line">                array.append(arr_r.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">if</span> len(arr_l) != <span class="number">0</span>:</span><br><span class="line">            array += arr_l</span><br><span class="line">        <span class="keyword">elif</span> len(arr_r) != <span class="number">0</span>:</span><br><span class="line">            array += arr_r</span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recursive</span><span class="params">(array)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(array) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> array</span><br><span class="line">        mid = len(array) // <span class="number">2</span></span><br><span class="line">        arr_l = recursive(array[:mid])</span><br><span class="line">        arr_r = recursive(array[mid:])</span><br><span class="line">        <span class="keyword">return</span> merge_arr(arr_l, arr_r)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> recursive(array)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">2</span>]</span><br><span class="line">print(merge_sort(list))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;三次握手与四次挥手&#39;</title>
      <link href="/2020/07/11/Blog/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>/2020/07/11/Blog/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="简单介绍TCP协议"><a href="#简单介绍TCP协议" class="headerlink" title="简单介绍TCP协议"></a>简单介绍TCP协议</h3><p>TCP 是一种面向连接的单播协议，在发送数据前，通信双方必须在彼此间建立一条连接。所谓的 “连接”，其实是客户端和服务器的内存里保存的一份关于对方的信息，如 ip 地址、端口号等。</p><h3 id="以小故事来通俗理解三次握手与四次挥手"><a href="#以小故事来通俗理解三次握手与四次挥手" class="headerlink" title="以小故事来通俗理解三次握手与四次挥手"></a>以小故事来通俗理解三次握手与四次挥手</h3><p>举个栗子，我们把客户端来比作男孩子，服务端比作女孩子，用他们从认识到谈恋爱的过程来说明‘三次握手’，用他们从恋爱到分手的过程来说明‘四次挥手’。</p><div class="note info">            <ol><li>‘第一次握手’：男孩喜欢上了女孩子，想办法对女孩子进行告白，但是由于男孩子比较腼腆，所以他想到了写情书告诉女孩子说：“请和我交往吧！”。写完信把信放到邮筒，寄给女孩子。</li><li>‘第二次握手’：女孩子收到男孩子寄来的情书，心花怒放。原来女孩子也喜欢这个男孩子。于是给男孩子回信说：“我收到你的来信了，我们在一起吧！”。然后将信寄了回去。</li><li>‘第三次握手’：男孩子收到了女孩子的来信，然后两个人约在一个周末准备去旅游，过恩爱周末！</li></ol>          </div><p>三次信封，通俗的代表了三次握手，来确认客户端与服务端连接是否正常。</p><p>接着：我们来说四次挥手。</p><div class="note info">            <ol><li>‘第一次挥手’：日久见人心，因为种种原因，男孩和女孩不得不分手，于是男孩决定先说分手，便写一封信告诉女孩。</li><li>‘第二次挥手’：女孩收到信之后，知道了男孩要和自己分手，默默流泪，然后写信给男孩说要给男孩收拾行李。</li><li>‘第三次挥手’：女孩把男孩送的东西都整理好了，于是再次写信给男孩：你的东西我整理好了，过来取行李吧。</li><li>‘第四次挥手’：孩收到女孩第二封信之后，知道了女孩收拾好东西了，可以正式分手了，于是再次写信告诉女孩：我知道了，这就去拿回来！</li></ol>          </div><p>四次信封，通俗的代表了四次挥手。</p><h3 id="关于三次握手"><a href="#关于三次握手" class="headerlink" title="关于三次握手"></a>关于三次握手</h3><p>三次握手即TCP连接的建立。这个连接必须是一方主动打开，另一方被动打开的。<br><img src="/img/TCP-IP%E5%8D%8F%E8%AE%AE/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.gif" alt=""></p><div class="note info">            <p>图的解释：</p><ol><li>client 端发送 syn 字段，请求连接<br> 第一次：客户端发送网络包，服务器收到了。这样服务器得出结论：客户端的发送能力、服务端的接收能力是正常的。</li><li>server 端回复 ack、syn 字段字段确定与之连接<br> 第二次：服务端发包，客户端收到了。此时客户端得出结论：服务端的接收、发送能力正常，客户端的接收、发送能力正常</li><li>client 接到确认后进入 established 已建立状态，并发送 ack 字段确认对方的连接<br> 第三次：客户端发送的包，服务端收到了。这样服务端就能得出结论：服务端的接收、发送能力正常，客户端的接收、发送能力正常</li></ol>          </div><h3 id="为什么要进行三次握手？"><a href="#为什么要进行三次握手？" class="headerlink" title="为什么要进行三次握手？"></a>为什么要进行三次握手？</h3><p>“三次握手” 的作用就是双方都能明确自己和对方的收、发能力是正常的。<br>他是为了防止服务器端开启一些无用的连接增加服务器开销以及防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p><h3 id="关于四次挥手"><a href="#关于四次挥手" class="headerlink" title="关于四次挥手"></a>关于四次挥手</h3><p>四次挥手即TCP连接的释放(解除)。连接的释放必须是一方主动释放，另一方被动释放。<br><img src="/img/TCP-IP%E5%8D%8F%E8%AE%AE/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.gif" alt=""></p><div class="note info">            <p>图的解释：</p><ol><li>客户端发送 FIN 字段，客户端进入 fin_wait1 状态，服务端进入 close_wait 状态</li><li>服务端回复 ACK 字段，客户端进入 fin_wait2 状态</li><li>服务端再次发送 FIN 字段，服务端并进入 last_ack 状态</li><li>客户端确认，回复 ACK字段，客户端进入 time_wait 状态，服务端进入关闭状态</li></ol>          </div><h3 id="为什么“握手”是三次，“挥手”却要四次？"><a href="#为什么“握手”是三次，“挥手”却要四次？" class="headerlink" title="为什么“握手”是三次，“挥手”却要四次？"></a>为什么“握手”是三次，“挥手”却要四次？</h3><p>TCP建立连接时之所以只需要“三次握手”：在二次握手中，服务器端发送给客户端的TCP报文是以SYN与ACK作为标志位的。收到建立请求的报文后，把 ACK 和 SYN 放在一个报文里发送。</p><p>TCP释放连接时之所以需要“四次挥手”：当接收到主动方的 FIN 报文后，并不能立即释放连接，因为还有必要的数据需要处理，所以服务器先返回ACK确认收到报文，经过CLOSE-WAIT阶段准备好释放连接之后，才能返回FIN释放连接报文。</p><p>所以是“三次握手”与“四次挥手”。</p>]]></content>
      
      
      <categories>
          
          <category> TCP/IP协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 协议 </tag>
            
            <tag> tcp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;Vim使用命令&#39;</title>
      <link href="/2020/07/10/Blog/Vim%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/07/10/Blog/Vim%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Vim的模式"><a href="#Vim的模式" class="headerlink" title="Vim的模式"></a>Vim的模式</h3><p>Vim 有两种模式——Normal命令/普通模式和Insert编辑模式，所有命令都是在 Normal 模式下执行。启动 Vim 后，默认进入 Normal 模式，可以按 i 键进入 Insert 模式，或者 s 删除当前字符并进入 Insert 模式，退出 Insert 模式进入 Normal 按 ESC 。</p><h3 id="Vim的命令"><a href="#Vim的命令" class="headerlink" title="Vim的命令"></a>Vim的命令</h3><ol><li>在普通/命令模式下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">:w    退出</span><br><span class="line">:q    未修改退出</span><br><span class="line">:wq   保存在退出</span><br><span class="line">y     复制当前所选</span><br><span class="line">yy    复制当前整行</span><br><span class="line">p     黏贴</span><br><span class="line">u     撤销操作</span><br><span class="line">J     合并多行</span><br><span class="line">:&#x2F;123  查找所有的123处</span><br><span class="line">G     至文末</span><br><span class="line">gg    至文首</span><br><span class="line">d     删除当前所选</span><br><span class="line">dd    删除多行并存在剪贴板中（剪切）</span><br><span class="line">w     光标移动到下一个单词处</span><br><span class="line">b     光标移动到上一个单词处</span><br><span class="line">^     光标移动到行首</span><br><span class="line">$     光标移动到行尾</span><br><span class="line">k     向上移动光标</span><br><span class="line">j     向下移动光标</span><br><span class="line">h     向左移动光标</span><br><span class="line">l     向右移动光标</span><br><span class="line">shift+上下键    向上向下翻页</span><br><span class="line">:e!   重新加载当前文档，并丢弃已做的改动。</span><br><span class="line">ctrl+f          下翻一屏</span><br><span class="line">ctrl+b          上翻一屏</span><br><span class="line">ctrl+d          下翻半屏</span><br><span class="line">ctrl+u          上翻半屏</span><br><span class="line">ctrl+e          向下滚动一行</span><br><span class="line">ctrl+y          向上滚动一行</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;Win10系统下安装编辑器之神并且配置环境变量&#39;</title>
      <link href="/2020/07/10/Blog/Vim%E7%A5%9E%E4%B9%8B%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%AE%89%E8%A3%85/"/>
      <url>/2020/07/10/Blog/Vim%E7%A5%9E%E4%B9%8B%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Vim介绍"><a href="#Vim介绍" class="headerlink" title="Vim介绍"></a>Vim介绍</h3><p>Vim是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器，在Vi的基础上改进和增加了很多特性。<br>Vim在 1976 年发布，奉行 Unix 传统的“Do one thing and do it well”哲学，每个程序只做一件事但求做到最好，通过程序之间的配合得到强大的功能，其两种模式(Normal/Insert) 的玄妙变换，幻化出各种组合的炫酷用法，不知倾倒了多少开发者的心。本次我们在Win10平台构建一套以Vim为核心的Python开发环境。</p><h3 id="Vim的下载"><a href="#Vim的下载" class="headerlink" title="Vim的下载"></a>Vim的下载</h3><p>Vim官网：<a href="https://www.vim.org/" target="_blank" rel="noopener">传送门</a></p><ol><li>下载Vim<br>Vim的下载地址在<a href="https://tuxproject.de/projects/vim/x64/" target="_blank" rel="noopener">https://tuxproject.de/projects/vim/x64/</a>,然后我们根据系统类型来选择32位或者64位由于我的电脑配置在64位，所以这里我们下载64位。<br><img src="/img/Vim/%E9%80%89%E6%8B%A964%E4%BD%8D%E4%B8%8B%E8%BD%BD.png" alt="选择64位"></li><li>然后我们将下载好的目录放在C:Vim目录下<br><img src="/img/Vim/%E4%B8%8B%E8%BD%BD%E5%88%B0%E7%9B%AE%E5%BD%95.png" alt="下载到C盘目录下"></li><li>给vim配置环境变量,方便我们在系统任意位置启动vim<br><img src="/img/Vim/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="配置环境变量"></li><li>然后我们在C盘的用户目录下，建立一个<em>vimrc文件，这是vim的配置文件，所有的设置都在这里编写，方便vim全局使用<br><img src="/img/Vim/%E7%BC%96%E5%86%99%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="编写配置文件"></em></li><li>将以下代码添加到_vimrc文件中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&quot; An example for a vimrc file.</span><br><span class="line">&quot;</span><br><span class="line">&quot; Maintainer:Bram Moolenaar &lt;Bram@vim.org&gt;</span><br><span class="line">&quot; Last change:2019 Dec 17</span><br><span class="line">&quot;</span><br><span class="line">&quot; To use it, copy it to</span><br><span class="line">&quot;       for Unix:  ~&#x2F;.vimrc</span><br><span class="line">&quot;      for Amiga:  s:.vimrc</span><br><span class="line">&quot; for MS-Windows:  $VIM_vimrc</span><br><span class="line">&quot;      for Haiku:  ~&#x2F;config&#x2F;settings&#x2F;vim&#x2F;vimrc</span><br><span class="line">&quot;    for OpenVMS:  sys$login:.vimrc</span><br><span class="line"></span><br><span class="line">&quot; When started as &quot;evim&quot;, evim.vim will already have done these settings, bail</span><br><span class="line">&quot; out.</span><br><span class="line">if v:progname &#x3D;~? &quot;evim&quot;</span><br><span class="line">  finish</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">&quot; Get the defaults that most users want.</span><br><span class="line">source $VIMRUNTIME&#x2F;defaults.vim</span><br><span class="line"></span><br><span class="line">if has(&quot;vms&quot;)</span><br><span class="line">  set nobackup&quot; do not keep a backup file, use versions instead</span><br><span class="line">else</span><br><span class="line">  set backup&quot; keep a backup file (restore to previous version)</span><br><span class="line">  if has(&#39;persistent_undo&#39;)</span><br><span class="line">    set undofile&quot; keep an undo file (undo changes after closing)</span><br><span class="line">  endif</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">if &amp;t_Co &gt; 2 || has(&quot;gui_running&quot;)</span><br><span class="line">  &quot; Switch on highlighting the last used search pattern.</span><br><span class="line">  set hlsearch</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">&quot; Put these in an autocmd group, so that we can delete them easily.</span><br><span class="line">augroup vimrcEx</span><br><span class="line">  au!</span><br><span class="line"></span><br><span class="line">  &quot; For all text files set &#39;textwidth&#39; to 78 characters.</span><br><span class="line">  autocmd FileType text setlocal textwidth&#x3D;78</span><br><span class="line">augroup END</span><br><span class="line"></span><br><span class="line">&quot; Add optional packages.</span><br><span class="line">&quot;</span><br><span class="line">&quot; The matchit plugin makes the % command work better, but it is not backwards</span><br><span class="line">&quot; compatible.</span><br><span class="line">&quot; The ! means the package won&#39;t be loaded right away but when plugins are</span><br><span class="line">&quot; loaded during initialization.</span><br><span class="line">if has(&#39;syntax&#39;) &amp;&amp; has(&#39;eval&#39;)</span><br><span class="line">  packadd! matchit</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">set encoding&#x3D;utf-8</span><br><span class="line">set fileencodings&#x3D;utf-8,chinese,latin-1</span><br><span class="line">if has(&quot;win32&quot;)</span><br><span class="line">    set fileencoding&#x3D;chinese</span><br><span class="line">else</span><br><span class="line">    set fileencoding&#x3D;utf-8</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">set autoindent</span><br><span class="line">set nu!</span><br><span class="line">set shiftwidth&#x3D;4</span><br><span class="line"></span><br><span class="line">source $VIMRUNTIME&#x2F;delmenu.vim</span><br><span class="line">source $VIMRUNTIME&#x2F;menu.vim</span><br><span class="line"></span><br><span class="line">language messages zh_CN.utf-8</span><br><span class="line"></span><br><span class="line">colo koehler</span><br><span class="line">set guifont&#x3D;monaco:h11:cANSI</span><br><span class="line"></span><br><span class="line">set ts&#x3D;4</span><br><span class="line">set expandtab</span><br><span class="line"></span><br><span class="line">map &lt;F5&gt; :! python.exe %</span><br></pre></td></tr></table></figure><p>这些都是一些最基本的配置，比如设置编码解决中文乱码问题、自动缩进以及缩进宽度、菜单栏中文字体问题、主题和字体、以及四个空格代替制表符等等，注意一点这个配置里我将运行python脚本的快捷键设置成了f5。</p><p>这时进入windows命令行，输入gvim启动编辑器，然后键入命令:version，看到版本号就没有问题了<br><img src="/img/Vim/version.png" alt="查看版本version"></p><p>虽然现在Vim已经可以正常使用了，但是没有插件的加成，开发效率就不是那么高，所以我们现在来安装一些常用的插件。</p><h3 id="给Vim下载插件"><a href="#给Vim下载插件" class="headerlink" title="给Vim下载插件"></a>给Vim下载插件</h3><p>1.安装pathogen.vim插件（一个vim插件管理器）</p><p>插件地址：<a href="https://github.com/tpope/vim-pathogen" target="_blank" rel="noopener">https://github.com/tpope/vim-pathogen</a><br>我们可以直接命令 git clone <a href="https://github.com/tpope/vim-pathogen" target="_blank" rel="noopener">https://github.com/tpope/vim-pathogen</a> 或者 直接下载压缩包</p><p>然后将Clone或者解压后的pathogen.vim文件放到C:/vim/autoload目录下<br><img src="/img/Vim/vim-pathogen.png" alt=""></p><p>接着我们修改_vimrc配置文件，将下面配置添加进去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execute pathogen#infect()</span><br></pre></td></tr></table></figure><p>接着就可以安装其他插件了。</p><p>2.我们安装一个项目管理插件(project)，它可以帮助我们把项目整体导入vim编辑器内，通过点击文件进行修改，这样就不用每次编辑都要在命令行输入命令才能编辑了，大体上，这个插件可以帮我们快速修改整个项目。</p><p>插件下载地址：<a href="https://www.vim.org/scripts/script.php?script_id=69" target="_blank" rel="noopener">https://www.vim.org/scripts/script.php?script_id=69</a><br><img src="/img/Vim/project.png" alt=""></p><p>将解压后的doc目录中的project文件拷贝到vim安装目录的doc目录下</p><p>将plugin目录下的project.vim拷贝到vim安装目录的plugin目录下</p><p>在命令行输入gvim启动编辑器</p><p>输入:Project</p><p>随后输入\C (是反斜杠和大写C，因为是输入命令，所以不会在编辑内显示，但是执行成功后会弹出窗口)</p><p><img src="/img/Vim/Entry.png" alt=""></p><p>Enter the Name of the Entry: 输入项目名</p><p>Enter the Absolute Directory to Load: 输入项目的文件目录路径（项目目录需要事先存在）</p><p>Enter the CD parameter: 这个和项目目录路径一样即可</p><p>Enter the File Filter: 设置管理的文件类型，<em>.py,</em>.txt等等，可以设置多个，不设置（直接回车）默认为所有类型</p><p>再次使用：打开vim后输入:Project<br>使用回车打开或关闭标签。<br>添加或者修改文件后可以使用\R进行刷新项目。</p><p>这样我们就可以在vim里管理我们的项目了。</p><p><img src="/img/Vim/%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6.png" alt=""></p><p>每次导入项目后，你都可以在用户目录的.vimprojects文件中进行修改或者删除项目，非常灵活<br><img src="/img/Vim/vimprojects.png" alt=""></p><p>好了，项目导入后就可以愉快的开发了，但是我们发现vim默认没有代码补全，怎么办呢？</p><p>3.使用pydiction插件</p><p>pydiction，下载地址：<a href="https://github.com/rkulla/pydiction" target="_blank" rel="noopener">https://github.com/rkulla/pydiction</a></p><p>也可以使用git clone <a href="https://github.com/rkulla/pydiction或者直接下载压缩包。" target="_blank" rel="noopener">https://github.com/rkulla/pydiction或者直接下载压缩包。</a><br>解压之后，发现里面有after文件夹、complete-dict、pydiction.py</p><p>将after里面的python_pydiction.vim文件拷贝到 vim安装目录下的ftpplugin里面，将complete-dict、pydiction.py 拷贝到ftpplugin目录下。</p><p>随后在_vimrc里面添加 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filetype plugin on</span><br><span class="line">let g:pydiction_location&#x3D;&#39;C:vimftplugincomplete-dict&#39;</span><br><span class="line">let g:pydiction_menu_height &#x3D; 3</span><br></pre></td></tr></table></figure><p>就搞定了，使用方法是，敲入两个字母之后使用tab键进行补全，效果是下面这样：</p><p><img src="/img/Vim/%E5%90%8E%E7%AB%AFtab%E8%A1%A5%E5%85%A8.png" alt=""></p><p>还不错吧，有的时候，你甚至想用vim来编辑前端的页面，没有任何问题</p><p>4.使用autocomplpop插件<br>autocomplpop插件，下载地址：<a href="https://vim.sourceforge.io/scripts/script.php?script_id=1879" target="_blank" rel="noopener">https://vim.sourceforge.io/scripts/script.php?script_id=1879</a></p><p>解压后，将plugin下的脚本文件(.vim)、doc下的帮助文件(.txt)和autoload下的(.vim)文件分别拷贝至vim的 plugin、doc和autoload目录</p><p>这个插件甚至不需要配置，只需要在输入/insert模式下即可自动根据当前文档内的内容进行自动补全<br><img src="/img/Vim/%E5%89%8D%E7%AB%AFtab%E8%A1%A5%E5%85%A8.png" alt=""></p><p>结语：遥想当年，Windows平台用户对软件的可扩展性完全没有概念，他们只能对他们使用的软件进行非常有限的定制(普通版/家庭版/专业版)。扩展软件的权利也保留在开发者手中。软件的使用者如果想要新的功能和特性，只能等待软件的升级或者花钱买。有能力的用户不想被束缚，为了添加自己想要的功能，自己写新的功能。就这样，新的功能意味着新的软件，Windows平台的软件前赴后继，迅速地更新换代。因此，Windows平台就如铁打的营盘，而那些软件就像流水的兵，循环往复。</p><p>现而今，Mac os和开源软件渐渐流行起来，此时的人们才发现：可扩展性才是软件的核心竞争力。在JetBrains横行的今天，Vscode为什么被评为最好的IDE？就是因为它在IDE中最具可扩展性。同理，将近30多年的历史浪潮中Vim没有被时代淘汰，反而愈发健壮，拥趸遍布全世界，也正是因为在数不清的编辑器中，Vim具有无可匹敌的可扩展性。</p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/05/Blog/hello-world/"/>
      <url>/2020/07/05/Blog/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>&#39;在线客服系统-基于flask+vue+socket.io实现在线客服系统&#39;</title>
      <link href="/2020/06/28/Blog/%E5%9C%A8%E7%BA%BF%E5%AE%A2%E6%9C%8D%E7%B3%BB%E7%BB%9F-%E5%9F%BA%E4%BA%8Eflask-vue%E9%9B%86%E6%88%90%E9%A1%B9%E7%9B%AE/"/>
      <url>/2020/06/28/Blog/%E5%9C%A8%E7%BA%BF%E5%AE%A2%E6%9C%8D%E7%B3%BB%E7%BB%9F-%E5%9F%BA%E4%BA%8Eflask-vue%E9%9B%86%E6%88%90%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="socket-io介绍"><a href="#socket-io介绍" class="headerlink" title="socket.io介绍"></a>socket.io介绍</h3><p>Socket.IO 就是一个封装了 Websocket、基于 Node 的 JavaScript 框架，包含 client 的 JavaScript 和 server 的 Node（现在也支持python,go lang等语言）。其屏蔽了所有底层细节，让顶层调用非常简单，另外，Socket.IO 还有一个非常重要的好处。其不仅支持 WebSocket，还支持许多种轮询机制以及其他实时通信方式，并封装了通用的接口。这些方式包含 Adobe Flash Socket、Ajax 长轮询、Ajax multipart streaming 、持久 Iframe、JSONP 轮询等。<a id="more"></a>换句话说，当 Socket.IO 检测到当前环境不支持 WebSocket 时，能够自动地选择最佳的方式来实现网络的实时通信，这一点就比websocket要智能不少。</p><h3 id="后台服务搭建"><a href="#后台服务搭建" class="headerlink" title="后台服务搭建"></a>后台服务搭建</h3><p>结合python和flask需要的模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br><span class="line">pip install flask-cors</span><br><span class="line">pip install flask-socketio</span><br><span class="line">pip install Flask-SQLAlchemy</span><br></pre></td></tr></table></figure><p>本次模块对应版本号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Flask                 1.1.1</span><br><span class="line">Flask-Cors            3.0.8</span><br><span class="line">Flask-SocketIO        4.3.0</span><br><span class="line">Flask-SQLAlchemy      2.4.1</span><br></pre></td></tr></table></figure><h3 id="flask的启动文件manage-py"><a href="#flask的启动文件manage-py" class="headerlink" title="flask的启动文件manage.py"></a>flask的启动文件manage.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request,jsonify</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"><span class="keyword">from</span> flask_socketio <span class="keyword">import</span> SocketIO,send,emit</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">CORS(app,cors_allowed_origins=<span class="string">"*"</span>)</span><br><span class="line"></span><br><span class="line">socketio = SocketIO(app,cors_allowed_origins=<span class="string">'*'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@socketio.on('message')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_message</span><span class="params">(message)</span>:</span></span><br><span class="line">    message = urllib.parse.unquote(message)</span><br><span class="line">    print(message)</span><br><span class="line">    send(message,broadcast=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@socketio.on('connect', namespace='/chat')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_connect</span><span class="params">()</span>:</span></span><br><span class="line">    emit(<span class="string">'my response'</span>, &#123;<span class="string">'data'</span>: <span class="string">'Connected'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@socketio.on('disconnect', namespace='/chat')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_disconnect</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Client disconnected'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    socketio.run(app,debug=<span class="literal">True</span>,host=<span class="string">"0.0.0.0"</span>,port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>这里简单说一下需要注意的地方，实例化socketio对象的时候，要加上cors_allowed_origins来设置跨域，前后端分离项目让人伤脑筋的地方就是浏览器同源策略问题，而跨域最好由server端来单独配置，这样的好处是当多个前端项目同时共用一套微服务接口时，就不用每个前端项目都配置一次跨域了。</p><p>我们写了三个基于socketio的视图方法，connect和disconnect顾名思义，当clinet发起连接或者断开时我们可以及时捕获到，而message方法就是前后端进行消息通信的重要方法。</p><p>发送消息的时候方法加了一个broadcast参数，这是socket.io极具特色的功能，类似广播的效果，可以同时给不同链接的client发送消息，即可以用于聊天，也可以用来做消息推送。</p><p>最后需要注意的一点是，client发送消息时，最好用urlencode编码一下，这样可以解决中文乱码问题，而在server端，可以用urllib.parse.unquote()来进行解码操作。</p><h3 id="运行命令启动后端服务"><a href="#运行命令启动后端服务" class="headerlink" title="运行命令启动后端服务"></a>运行命令启动后端服务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py</span><br></pre></td></tr></table></figure><p><img src="/img/python/%E5%90%AF%E5%8A%A8flask%E5%91%BD%E4%BB%A4.png" alt="启动flask命令"><br>服务正常启动在5000端口上，就说明后端没有问题了。</p><h3 id="前端配置"><a href="#前端配置" class="headerlink" title="前端配置"></a>前端配置</h3><p>配置前端(client)，前端采用vue2.0框架来驱动，也需要安装socket.io模块<br>这里一定要指定版本号来安装，版本是2.1.0，因为该依赖的最新版在vue2.0项目中编译时会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-socket.io@2.1.0</span><br></pre></td></tr></table></figure><p>在main.js中引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueSocketio <span class="keyword">from</span> <span class="string">'vue-socket.io'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueSocketio,<span class="string">'http://127.0.0.1:5000'</span>);</span><br></pre></td></tr></table></figure><p>注意链接的url是后端服务的地址+端口，千万不要加其他url后缀或者命名空间</p><p>新建一个用户页面，user.vue来模拟用户链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in log_list"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"msg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"send"</span>&gt;</span>发送消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">  msg: <span class="string">""</span>,</span></span><br><span class="line">  log_list:[]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="actionscript">  <span class="comment">//注册组件标签</span></span></span><br><span class="line">  components:&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  sockets:&#123;</span><br><span class="line"><span class="actionscript">    connect: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'socket 连接成功'</span>)</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    message: <span class="function"><span class="keyword">function</span><span class="params">(val)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'返回:'</span>+val);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.log_list.push(val);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">  mounted:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"> </span><br><span class="line">&#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">send()&#123;</span><br><span class="line"><span class="javascript">  <span class="keyword">this</span>.$socket.emit(<span class="string">'message'</span>,<span class="built_in">encodeURI</span>(<span class="string">"用户:"</span>+<span class="keyword">this</span>.msg));</span></span><br><span class="line">    &#125;,     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动前端服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>访问前端页面 <a href="http://localhost:8080/user" target="_blank" rel="noopener">http://localhost:8080/user</a> 可以看到服务成功链接</p><p>新建一个后台客服组件页面，item.vue用来模拟用户和客服在不同电脑进行聊天的场景</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in log_list"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">&#123;&#123;item&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"msg"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"send"</span>&gt;</span>发送消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">  msg: <span class="string">""</span>,</span></span><br><span class="line">  log_list:[]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="actionscript">  <span class="comment">//注册组件标签</span></span></span><br><span class="line">  components:&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  sockets:&#123;</span><br><span class="line"><span class="actionscript">    connect: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'socket 连接成功'</span>)</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    message: <span class="function"><span class="keyword">function</span><span class="params">(val)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'返回:'</span>+val);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">this</span>.log_list.push(val);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="actionscript">  mounted:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">send()&#123;</span><br><span class="line"><span class="javascript">  <span class="keyword">this</span>.$socket.emit(<span class="string">'message'</span>,<span class="built_in">encodeURI</span>(<span class="string">"客服:"</span>+<span class="keyword">this</span>.msg));</span></span><br><span class="line">    &#125;,    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="最后效果"><a href="#最后效果" class="headerlink" title="最后效果"></a>最后效果</h3><p><img src="/img/python/%E5%AE%A2%E6%9C%8D%E7%B3%BB%E7%BB%9F1.png" alt="效果1"><br><img src="/img/python/%E5%AE%A2%E6%9C%8D%E7%B3%BB%E7%BB%9F2.png" alt="效果2"></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;flask第二弹——cookie和session&#39;</title>
      <link href="/2020/06/26/Blog/flask%E7%AC%AC%E4%BA%8C%E5%BC%B9%E2%80%94%E2%80%94cookie%E5%92%8Csession/"/>
      <url>/2020/06/26/Blog/flask%E7%AC%AC%E4%BA%8C%E5%BC%B9%E2%80%94%E2%80%94cookie%E5%92%8Csession/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>上一章讲了<a href="">flask的入门</a>,这一章说一下flask中的cookie和session</p><h3 id="设置cookie和获取cookie"><a href="#设置cookie和获取cookie" class="headerlink" title="设置cookie和获取cookie"></a>设置cookie和获取cookie</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,make_response,request</span><br><span class="line"></span><br><span class="line"><span class="comment">#建立flask对象</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从配置文件来加载配置</span></span><br><span class="line">app.config.from_pyfile(<span class="string">'config.ini'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用flask路由器，指定网址和控制器,首页</span></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'hello python'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用make_response库设置cookie</span></span><br><span class="line"><span class="meta">@app.route('/set_cookie')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_cookie</span><span class="params">()</span>:</span></span><br><span class="line">resp = make_response(<span class="string">'存储cookie'</span>)</span><br><span class="line">    <span class="comment">#使用set_cookie来存储key-value形式的数据</span></span><br><span class="line">resp.set_cookie(<span class="string">'username'</span>,<span class="string">'wzh'</span>)</span><br><span class="line"><span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用request库获取cookie</span></span><br><span class="line"><span class="meta">@app.route('/get_cookie')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie</span><span class="params">()</span>:</span></span><br><span class="line">resp = make_response(<span class="string">'获取cookie'</span>)</span><br><span class="line">    <span class="comment">#获取cookie需要使用request库</span></span><br><span class="line">    resp = request.cookies.get(<span class="string">'username'</span>)</span><br><span class="line"><span class="comment"># resp = request.cookies['username']</span></span><br><span class="line"><span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;flask第一弹——flask安装及入门&#39;</title>
      <link href="/2020/06/26/Blog/flask%E7%AC%AC%E4%B8%80%E5%BC%B9%E2%80%94%E2%80%94flask%E5%AE%89%E8%A3%85%E5%8F%8A%E5%85%A5%E9%97%A8/"/>
      <url>/2020/06/26/Blog/flask%E7%AC%AC%E4%B8%80%E5%BC%B9%E2%80%94%E2%80%94flask%E5%AE%89%E8%A3%85%E5%8F%8A%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Flask是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。Flask使用 BSD 授权。</p><p>Flask是一个轻量级的可定制框架，使用Python语言编写，较其他同类型框架更为灵活、轻便、安全且容易上手。它可以很好地结合MVC模式进行开发，开发人员分工合作，小型团队在短时间内就可以完成功能丰富的中小型网站或Web服务的实现。另外，Flask还有很强的定制性，用户可以根据自己的需求来添加相应的功能，在保持核心功能简单的同时实现功能的丰富与扩展，其强大的插件库可以让用户实现个性化的网站定制，开发出功能强大的网站。</p><h3 id="下载安装flask依赖"><a href="#下载安装flask依赖" class="headerlink" title="下载安装flask依赖"></a>下载安装flask依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install Flask</span><br><span class="line">pip install Flask-Cors</span><br><span class="line">pip install Flask-Migrate</span><br><span class="line">pip install Flask-SQLAlchemy</span><br></pre></td></tr></table></figure><h3 id="flask的入门使用"><a href="#flask的入门使用" class="headerlink" title="flask的入门使用"></a>flask的入门使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,redirect,url_for,jsonify</span><br><span class="line"></span><br><span class="line"><span class="comment">#建立flask对象</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用flask路由器route，指定网址和控制器</span></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'hello python'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用程序入口,将flask应用启动，port参数用来调整端口，默认端口是5000</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">app.run(debug=<span class="literal">True</span>)  <span class="comment">#debug=True测试</span></span><br></pre></td></tr></table></figure><h3 id="flask的路由传参"><a href="#flask的路由传参" class="headerlink" title="flask的路由传参"></a>flask的路由传参</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/hello/&lt;id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(id)</span>:</span></span><br><span class="line">print(id)</span><br><span class="line"><span class="keyword">return</span> <span class="string">'123 世界 参数%s'</span>%id</span><br></pre></td></tr></table></figure><h3 id="flask的跳转"><a href="#flask的跳转" class="headerlink" title="flask的跳转"></a>flask的跳转</h3><p>flask有两种跳转方式，一种是根据网址跳转，一种是根据函数名跳转</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用重定向模块跳转</span></span><br><span class="line"><span class="meta">@app.route('/re')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment">#redirect根据网址进行跳转</span></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">'http://okwzh.cn'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用url_for来实现简单的站内跳转，参数是指定路由函数名</span></span><br><span class="line"><span class="meta">@app.route('/url')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment">#redirect根据函数名跳转</span></span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">'re'</span>))</span><br><span class="line">    <span class="comment">#跳转加参数</span></span><br><span class="line">    <span class="comment">#return redirect(url_for('hello',id=1))</span></span><br></pre></td></tr></table></figure><h3 id="flask返回json类型"><a href="#flask返回json类型" class="headerlink" title="flask返回json类型"></a>flask返回json类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回json数据</span></span><br><span class="line"><span class="meta">@app.route('/json')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re_json</span><span class="params">()</span>:</span></span><br><span class="line">json_dict = &#123;</span><br><span class="line"><span class="string">'id'</span>:<span class="number">10</span>,</span><br><span class="line"><span class="string">'title'</span>:<span class="string">'王增辉'</span>,</span><br><span class="line"><span class="string">'content'</span>:<span class="string">'这是json类型'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> jsonify(json_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决中文乱码问题，让中文正常显示</span></span><br><span class="line"><span class="comment">#访问之后我们发现返回的是json类型存在编码问题,于是我们在配置上添加</span></span><br><span class="line">app.config[<span class="string">'JSON_AS_ASCII'</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="flask的钩子方法及使用"><a href="#flask的钩子方法及使用" class="headerlink" title="flask的钩子方法及使用"></a>flask的钩子方法及使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一次请求前</span></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brfore_first_request</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'这是第一次请求之前调用的方法'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#每次请求前</span></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'每次请求之前调用的方法'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#每次请求之后</span></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="comment">#必须传响应参数，将响应内容返回</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request</span><span class="params">(response)</span>:</span></span><br><span class="line">print(<span class="string">'每次请求之后调用的方法'</span>)</span><br><span class="line"><span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#在请求之后，调用服务器出现的错误信息</span></span><br><span class="line"><span class="meta">@app.teardown_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">teardown_request</span><span class="params">(e)</span>:</span></span><br><span class="line">print(<span class="string">'服务器出现的错误是%s'</span>%str(e))</span><br></pre></td></tr></table></figure><h3 id="flask添加配置文件的三种方式"><a href="#flask添加配置文件的三种方式" class="headerlink" title="flask添加配置文件的三种方式"></a>flask添加配置文件的三种方式</h3><p>1.从配置文件里加载配置<br>创建一个config.ini的文件，里面存放配置信息<br>app.config.from_pyfile(‘config.ini’)</p><p>2.从环境变量中加载配置<br>app.config.from_envvar(‘app_config’)</p><p>3.从配置对象来加载配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#建立一个配置类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>:</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line">JSON_AS_ASCII = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">app.config.from_object(Config)</span><br></pre></td></tr></table></figure><h3 id="flask统一对状态码捕获异常"><a href="#flask统一对状态码捕获异常" class="headerlink" title="flask统一对状态码捕获异常"></a>flask统一对状态码捕获异常</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#flask统一对状态码捕获异常</span></span><br><span class="line"><span class="meta">@app.errorhandler(405)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_error</span><span class="params">(e)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'这个接口不能被get获取到，只能被post获取'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_error2</span><span class="params">(e)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'网页不存在'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;python高阶函数&#39;</title>
      <link href="/2020/06/22/Blog/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
      <url>/2020/06/22/Blog/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="什么是高阶函数？"><a href="#什么是高阶函数？" class="headerlink" title="什么是高阶函数？"></a>什么是高阶函数？</h3><p>高阶函数：一个函数可以作为参数传给另外一个函数，或者一个函数的返回值为另外一个函数（若返回值为该函数本身，则为递归），满足其一则为高阶函数。</p><p>函数作为参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'这是第一个函数'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_two</span><span class="params">(func)</span>:</span></span><br><span class="line">func()</span><br><span class="line">print(<span class="string">'这是第二个函数'</span>)</span><br><span class="line"></span><br><span class="line">func_two(func)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这是第一个函数</span></span><br><span class="line"><span class="comment">#这是第二个函数</span></span><br></pre></td></tr></table></figure><p>函数作为另一个函数的返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'这是第一个函数'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_two</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">'这是第二个函数'</span>)</span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line">f = func_two(func)</span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是第二个函数</span></span><br><span class="line"><span class="comment"># 这是第一个函数</span></span><br></pre></td></tr></table></figure><h3 id="lambda表达式，匿名函数"><a href="#lambda表达式，匿名函数" class="headerlink" title="lambda表达式，匿名函数"></a>lambda表达式，匿名函数</h3><p>lambda是一个表达式，他的整体架构比def函数简单得多。所以lambda只能封装有限的逻辑。</p><p>lambda表达式的作用<br>lambda函数起到了函数速写的作用。</p><p>lambda表达式的格式语法<br>由于lambda表达式返回的是函数对象(这里构建的是一个函数对象)，所以我们需要使用一个变量去接受它。<br>格式：lambda的一般形式是关键字lambda后面跟一个或多个参数，紧跟一个冒号，之后是一个表达式。</p><figure class="highlight python"><figcaption><span>一个参数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="keyword">lambda</span> args : args + <span class="number">1</span></span><br><span class="line">print(res(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>多个参数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="keyword">lambda</span> args1,args2 : args1 * args2</span><br><span class="line">print(res(<span class="number">6</span>,<span class="number">6</span>))</span><br><span class="line"><span class="comment"># 36</span></span><br></pre></td></tr></table></figure><h3 id="Map函数"><a href="#Map函数" class="headerlink" title="Map函数"></a>Map函数</h3><p>map函数接收的是两个参数，一个函数，一个序列，其功能是将序列中的值处理再依次返回至列表内。其返回值为一个迭代器对象。</p><figure class="highlight python"><figcaption><span>匿名函数方式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">ret = map(<span class="keyword">lambda</span> x:x ** <span class="number">2</span>,alist)</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>def函数方式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">ret = map(func,alist)</span><br></pre></td></tr></table></figure><p>这里的返回值是一个迭代器对象，所以我们需要查看迭代器对象的三种方法</p><figure class="highlight python"><figcaption><span>第一种</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(list(ret)) <span class="comment">#[1, 4, 9, 16, 25]</span></span><br><span class="line">print(tuple(ret)) <span class="comment">#(1, 4, 9, 16, 25)</span></span><br><span class="line">print(set(ret)) <span class="comment">#&#123;1, 4, 9, 16, 25&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>第二种</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ret:</span><br><span class="line">    print(i,end=<span class="string">" "</span>)</span><br><span class="line"><span class="comment"># 1 4 9 16 25</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>第三种</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用循环来获取，但是一直next获取，当获取不到会报无法停止的错误，所以使用try来处理。</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(next(ret),end=<span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 1 4 9 16 25</span></span><br></pre></td></tr></table></figure><h3 id="Sorted函数"><a href="#Sorted函数" class="headerlink" title="Sorted函数"></a>Sorted函数</h3><p>sort 与 sorted 区别：<br>sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。<br>list 的 sort 方法返回的是对已经存在的列表进行操作，无返回值，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作,对原list无影响</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">slist = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">slist.sort()</span><br><span class="line">print(slist)    <span class="comment"># [1,2,3,4,5]</span></span><br><span class="line"></span><br><span class="line">alist = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">print(sorted(alist)) <span class="comment"># [1,2,3,4,5]</span></span><br><span class="line">print(alist)    <span class="comment"># [1,4,2,5,3]</span></span><br></pre></td></tr></table></figure><p>sorted接收三个参数(iterable,key,reverse)<br>其中reverse=False是降序(默认)，reverse=True是升序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alist = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">-6</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">print(sorted(alist,key=abs,reverse=<span class="literal">True</span>))<span class="comment">#这里我用了abs绝对值函数</span></span><br><span class="line"><span class="comment">#[-6, 5, 4, 3, 1]-6的绝对值是6，所以在第一位</span></span><br></pre></td></tr></table></figure><h3 id="Reduce函数"><a href="#Reduce函数" class="headerlink" title="Reduce函数"></a>Reduce函数</h3><p>reduce计算过程：<br>先将第一个，第二个元素进行操作，然后把第一二个操作之后的结果和第三个元素进行操作，直到结束</p><figure class="highlight python"><figcaption><span>lambda表达式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#reduce函数不是内置函数，而是在模块functools中的函数，故需要导包</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce </span><br><span class="line"></span><br><span class="line">alist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">res = reduce(<span class="keyword">lambda</span> x,y:x+y,alist)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 15</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>def函数方式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b)</span>:</span></span><br><span class="line"><span class="keyword">return</span> a*b</span><br><span class="line">res = reduce(func,alist)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 120</span></span><br></pre></td></tr></table></figure><h3 id="Filter函数"><a href="#Filter函数" class="headerlink" title="Filter函数"></a>Filter函数</h3><p>filter() 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。<br>filter函数的返回值也是一个可迭代对象</p><figure class="highlight python"><figcaption><span>def函数方式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line">alist = filter(func, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>])</span><br><span class="line">print(list(alist))</span><br><span class="line"><span class="comment"># [1,3,5,7,9]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>lambda表达式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = filter(<span class="keyword">lambda</span> a:a%<span class="number">2</span>==<span class="number">1</span>,[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>])</span><br><span class="line">print(list(res))</span><br><span class="line"><span class="comment"># [1,3,5,7,9]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;结合python实现支付宝退款功能&#39;</title>
      <link href="/2020/06/20/Blog/%E7%BB%93%E5%90%88python%E5%AE%9E%E7%8E%B0%E6%94%AF%E4%BB%98%E5%AE%9D%E9%80%80%E6%AC%BE%E5%8A%9F%E8%83%BD/"/>
      <url>/2020/06/20/Blog/%E7%BB%93%E5%90%88python%E5%AE%9E%E7%8E%B0%E6%94%AF%E4%BB%98%E5%AE%9D%E9%80%80%E6%AC%BE%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>有支付就肯定有退款，当交易发生之后一段时间内，由于买家或者卖家的原因需要退款时，卖家可以通过退款接口将支付款退还给买家，支付宝将在收到退款请求并且验证成功之后，按照退款规则将支付款按原路退到买家帐号上。 交易超过约定时间（签约时设置的可退款时间）的订单无法进行退款 支付宝退款支持单笔交易分多次退款，多次退款需要提交原支付订单的商户订单号和设置不同的退款单号。一笔退款失败后重新提交，要采用原来的退款单号。总退款金额不能超过用户实际支付金额。</p><p>前面已经写过<a href="https://okwzh.cn/2020/06/16/%E6%94%AF%E4%BB%98%E5%AE%9D%E8%AE%A2%E5%8D%95%E6%94%AF%E4%BB%98/">结合python实现支付宝的支付功能</a>。<br>支付宝官方文档：<a href="https://opendocs.alipay.com/apis/api_1/alipay.trade.refund" target="_blank" rel="noopener">https://opendocs.alipay.com/apis/api_1/alipay.trade.refund</a></p><p>由于之前写的有支付价格和支付宝的订单号，所以我们根据这两个参数，实现退款。</p><p>我们之前写的pay.py已经有退款方法了，所以我们需要直接调用就可以了。</p><figure class="highlight python"><figcaption><span>在pay.py已经写入</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#请求支付宝退款接口</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_alipay_trade_refund</span><span class="params">(self, refund_amount, out_trade_no=None, trade_no=None, **kwargs)</span>:</span></span><br><span class="line">    biz_content = &#123;</span><br><span class="line">        <span class="string">"refund_amount"</span>: refund_amount</span><br><span class="line">    &#125;</span><br><span class="line">    biz_content.update(**kwargs)</span><br><span class="line">    <span class="keyword">if</span> out_trade_no:</span><br><span class="line">        biz_content[<span class="string">"out_trade_no"</span>] = out_trade_no</span><br><span class="line">    <span class="keyword">if</span> trade_no:</span><br><span class="line">        biz_content[<span class="string">"trade_no"</span>] = trade_no</span><br><span class="line">    data = self.build_body(<span class="string">"alipay.trade.refund"</span>, biz_content)</span><br><span class="line">    url = self.__gateway + <span class="string">"?"</span> + self.sign_data(data)</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    html = r.content.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="keyword">return</span> html</span><br></pre></td></tr></table></figure><p>现在我们需要在写一个退款的视图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">refund</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment">#实例化支付类</span></span><br><span class="line">    alipay = get_ali_object()</span><br><span class="line">    <span class="comment">#调用退款方法</span></span><br><span class="line">    order_string = alipay.api_alipay_trade_refund(</span><br><span class="line">    <span class="comment">#订单号，一定要注意，这是支付成功后返回的唯一订单号</span></span><br><span class="line">    out_trade_no=<span class="string">"20190503214355"</span>,</span><br><span class="line">    <span class="comment">#退款金额，注意精确到分，不要超过订单支付总金额</span></span><br><span class="line">    refund_amount=<span class="string">"20.00"</span>,</span><br><span class="line">    <span class="comment">#回调网址</span></span><br><span class="line">    notify_url=<span class="string">'http://localhost:8000/md_admin/alipayreturn'</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(order_string)</span><br></pre></td></tr></table></figure><p>如果订单号和退款金额正确的话，请求该接口就会返回退款成功的返回值，查看支付宝钱包，相应的退款应该会及时到账<br><img src="/img/python/%E6%94%AF%E4%BB%98%E5%AE%9D%E9%80%80%E6%AC%BE.png" alt="支付宝退款返回参数"></p>]]></content>
      
      
      <categories>
          
          <category> 支付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> 支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;使用python结合钉钉配置开发自定义机器人&#39;</title>
      <link href="/2020/06/20/Blog/%E4%BD%BF%E7%94%A8python%E7%BB%93%E5%90%88%E9%92%89%E9%92%89%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
      <url>/2020/06/20/Blog/%E4%BD%BF%E7%94%A8python%E7%BB%93%E5%90%88%E9%92%89%E9%92%89%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>之前使用钉钉做过<a href="https://okwzh.cn/2020/04/28/day08-%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-%E9%92%89%E9%92%89%E7%99%BB%E5%BD%95/">三方登录</a>,今天我们来说一下使用python结合钉钉做一个钉钉群自定义机器人。</p><p>这个功能属于比较极客的功能，它可以将第三方服务的信息聚合到钉钉群中，实现信息的自动化同步，例如：通过聚合Github、Gitlab等源码管理服务，实现源码更新同步；通过聚合Trello、JIRA等项目协调服务，实现项目信息同步；同事，支持Webhook协议的自定义接入，支持更多可能性，例如：将运维报警提醒、自动化测试的结果报告提醒、工作、生活日程安排（上班打卡、下班吃饭、健身、读书、生日、纪念日…）等等的提醒，通过自定义机器人聚合到钉钉中。</p><p>过关于钉钉机器人网上的一些攻略年代都比较久远，代码很多都基于python2，为了与时俱进，我们尝试用python3.7来开发配置钉钉自定义机器人。</p><p>查看机器人官方文档：<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq" target="_blank" rel="noopener">https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq</a><br>首先明确一点，钉钉自定义机器人早就不支持在手机端创建了，所以得使用你的pc端或者mac端的钉钉客户端</p><h3 id="创建机器人"><a href="#创建机器人" class="headerlink" title="创建机器人"></a>创建机器人</h3><p>在需要机器人的聊天群界面，点击智能群助手(一个群可以添加6个自定义机器人，而且还得有管理员权限)</p><p><img src="/img/python/%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA1.png" alt="添加自定义机器人"></p><p>我们选择添加机器人</p><p><img src="/img/python/%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA2.png" alt="添加自定义机器人"></p><p>点进去发现好多机器人，各有各的功能，本次我们选择自定义机器人。</p><p><img src="/img/python/%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA3.png" alt="添加自定义机器人"></p><p>钉钉的机器人基于webhook协议，webhook呢是一个api概念,是微服务api的使用范式之一,也被成为反向api,即前端不主动发送请求,完全由后端推送。<br>在添加机器人页面填写一些基本信息。</p><p><img src="/img/python/%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA4.png" alt="添加自定义机器人"></p><p>需要注意的是，在安全设置一栏里，我们选择加签的方式来验证，在此说明一下，钉钉机器人的安全策略有三种，第一种是使用关键字，就是说你推送的消息里必须包含你创建机器人时定义的关键字，如果不包含就推送不了消息，第二种就是使用加密签名，第三种是定义几个ip源，非这些源的请求会被拒绝，综合来看还是第二种又安全又灵活。</p><p><img src="/img/python/%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA5.png" alt="添加自定义机器人"></p><p>创建成功后，系统会分配给你一个webhook地址，这个地址需要保存一下，地址中有唯一的accesstoken</p><p>这是我们的钉钉机器人已经添加完成了，于是我们要写入让他进行自动发送消息</p><h3 id="使用机器人发送消息"><a href="#使用机器人发送消息" class="headerlink" title="使用机器人发送消息"></a>使用机器人发送消息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入需要的模块</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">timestamp = str(round(time.time() * <span class="number">1000</span>))</span><br><span class="line">secret = <span class="string">'创建机器人的签名'</span></span><br><span class="line">secret_enc = secret.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">string_to_sign = <span class="string">'&#123;&#125;\n&#123;&#125;'</span>.format(timestamp, secret)</span><br><span class="line">string_to_sign_enc = string_to_sign.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">hmac_code = hmac.new(secret_enc, string_to_sign_enc, digestmod=hashlib.sha256).digest()</span><br><span class="line">sign = urllib.parse.quote(base64.b64encode(hmac_code))</span><br><span class="line"><span class="comment"># print(timestamp)</span></span><br><span class="line"><span class="comment"># print(sign)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests,json   <span class="comment">#导入依赖库</span></span><br><span class="line">headers=&#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>&#125;   <span class="comment">#定义数据类型</span></span><br><span class="line">webhook = <span class="string">'你的webhook地址&amp;timestamp='</span>+timestamp+<span class="string">"&amp;sign="</span>+sign</span><br><span class="line"><span class="comment">#定义要发送的数据</span></span><br><span class="line"><span class="comment">#"at": &#123;"atMobiles": "['"+ mobile + "']"</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"msgtype"</span>: <span class="string">"text"</span>,</span><br><span class="line">    <span class="string">"text"</span>: &#123;<span class="string">"content"</span>: <span class="string">'我是机器人,这是我发的第一条消息'</span>&#125;,</span><br><span class="line">    <span class="string">"isAtAll"</span>: <span class="literal">True</span>&#125;</span><br><span class="line">res = requests.post(webhook, data=json.dumps(data), headers=headers)   <span class="comment">#发送post请求</span></span><br><span class="line"></span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p>这是我们已经发现机器人可以推送消息了，看效果：<br><img src="/img/python/%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA6.png" alt="机器人推送消息"></p><h3 id="关于发送消息类型和数据格式"><a href="#关于发送消息类型和数据格式" class="headerlink" title="关于发送消息类型和数据格式"></a>关于发送消息类型和数据格式</h3><figure class="highlight js"><figcaption><span>文本格式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"msgtype"</span>: <span class="string">"text"</span>,  <span class="comment">//文本</span></span><br><span class="line">    <span class="string">"text"</span>: &#123;</span><br><span class="line">        <span class="string">"content"</span>: <span class="string">"我就是我, 是不一样的烟火@156xxxx8827"</span> <span class="comment">//文本内容</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"at"</span>: &#123;     <span class="comment">//艾特对象</span></span><br><span class="line">        <span class="string">"atMobiles"</span>: [</span><br><span class="line">            <span class="string">"156xxxx8827"</span>, </span><br><span class="line">            <span class="string">"189xxxx8325"</span></span><br><span class="line">        ], </span><br><span class="line">        <span class="string">"isAtAll"</span>: <span class="literal">false</span>    <span class="comment">//是否艾特所有人</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>link格式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"msgtype"</span>: <span class="string">"link"</span>, </span><br><span class="line">    <span class="string">"link"</span>: &#123;</span><br><span class="line">        <span class="string">"text"</span>: <span class="string">"这个即将发布的新版本，创始人xx称它为红树林。而在此之前，每当面临重大升级，产品经理们都会取一个应景的代号，这一次，为什么是红树林"</span>, </span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"时代的火车向前开"</span>, </span><br><span class="line">        <span class="string">"picUrl"</span>: <span class="string">""</span>, </span><br><span class="line">        <span class="string">"messageUrl"</span>: <span class="string">"https://www.dingtalk.com/s?__biz=MzA4NjMwMTA2Ng==&amp;mid=2650316842&amp;idx=1&amp;sn=60da3ea2b29f1dcc43a7c8e4a7c97a16&amp;scene=2&amp;srcid=09189AnRJEdIiWVaKltFzNTw&amp;from=timeline&amp;isappinstalled=0&amp;key=&amp;ascene=2&amp;uin=&amp;devicetype=android-23&amp;version=26031933&amp;nettype=WIFI"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>markdown类型</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="string">"msgtype"</span>: <span class="string">"markdown"</span>,</span><br><span class="line">     <span class="string">"markdown"</span>: &#123;</span><br><span class="line">         <span class="string">"title"</span>:<span class="string">"杭州天气"</span>,</span><br><span class="line">         <span class="string">"text"</span>: <span class="string">"#### 杭州天气 @150XXXXXXXX \n&gt; 9度，西北风1级，空气良89，相对温度73%\n&gt; ![screenshot](https://img.alicdn.com/tfs/TB1NwmBEL9TBuNjy1zbXXXpepXa-2400-1218.png)\n&gt; ###### 10点20分发布 [天气](https://www.dingalk.com) \n"</span></span><br><span class="line">     &#125;,</span><br><span class="line">      <span class="string">"at"</span>: &#123;</span><br><span class="line">          <span class="string">"atMobiles"</span>: [</span><br><span class="line">              <span class="string">"150XXXXXXXX"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"isAtAll"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>关于类型还有多种及参数，点击<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq/uKPlK" target="_blank" rel="noopener">https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq/uKPlK</a>查看</p><h3 id="检验失信信息"><a href="#检验失信信息" class="headerlink" title="检验失信信息"></a>检验失信信息</h3><p>针对上边选择设置的三种方式，至少设置其中一种，以进行安全保护。否则会校验不通过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 消息内容中不包含任何关键词</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"errcode"</span>:<span class="number">310000</span>,</span><br><span class="line">  <span class="string">"errmsg"</span>:<span class="string">"keywords not in content"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// timestamp 无效</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"errcode"</span>:<span class="number">310000</span>,</span><br><span class="line">  <span class="string">"errmsg"</span>:<span class="string">"invalid timestamp"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 签名不匹配</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"errcode"</span>:<span class="number">310000</span>,</span><br><span class="line">  <span class="string">"errmsg"</span>:<span class="string">"sign not match"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IP地址不在白名单</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"errcode"</span>:<span class="number">310000</span>,</span><br><span class="line">  <span class="string">"errmsg"</span>:<span class="string">"ip X.X.X.X not in whitelist"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> 钉钉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;关于celery不执行定时任务的问题&#39;</title>
      <link href="/2020/06/19/Blog/%E5%85%B3%E4%BA%8Ecelery%E4%B8%8D%E6%89%A7%E8%A1%8C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/06/19/Blog/%E5%85%B3%E4%BA%8Ecelery%E4%B8%8D%E6%89%A7%E8%A1%8C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>使用celery做定时任务时，出现一个错误，就是不执行定时任务。刚开始在在做测试时是每分钟测试，然后我发现并没有执行这个服务。于是在花费了定量时间，然后解决了这个bug。</p><h3 id="celery定时任务bug"><a href="#celery定时任务bug" class="headerlink" title="celery定时任务bug"></a>celery定时任务bug</h3><p>就是简单做celery定时任务时，我发现逻辑和代码并没有任何问题，但是就是不启动。<br>于是进行百度，刚开始说的是可能是celery版本的问题，但是发现并不是这个问题。</p><p>经过测试，我把crontab中的参数hour去掉，把minute设置每分钟，于是我发现每分钟都会执行。<br>所以可以确定是hour，也就是时区问题。但是机器上的时间和代码里面的时区都没有问题，那可能是celery本身的问题了。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>默认celery的时区为UTC</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>将celery定时任务设置为根据本地时区触发</p><p>默认celery的时区为UTC，如果要在django项目中将celery定时任务配置为根据本地时区触发，则需要修改</p><p>在settings.py中添加以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CELERY_TIMEZONE=<span class="string">'Asia/Shanghai'</span></span><br><span class="line">CELERY_ENABLE_UTC=<span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>定时任务代码附上</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定时任务</span></span><br><span class="line"><span class="comment">#导入celery定时模块</span></span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> schedules</span><br><span class="line"><span class="comment">#导入时间模块</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CELERY_TIMEZONE=<span class="string">'Asia/Shanghai'</span></span><br><span class="line">CELERY_ENABLE_UTC=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CELERY_BEAT_SCHEDULE = &#123;</span></span><br><span class="line"><span class="comment">#     #定义定时任务</span></span><br><span class="line"><span class="comment">#     'celery_datetime_work':&#123;</span></span><br><span class="line"><span class="comment">#         'task':'myapp.tasks.async_test',   #任务名称</span></span><br><span class="line"><span class="comment">#         'schedule':timedelta(seconds=60)</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">CELERY_BEAT_SCHEDULE = &#123;</span><br><span class="line">    <span class="comment">#定义定时任务</span></span><br><span class="line">    <span class="string">'celery_datetime_work'</span>:&#123;</span><br><span class="line">        <span class="comment">#天气预报结合钉钉机器人</span></span><br><span class="line">        <span class="string">'task'</span>: <span class="string">'myapp.tasks.func'</span>, <span class="comment">#我的celery任务</span></span><br><span class="line">        <span class="comment">#定时任务每天8.30</span></span><br><span class="line">        <span class="string">'schedule'</span>: crontab(minute=<span class="string">'30'</span>,hour=<span class="number">8</span>),</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> celery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;hexo博客美化二&#39;</title>
      <link href="/2020/06/17/Blog/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E4%BA%8C/"/>
      <url>/2020/06/17/Blog/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>前面已经讲过hexo博客的美化，这是继续更新的。</p><h3 id="1-添加背景音乐"><a href="#1-添加背景音乐" class="headerlink" title="1.添加背景音乐"></a>1.添加背景音乐</h3><p>打开<a href="https://music.163.com/" target="_blank" rel="noopener">网页版网易云音乐</a>，选择你准备添加的背景音乐，点击生成外链播放器，前提是要有版权，不然是无法生成外链播放器的，复制底下的HTML代码<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E4%B8%80.png" alt="添加背景音乐一"><br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E4%BA%8C.png" alt="添加背景音乐二"><br>然后将此代码放到你想要放的地方，比如放在博客的尾部，则打开 \themes\layout_partial\footer.ejs 文件，将复制的HTML代码粘贴进去，再进行适当的位置设置让播放器更美观，其中 auto=1 表示打开网页自动播放音乐，auto=0 表示关闭自动播放音乐</p><p>加载页面，最终展示效果<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E4%B8%89.png" alt="背景音乐展示效果"></p><h3 id="2-添加地图仪"><a href="#2-添加地图仪" class="headerlink" title="2.添加地图仪"></a>2.添加地图仪</h3><p>它提供网站访客地理信息，可以以2D、3D等形式显示<br><a href="http://www.revolvermaps.com/" target="_blank" rel="noopener">小地球仪</a></p><p><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E6%B7%BB%E5%8A%A0%E5%B0%8F%E5%9C%B0%E5%9B%BE%E4%BB%AA%E4%B8%80.png" alt="选择自己喜欢的小地图仪"><br>复制代码放到自己想放的地方，比如放在博客的尾部，则打开 \themes\layout_partial\footer.ejs 文件，将复制的HTML代码粘贴进去。<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E6%B7%BB%E5%8A%A0%E5%B0%8F%E5%9C%B0%E5%9B%BE%E4%BB%AA%E4%BA%8C.png" alt="添加小地图仪二"></p><p>加载页面最终实现效果：<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E6%B7%BB%E5%8A%A0%E5%B0%8F%E5%9C%B0%E5%9B%BE%E4%BB%AA%E4%B8%89.png" alt="最终展示效果"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;paypal跨境支付&#39;</title>
      <link href="/2020/06/17/Blog/paypal%E8%B7%A8%E5%A2%83%E6%94%AF%E4%BB%98/"/>
      <url>/2020/06/17/Blog/paypal%E8%B7%A8%E5%A2%83%E6%94%AF%E4%BB%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在公司中，支付是必不可缺的的重要系统之一。有的公司如果涉及到境外支付，就一定听说过或使用说PayPal。<br>PayPal支付的优势就是其业务网络遍布全球。目前PayPal的庞大网络覆盖了全球200多个国家，可提供20多种语言服务，并接受100多种货币付款和56种货币提现。同时，还允许在账户中持有25种货币余额。换句话说，只要付款人拥有一个PayPal账户，他就拥有了在200多个国家进行电子支付购物，并在需要服务的时候享受到母语支持的各种便捷服务。</p><p>注册PayPal官网账号：<a href="https://www.paypal.com" target="_blank" rel="noopener">https://www.paypal.com</a><br>PayPal开发者平台：<a href="https://developer.paypal.com/developer/accounts/" target="_blank" rel="noopener">https://developer.paypal.com/developer/accounts/</a></p><p>注册成功之后，进去PayPal沙盒应用：<a href="https://developer.paypal.com/developer/accounts/" target="_blank" rel="noopener">https://developer.paypal.com/developer/accounts/</a><br>然后PayPal会默认给我们创建两个账号，一个是商家的，一个是个户的。当然也可以点击Create account自己创建需要的账号<br><img src="/img/%E6%94%AF%E4%BB%98/%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7.png" alt="分配的默认账号"></p><h3 id="支付业务"><a href="#支付业务" class="headerlink" title="支付业务"></a>支付业务</h3><p>以个人账户对商户进行支付业务。</p><p>应用管理页面：<a href="https://developer.paypal.com/developer/applications/" target="_blank" rel="noopener">https://developer.paypal.com/developer/applications/</a></p><p>这时我们可以发现他给我们默认分配了应用。<br><img src="/img/%E6%94%AF%E4%BB%98/%E9%BB%98%E8%AE%A4%E5%BA%94%E7%94%A8.png" alt="分配的默认应用"></p><p>点击我们的默认应用，我们可以发现应用的client_id和client_secret。<br><img src="/img/%E6%94%AF%E4%BB%98/client_ID.png" alt="应用的ID和Secret"></p><p>进入我们的账号设置<br><img src="/img/%E6%94%AF%E4%BB%98/%E8%BF%9B%E5%85%A5%E8%B4%A6%E5%8F%B7%E8%AE%BE%E7%BD%AE.png" alt="进入账号设置"></p><p>可以得知我们的个人账号和账号密码<br><img src="/img/%E6%94%AF%E4%BB%98/%E4%B8%AA%E4%BA%BA%E8%B4%A6%E5%8F%B7%E5%92%8C%E5%AF%86%E7%A0%81.png" alt="个人账号和面膜"></p><p>修改我们个人账号的金额，让我们有足以的价格进行购买测试<br><img src="/img/%E6%94%AF%E4%BB%98/%E4%B8%AA%E4%BA%BA%E8%B4%A6%E6%88%B7%E9%87%91%E9%A2%9D.png" alt="修改个人账户金额"></p><h3 id="进行购买测试"><a href="#进行购买测试" class="headerlink" title="进行购买测试"></a>进行购买测试</h3><p>安装PayPal在python的sdk</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install paypalrestsdk</span><br></pre></td></tr></table></figure><p>在djagno中新建一个支付视图views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">url:</span><br><span class="line">    path(<span class="string">'pay/'</span>,payment),<span class="comment">#跳转</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paypalrestsdk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payment</span><span class="params">(request)</span>:</span></span><br><span class="line">    paypalrestsdk.configure(&#123;</span><br><span class="line">  <span class="string">"mode"</span>: <span class="string">"sandbox"</span>, <span class="comment"># sandbox代表沙盒</span></span><br><span class="line">  <span class="string">"client_id"</span>: <span class="string">"你的client_id"</span>,</span><br><span class="line">  <span class="string">"client_secret"</span>: <span class="string">"你的client_secret"</span> &#125;)</span><br><span class="line"></span><br><span class="line">    payment = paypalrestsdk.Payment(&#123;</span><br><span class="line">        <span class="string">"intent"</span>: <span class="string">"sale"</span>,</span><br><span class="line">        <span class="string">"payer"</span>: &#123;</span><br><span class="line">            <span class="string">"payment_method"</span>: <span class="string">"paypal"</span>&#125;,</span><br><span class="line">        <span class="string">"redirect_urls"</span>: &#123;</span><br><span class="line">            <span class="string">"return_url"</span>: <span class="string">"http://localhost:8000/palpay/pay/"</span>,<span class="comment">#支付成功跳转页面</span></span><br><span class="line">            <span class="comment"># "return_url": "http://localhost:8000/palpay/pay/?"+'order='+str(snoworder)+'&amp;uid='+str(uid) #进行加参，到修改</span></span><br><span class="line">            <span class="string">"cancel_url"</span>: <span class="string">"http://localhost:3000/paypal/cancel/"</span>&#125;,<span class="comment">#取消支付页面</span></span><br><span class="line">        <span class="string">"transactions"</span>: [&#123;</span><br><span class="line">            <span class="string">"amount"</span>: &#123;</span><br><span class="line">                <span class="string">"total"</span>: <span class="string">"5.00"</span>,</span><br><span class="line">                <span class="string">"currency"</span>: <span class="string">"USD"</span>&#125;,</span><br><span class="line">            <span class="string">"description"</span>: <span class="string">"这是一个订单测试"</span>&#125;]&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payment.create():</span><br><span class="line">        print(<span class="string">"Payment created successfully"</span>)</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> payment.links:</span><br><span class="line">            <span class="keyword">if</span> link.rel == <span class="string">"approval_url"</span>:</span><br><span class="line">                approval_url = str(link.href)</span><br><span class="line">                print(<span class="string">"Redirect for approval: %s"</span> % (approval_url))</span><br><span class="line">                <span class="keyword">return</span> redirect(approval_url)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(payment.error)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"支付失败"</span>)</span><br></pre></td></tr></table></figure><p>这里解释一下重点参数，return_url是支付成功后回调的页面，paypal会将一个支付者id回传，然后服务端需要验证支付才能真的完成支付，total是付款金额，精确到分，currency是币种，支持多钟类型的货币。</p><p>当Django的服务端创建好支付订单后，重定向到paypal的沙盒环境，这时候一定要使用沙盒的个人账号进行登录和支付。<br><img src="/img/%E6%94%AF%E4%BB%98/%E4%BB%98%E6%AC%BE.png" alt="paypal支付订单"><br>支付完成后，会跳回刚刚传过去的回调页面：<a href="http://localhost:8000/palpay/pay/?paymentId=PAYID-L3SYORA3C031930S1733650J&amp;token=EC-9TG269735K620131N&amp;PayerID=ETYYRCDN8C3XJ" target="_blank" rel="noopener">http://localhost:8000/palpay/pay/?paymentId=PAYID-L3SYORA3C031930S1733650J&amp;token=EC-9TG269735K620131N&amp;PayerID=ETYYRCDN8C3XJ</a>  </p><p>这里paypal会传过来三个参数，支付id,token和支付者id,然后因为我要修改参数，所以我对回调网址进行加参，</p><p>此时，在回调方法里，我们需要通过支付者id进行确认验证支付</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">url:</span><br><span class="line">    path(<span class="string">'palpay/pay/'</span>,payment_execute),<span class="comment">#成功回调</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payment_execute</span><span class="params">(request)</span>:</span></span><br><span class="line">    paymentid = request.GET.get(<span class="string">"paymentId"</span>) <span class="comment">#支付id</span></span><br><span class="line">    payerid = request.GET.get(<span class="string">"PayerID"</span>)  <span class="comment">#支付者id</span></span><br><span class="line">    order = request.GET.get(<span class="string">'order'</span>) <span class="comment">#获取订单</span></span><br><span class="line">    uid = request.GET.get(<span class="string">'uid'</span>)<span class="comment">#获取用户id</span></span><br><span class="line">    print(<span class="string">'订单ID:%s,支付者ID:%s，雪花订单号:%s,uid:%s'</span>%(paymentid,payerid,order,uid))</span><br><span class="line"></span><br><span class="line">    payment = paypalrestsdk.Payment.find(paymentid)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payment.execute(&#123;<span class="string">"payer_id"</span>: payerid&#125;):</span><br><span class="line">        <span class="keyword">if</span> order <span class="keyword">and</span> payerid <span class="keyword">and</span> paymentid:</span><br><span class="line">            order_end = int(order[<span class="number">-1</span>])</span><br><span class="line">            print(<span class="string">'订单号最后一位'</span>,order_end)</span><br><span class="line">            <span class="keyword">if</span> int(order_end) &lt; <span class="number">5</span> <span class="keyword">or</span> int(uid[<span class="number">-1</span>]) &lt; <span class="number">5</span>:</span><br><span class="line">                order = OrderOne.objects.filter(order=order).first()</span><br><span class="line">                order.status = <span class="number">2</span></span><br><span class="line">                order.save()</span><br><span class="line">                print(<span class="string">"修改一表订单状态成功"</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">'http://localhost:8080/myorder/'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                order = OrderTwo.objects.filter(order=order).first()</span><br><span class="line">                order.status = <span class="number">2</span></span><br><span class="line">                order.save()</span><br><span class="line">                print(<span class="string">"修改二表订单状态成功"</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">'http://localhost:8080/myorder/'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'未获取到单号，请重新购买'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(payment.error) <span class="comment"># Error Hash</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"支付失败"</span>)</span><br></pre></td></tr></table></figure><p>这时再看我们的个人账户页面，发现已经扣款成功，说明整个流程已经走完。<br><img src="/img/%E6%94%AF%E4%BB%98/%E8%B4%AD%E4%B9%B0%E4%B9%8B%E5%90%8E%E4%BB%B7%E6%A0%BC.png" alt="购买成功扣款"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>整个支付流程相对支付宝来说，更加的紧凑，但是做支付安全是第一要务，就个人体验（仅是个人体验）层面来说，支付宝在安全方面做的还是要比Paypal略强一些，起码在信用卡欺诈和盗刷方面风控做的更好，在风险保障和赔付方面都有提供保险，当然由于金融环境的差异较大，并不是说Paypal的风控做的不好，只是机制不同，在国外，如果持卡人的信用卡被盗刷，一般发卡组织会让商家去承担责任，而国内只能在交易环节设置更多的验证，本质上说是要持卡人承担责任。这也是为什么支付宝的风控看起来更好的原因。</p><p>最后就是关于费率问题，Paypal官方给出的费率是每笔交易收取3.9%+$0.3（根据你的交易流水，比例可以优惠，具体下限看接入者的月营业额度），不过这可是美刀，不得不说这个费率是相当的高，但是国内做境外支付的电商，一般还是要接入Paypal作为支付方式。支付宝的费率基本上在1.2%左右，具体的费率也看交易流水，有实力的下限可以做到基本没有，单纯的看费率似乎支付宝更有优势，但是别忘记了，这样对比是不科学的，因为凡是接入Paypal的都是看中覆盖外币业务的地区，费率则是投资人该考虑的问题了。</p>]]></content>
      
      
      <categories>
          
          <category> 支付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> 支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;hexo博客美化一&#39;</title>
      <link href="/2020/06/16/Blog/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E4%B8%80/"/>
      <url>/2020/06/16/Blog/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文讲述的是添加博客美化的样式<br>请注意：不同主题可能方法有些不同，相同主题不同版本，配置方法也有所差异！</p><p>博客美化前提条件：有一定的前端基础，了解 HTML、CSS、JS，了解 CSS 预处理语言 Sass、Less、Stylus，搞懂 hexo 的目录结构。</p><p>博客美化通用步骤：选定主题，认真阅读主题文档，分析主题目录结构，了解每个文件是对应网页哪个部分的，认真阅读美化教程，美化教程本质上只为你提供核心代码和思路，具体代码要添加到哪个地方，需要你自己搞懂主题结构，添加到需要的、合适的位置！</p><p>博客美化终极奥秘：创作第一，体验第二，避免繁杂，简洁为上！</p><h3 id="1-添加卡通人物"><a href="#1-添加卡通人物" class="headerlink" title="1.添加卡通人物"></a>1.添加卡通人物</h3><p>我在逛别人博客的时候偶然发现右下角居然有一个萌萌的卡通人物，还能根据你鼠标位置摇头，瞬间被吸引到了，赶紧也给自己博客添加一个吧！点击此处进入该<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">项目地址</a></p><p>获取live2d依赖库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>输入以下命令，下载相应的模型，将 packagename 更换成模型名称即可，更多模型选择请<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">点击此处</a>，各个模型的预览请访问<a href="https://eyhn.in/" target="_blank" rel="noopener">原作者的博客</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install packagename(模型名称)</span><br></pre></td></tr></table></figure><p>打开站点目录下的 _config.yml 文件，添加如下代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  scriptFrom: local</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-haruto #模型选择</span><br><span class="line">  display:</span><br><span class="line">    position: right  #模型位置</span><br><span class="line">    width: 150       #模型宽度</span><br><span class="line">    height: 300      #模型高度</span><br><span class="line">  mobile:</span><br><span class="line">    show: false      #是否在手机端显示</span><br></pre></td></tr></table></figure><p>设置好过后我们就拥有了一个卡通人物<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E5%8A%A8%E6%BC%AB%E5%8D%A1%E9%80%9A%E4%BA%BA%E7%89%A9.png" alt="动漫卡通人物"></p><h3 id="2-添加鼠标点击爱心效果"><a href="#2-添加鼠标点击爱心效果" class="headerlink" title="2.添加鼠标点击爱心效果"></a>2.添加鼠标点击爱心效果</h3><p>在 \themes\source\js 下新建文件 love.js，在 love.js 文件中添加以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><p>在 \themes\layout\layout.ejs 文件末尾添加以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/love.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>再次加载页面我们就可以看到点击爱心的特效了<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E7%82%B9%E5%87%BB%E7%88%B1%E5%BF%83%E7%89%B9%E6%95%88.png" alt="点击爱心特效"></p><h3 id="3-添加鼠标点击显示字体效果"><a href="#3-添加鼠标点击显示字体效果" class="headerlink" title="3.添加鼠标点击显示字体效果"></a>3.添加鼠标点击显示字体效果</h3><p>在 \themes\source\js 下新建文件 click_show_text.js，在 click_show_text.js 文件中添加以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标点击特效，文字特效</span></span><br><span class="line"><span class="keyword">var</span> a_idx = <span class="number">0</span>;</span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"body"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span></span><br><span class="line">        (<span class="string">"富强"</span>, <span class="string">"民主"</span>, <span class="string">"文明"</span>, <span class="string">"和谐"</span>, <span class="string">"自由"</span>, <span class="string">"平等"</span>, <span class="string">"公正"</span>, <span class="string">"法治"</span>, <span class="string">"爱国"</span>, <span class="string">"敬业"</span>, <span class="string">"诚信"</span>, <span class="string">"友善"</span>);</span><br><span class="line">        <span class="keyword">var</span> $i = $(<span class="string">"&lt;span/&gt;"</span>).text(a[a_idx]);</span><br><span class="line">        a_idx = (a_idx + <span class="number">1</span>) % a.length;</span><br><span class="line">        <span class="keyword">var</span> x = e.pageX,</span><br><span class="line">        y = e.pageY;</span><br><span class="line">        $i.css(&#123;</span><br><span class="line">            <span class="string">"z-index"</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">"top"</span>: y - <span class="number">20</span>,</span><br><span class="line">            <span class="string">"left"</span>: x,</span><br><span class="line">            <span class="string">"position"</span>: <span class="string">"absolute"</span>,</span><br><span class="line">            <span class="string">"font-weight"</span>: <span class="string">"bold"</span>,</span><br><span class="line">            <span class="string">"color"</span>: <span class="string">"#FF0000"</span></span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="string">"body"</span>).append($i);</span><br><span class="line">        $i.animate(&#123;</span><br><span class="line">            <span class="string">"top"</span>: y - <span class="number">180</span>,</span><br><span class="line">            <span class="string">"opacity"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">      <span class="number">3000</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          $i.remove();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    setTimeout(<span class="string">'delay()'</span>, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".buryit"</span>).removeAttr(<span class="string">"onclick"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以根据自己喜欢然后替换为其他文字</p><p>如果想要每次点击显示的文字为不同颜色，可以将其中 color 值进行如下更改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"color"</span>: <span class="string">"rgb("</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">","</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">","</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">")"</span></span><br></pre></td></tr></table></figure><p>然后在 \themes\layout\layout.ejs 文件末尾添加以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--单击显示文字--&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/click_show_text.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>当再次加载页面之后，就可以看到好看的字体特效了<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E5%AD%97%E4%BD%93%E7%89%B9%E6%95%88.png" alt="点击字体特效"></p><h3 id="4-添加鼠标点击烟花爆炸效果"><a href="#4-添加鼠标点击烟花爆炸效果" class="headerlink" title="4.添加鼠标点击烟花爆炸效果"></a>4.添加鼠标点击烟花爆炸效果</h3><p>在 \themes\source\js 目录下新建一个 fireworks.js 的文件，里面写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure><p>然后在 \themes\layout\layout.ejs 文件中写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas <span class="class"><span class="keyword">class</span></span>=<span class="string">"fireworks"</span> style=<span class="string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> &gt;&lt;<span class="regexp">/canvas&gt; </span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src="</span><span class="comment">//cdn.bootcss.com/animejs/2.2.0/anime.min.js"&gt;&lt;/script&gt; </span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/fireworks.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>再次加载页面之后，我们的网站就有鼠标点击烟花爆炸效果了<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E7%82%B9%E5%87%BB%E7%88%86%E7%82%B8%E6%95%88%E6%9E%9C.png" alt="鼠标点击爆炸效果"></p><h3 id="5-添加彩色滚动变换字体"><a href="#5-添加彩色滚动变换字体" class="headerlink" title="5.添加彩色滚动变换字体"></a>5.添加彩色滚动变换字体</h3><p>在你想要添加彩色滚动变换字体的地方写入以下代码即可，其中文字可自行更改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"binft"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var binft = function (r) &#123;</span></span><br><span class="line"><span class="regexp">      function t() &#123;</span></span><br><span class="line"><span class="regexp">        return b[Math.floor(Math.random() * b.length)]</span></span><br><span class="line"><span class="regexp">      &#125;  </span></span><br><span class="line"><span class="regexp">      function e() &#123;</span></span><br><span class="line"><span class="regexp">        return String.fromCharCode(94 * Math.random() + 33)</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      function n(r) &#123;</span></span><br><span class="line"><span class="regexp">        for (var n = document.createDocumentFragment(), i = 0; r &gt; i; i++) &#123;</span></span><br><span class="line"><span class="regexp">          var l = document.createElement("span");</span></span><br><span class="line"><span class="regexp">          l.textContent = e(), l.style.color = t(), n.appendChild(l)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        return n</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      function i() &#123;</span></span><br><span class="line"><span class="regexp">        var t = o[c.skillI];</span></span><br><span class="line"><span class="regexp">        c.step ? c.step-- : (c.step = g, c.prefixP &lt; l.length ? (c.prefixP &gt;= 0 &amp;&amp; (c.text += l[c.prefixP]), c.prefixP++) : "forward" === c.direction ? c.skillP &lt; t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = "backward", c.delay = a) : c.skillP &gt; 0 ? (c.text = c.text.slice(0, -1), c.skillP--) : (c.skillI = (c.skillI + 1) % o.length, c.direction = "forward")), r.textContent = c.text, r.appendChild(n(c.prefixP &lt; l.length ? Math.min(s, s + c.prefixP) : Math.min(s, t.length - c.skillP))), setTimeout(i, d)</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      var l = "",</span></span><br><span class="line"><span class="regexp">      o = ["青青陵上柏，磊磊涧中石。", "人生天地间，忽如远行客。","斗酒相娱乐，聊厚不为薄。", "驱车策驽马，游戏宛与洛。","洛中何郁郁，冠带自相索。","长衢罗夹巷，王侯多第宅。","两宫遥相望，双阙百余尺。","极宴娱心意，戚戚何所迫？"].map(function (r) &#123;</span></span><br><span class="line"><span class="regexp">      return r + ""</span></span><br><span class="line"><span class="regexp">      &#125;),</span></span><br><span class="line"><span class="regexp">      a = 2,</span></span><br><span class="line"><span class="regexp">      g = 1,</span></span><br><span class="line"><span class="regexp">      s = 5,</span></span><br><span class="line"><span class="regexp">      d = 75,</span></span><br><span class="line"><span class="regexp">      b = ["rgb(110,64,170)", "rgb(150,61,179)", "rgb(191,60,175)", "rgb(228,65,157)", "rgb(254,75,131)", "rgb(255,94,99)", "rgb(255,120,71)", "rgb(251,150,51)", "rgb(226,183,47)", "rgb(198,214,60)", "rgb(175,240,91)", "rgb(127,246,88)", "rgb(82,246,103)", "rgb(48,239,130)", "rgb(29,223,163)", "rgb(26,199,194)", "rgb(35,171,216)", "rgb(54,140,225)", "rgb(76,110,219)", "rgb(96,84,200)"],</span></span><br><span class="line"><span class="regexp">      c = &#123;</span></span><br><span class="line"><span class="regexp">        text: "",</span></span><br><span class="line"><span class="regexp">        prefixP: -s,</span></span><br><span class="line"><span class="regexp">        skillI: 0,</span></span><br><span class="line"><span class="regexp">        skillP: 0,</span></span><br><span class="line"><span class="regexp">        direction: "forward",</span></span><br><span class="line"><span class="regexp">        delay: a,</span></span><br><span class="line"><span class="regexp">        step: g</span></span><br><span class="line"><span class="regexp">      &#125;;</span></span><br><span class="line"><span class="regexp">      i()</span></span><br><span class="line"><span class="regexp">      &#125;;</span></span><br><span class="line"><span class="regexp">      binft(document.getElementById('binft'));</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>加载页面最终显示效果为：<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E5%BD%A9%E8%89%B2%E6%BB%9A%E5%8A%A8%E5%8F%98%E6%8D%A2%E5%AD%97%E4%BD%93.gif" alt="彩色滚动变换字体"></p><h3 id="6-添加网站运行时间"><a href="#6-添加网站运行时间" class="headerlink" title="6.添加网站运行时间"></a>6.添加网站运行时间</h3><p>一个比较好的小功能，可以看见自己的博客运行多久了，时间一天天的增加，成就感也会一天天增加的<br>在 \themes\layout_partial\footer.ejs 文件下添加以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=<span class="string">"timeDate"</span>&gt;载入天数...&lt;<span class="regexp">/span&gt;&lt;span id="times"&gt;载入时分秒...&lt;/</span>span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createtime</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"08/10/2018 17:38:00"</span>);<span class="comment">//在此处修改你的建站时间，格式：月/日/年 时:分:秒</span></span><br><span class="line">        now.setTime(now.getTime()+<span class="number">250</span>); </span><br><span class="line">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="built_in">Math</span>.floor(days); </span><br><span class="line">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="built_in">Math</span>.floor(hours); </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">String</span>(hnum).length ==<span class="number">1</span> )&#123;hnum = <span class="string">"0"</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum); </span><br><span class="line">        mnum = <span class="built_in">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="built_in">String</span>(mnum).length ==<span class="number">1</span> )&#123;mnum = <span class="string">"0"</span> + mnum;&#125; </span><br><span class="line">        seconds = (now - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum); </span><br><span class="line">        snum = <span class="built_in">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="built_in">String</span>(snum).length ==<span class="number">1</span> )&#123;snum = <span class="string">"0"</span> + snum;&#125; </span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"timeDate"</span>).innerHTML = <span class="string">"本站已安全运行 "</span>+dnum+<span class="string">" 天 "</span>; </span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"times"</span>).innerHTML = hnum + <span class="string">" 小时 "</span> + mnum + <span class="string">" 分 "</span> + snum + <span class="string">" 秒"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">setInterval(<span class="string">"createtime()"</span>,<span class="number">250</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>加载页面，展示效果如下：<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E7%BD%91%E7%AB%99%E8%BF%90%E8%A1%8C%E5%A4%A9%E6%95%B0.png" alt="网站运行天数"></p><h3 id="7-浏览器网页标题恶搞"><a href="#7-浏览器网页标题恶搞" class="headerlink" title="7.浏览器网页标题恶搞"></a>7.浏览器网页标题恶搞</h3><p>当用户访问你的博客时点击到了其他网页，我们可以恶搞一下网页标题，呼唤用户回来，首先在目录 \themes\source\js 下新建一个 FunnyTitle.js 文件，在里面填写如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浏览器搞笑标题</span></span><br><span class="line"><span class="keyword">var</span> OriginTitle = <span class="built_in">document</span>.title;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">        $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/funny.ico"</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">'╭(°A°`)╮ 页面崩溃啦 ~'</span>;</span><br><span class="line">        clearTimeout(titleTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/favicon.ico"</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">'(ฅ&gt;ω&lt;*ฅ) 噫又好啦 ~'</span> + OriginTitle;</span><br><span class="line">        titleTime = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.title = OriginTitle;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中 funny.ico 是用户切换到其他标签后你网站的图标，favicon.ico 是正常图标，然后在 \themes\layout\layout.ejs 文件中添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--浏览器搞笑标题--&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/FunnyTitle.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>当我们在再次重新加载页面就可以看到:<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E6%A0%87%E9%A2%98%E6%81%B6%E6%90%9E.png" alt="浏览器恶搞标题"></p><h3 id="8-背景添加动态线条效果"><a href="#8-背景添加动态线条效果" class="headerlink" title="8.背景添加动态线条效果"></a>8.背景添加动态线条效果</h3><p>在 \themes\layout\layout.ejs 文件中添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--动态线条背景--&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span></span><br><span class="line">color=<span class="string">"220,220,220"</span> opacity=<span class="string">'0.7'</span> zIndex=<span class="string">"-2"</span> count=<span class="string">"200"</span> src=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>其中：<br>color：表示线条颜色，三个数字分别为(R,G,B)，默认：（0,0,0）<br>opacity：表示线条透明度（0~1），默认：0.5<br>count：表示线条的总数量，默认：150<br>zIndex：表示背景的z-index属性，css属性用于控制所在层的位置，默认：-1</p><p>加载页面，展示效果如下：<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E8%83%8C%E6%99%AF%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E7%BA%BF%E6%9D%A1%E6%95%88%E6%9E%9C.png" alt="添加动态线条效果"></p><h3 id="9-添加网站雪花飘落效果"><a href="#9-添加网站雪花飘落效果" class="headerlink" title="9.添加网站雪花飘落效果"></a>9.添加网站雪花飘落效果</h3><p>雪花飘落由两个样式，可以选择自己喜欢的样式<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E9%9B%AA%E8%8A%B1%E6%A0%B7%E5%BC%8F%E4%B8%80.png" alt="雪花效果样式一"><br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E9%9B%AA%E8%8A%B1%E6%A0%B7%E5%BC%8F%E4%BA%8C.png" alt="雪花效果样式二"></p><p>实现方法：在 \themes\source\js 目录下新建一个 snow.js 文件，粘贴以下代码：</p><figure class="highlight js"><figcaption><span>样式一</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*样式一*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">$.fn.snow = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> $flake = $(<span class="string">'&lt;div id="snowbox" /&gt;'</span>).css(&#123;<span class="string">'position'</span>: <span class="string">'absolute'</span>,<span class="string">'z-index'</span>:<span class="string">'9999'</span>, <span class="string">'top'</span>: <span class="string">'-50px'</span>&#125;).html(<span class="string">'&amp;#10052;'</span>),</span><br><span class="line">documentHeight = $(<span class="built_in">document</span>).height(),</span><br><span class="line">documentWidth= $(<span class="built_in">document</span>).width(),</span><br><span class="line">defaults = &#123;</span><br><span class="line">minSize: <span class="number">10</span>,</span><br><span class="line">maxSize: <span class="number">20</span>,</span><br><span class="line">newOn: <span class="number">1000</span>,</span><br><span class="line">flakeColor: <span class="string">"#AFDAEF"</span> <span class="comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span></span><br><span class="line">&#125;,</span><br><span class="line">options= $.extend(&#123;&#125;, defaults, options);</span><br><span class="line"><span class="keyword">var</span> interval= setInterval( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> startPositionLeft = <span class="built_in">Math</span>.random() * documentWidth - <span class="number">100</span>,</span><br><span class="line">startOpacity = <span class="number">0.5</span> + <span class="built_in">Math</span>.random(),</span><br><span class="line">sizeFlake = options.minSize + <span class="built_in">Math</span>.random() * options.maxSize,</span><br><span class="line">endPositionTop = documentHeight - <span class="number">200</span>,</span><br><span class="line">endPositionLeft = startPositionLeft - <span class="number">500</span> + <span class="built_in">Math</span>.random() * <span class="number">500</span>,</span><br><span class="line">durationFall = documentHeight * <span class="number">10</span> + <span class="built_in">Math</span>.random() * <span class="number">5000</span>;</span><br><span class="line">$flake.clone().appendTo(<span class="string">'body'</span>).css(&#123;</span><br><span class="line">left: startPositionLeft,</span><br><span class="line">opacity: startOpacity,</span><br><span class="line"><span class="string">'font-size'</span>: sizeFlake,</span><br><span class="line">color: options.flakeColor</span><br><span class="line">&#125;).animate(&#123;</span><br><span class="line">top: endPositionTop,</span><br><span class="line">left: endPositionLeft,</span><br><span class="line">opacity: <span class="number">0.2</span></span><br><span class="line">&#125;,durationFall,<span class="string">'linear'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="keyword">this</span>).remove()</span><br><span class="line">&#125;);</span><br><span class="line">&#125;, options.newOn);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.fn.snow(&#123; </span><br><span class="line">    minSize: <span class="number">5</span>, <span class="comment">/* 定义雪花最小尺寸 */</span></span><br><span class="line">    maxSize: <span class="number">50</span>,<span class="comment">/* 定义雪花最大尺寸 */</span></span><br><span class="line">    newOn: <span class="number">300</span>  <span class="comment">/* 定义密集程度，数字越小越密集 */</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>样式二</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*样式二*/</span></span><br><span class="line"><span class="comment">/* 控制下雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowFall</span>(<span class="params">snow</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 可配置属性 */</span></span><br><span class="line">    snow = snow || &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.maxFlake = snow.maxFlake || <span class="number">200</span>;   <span class="comment">/* 最多片数 */</span></span><br><span class="line">    <span class="keyword">this</span>.flakeSize = snow.flakeSize || <span class="number">10</span>;  <span class="comment">/* 雪花形状 */</span></span><br><span class="line">    <span class="keyword">this</span>.fallSpeed = snow.fallSpeed || <span class="number">1</span>;   <span class="comment">/* 坠落速度 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 兼容写法 */</span></span><br><span class="line">requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123; setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>); &#125;;</span><br><span class="line"></span><br><span class="line">cancelAnimationFrame = <span class="built_in">window</span>.cancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msCancelAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.oCancelAnimationFrame;</span><br><span class="line"><span class="comment">/* 开始下雪 */</span></span><br><span class="line">snowFall.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">/* 创建画布 */</span></span><br><span class="line">    snowCanvas.apply(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">/* 创建雪花形状 */</span></span><br><span class="line">    createFlakes.apply(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">/* 画雪 */</span></span><br><span class="line">    drawSnow.apply(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建画布 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 添加Dom结点 */</span></span><br><span class="line">    <span class="keyword">var</span> snowcanvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span><br><span class="line">    snowcanvas.id = <span class="string">"snowfall"</span>;</span><br><span class="line">    snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    snowcanvas.height = <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">    snowcanvas.setAttribute(<span class="string">"style"</span>, <span class="string">"position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;"</span>);</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(snowcanvas);</span><br><span class="line">    <span class="keyword">this</span>.canvas = snowcanvas;</span><br><span class="line">    <span class="keyword">this</span>.ctx = snowcanvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="comment">/* 窗口大小改变的处理 */</span></span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">        <span class="comment">/* snowcanvas.height = window.innerHeight */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 雪运动对象 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flakeMove</span>(<span class="params">canvasWidth, canvasHeight, flakeSize, fallSpeed</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasWidth);   <span class="comment">/* x坐标 */</span></span><br><span class="line">    <span class="keyword">this</span>.y = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasHeight);  <span class="comment">/* y坐标 */</span></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="built_in">Math</span>.random() * flakeSize + <span class="number">2</span>;          <span class="comment">/* 形状 */</span></span><br><span class="line">    <span class="keyword">this</span>.maxSize = flakeSize;                           <span class="comment">/* 最大形状 */</span></span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + fallSpeed;         <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.fallSpeed = fallSpeed;                         <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.velY = <span class="keyword">this</span>.speed;                             <span class="comment">/* Y方向速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.velX = <span class="number">0</span>;                                      <span class="comment">/* X方向速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.stepSize = <span class="built_in">Math</span>.random() / <span class="number">30</span>;                 <span class="comment">/* 步长 */</span></span><br><span class="line">    <span class="keyword">this</span>.step = <span class="number">0</span>                                       <span class="comment">/* 步数 */</span></span><br><span class="line">&#125;</span><br><span class="line">flakeMove.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="keyword">this</span>.x,</span><br><span class="line">        y = <span class="keyword">this</span>.y;</span><br><span class="line">    <span class="comment">/* 左右摆动(余弦) */</span></span><br><span class="line">    <span class="keyword">this</span>.velX *= <span class="number">0.98</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.velY &lt;= <span class="keyword">this</span>.speed) &#123;</span><br><span class="line">        <span class="keyword">this</span>.velY = <span class="keyword">this</span>.speed</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.velX += <span class="built_in">Math</span>.cos(<span class="keyword">this</span>.step += <span class="number">.05</span>) * <span class="keyword">this</span>.stepSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.y += <span class="keyword">this</span>.velY;</span><br><span class="line">    <span class="keyword">this</span>.x += <span class="keyword">this</span>.velX;</span><br><span class="line">    <span class="comment">/* 飞出边界的处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.x &gt;= canvas.width || <span class="keyword">this</span>.x &lt;= <span class="number">0</span> || <span class="keyword">this</span>.y &gt;= canvas.height || <span class="keyword">this</span>.y &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.reset(canvas.width, canvas.height)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 飞出边界-放置最顶端继续坠落 */</span></span><br><span class="line">flakeMove.prototype.reset = <span class="function"><span class="keyword">function</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * width);</span><br><span class="line">    <span class="keyword">this</span>.y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.size = <span class="built_in">Math</span>.random() * <span class="keyword">this</span>.maxSize + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + <span class="keyword">this</span>.fallSpeed;</span><br><span class="line">    <span class="keyword">this</span>.velY = <span class="keyword">this</span>.speed;</span><br><span class="line">    <span class="keyword">this</span>.velX = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span></span><br><span class="line">flakeMove.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> snowFlake = ctx.createRadialGradient(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="number">0</span>, <span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.size);</span><br><span class="line">    snowFlake.addColorStop(<span class="number">0</span>, <span class="string">"rgba(255, 255, 255, 0.9)"</span>);  <span class="comment">/* 此处是雪花颜色，默认是白色 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">.5</span>, <span class="string">"rgba(255, 255, 255, 0.5)"</span>); <span class="comment">/* 若要改为其他颜色，请自行查 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">1</span>, <span class="string">"rgba(255, 255, 255, 0)"</span>);    <span class="comment">/* 找16进制的RGB 颜色代码。 */</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.fillStyle = snowFlake;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.size, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.restore();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 创建雪花-定义形状 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFlakes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="keyword">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="keyword">this</span>.flakes = [],</span><br><span class="line">        canvas = <span class="keyword">this</span>.canvas;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxFlake; i++) &#123;</span><br><span class="line">        flakes.push(<span class="keyword">new</span> flakeMove(canvas.width, canvas.height, <span class="keyword">this</span>.flakeSize, <span class="keyword">this</span>.fallSpeed))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 画雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawSnow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="keyword">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="keyword">this</span>.flakes;</span><br><span class="line">    ctx = <span class="keyword">this</span>.ctx, canvas = <span class="keyword">this</span>.canvas, that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">/* 清空雪花 */</span></span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; maxFlake; e++) &#123;</span><br><span class="line">        flakes[e].update();</span><br><span class="line">        flakes[e].render(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*  一帧一帧的画 */</span></span><br><span class="line">    <span class="keyword">this</span>.loop = requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        drawSnow.apply(that);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 调用及控制方法 */</span></span><br><span class="line"><span class="keyword">var</span> snow = <span class="keyword">new</span> snowFall(&#123;<span class="attr">maxFlake</span>:<span class="number">60</span>&#125;);</span><br><span class="line">snow.start();</span><br></pre></td></tr></table></figure><p>然后在 \themes\layout\layout.ejs 文件里引用即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 雪花特效 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"\js\snow.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>如果没效果，请确认网页是否已载入JQurey，如果没有请在下雪代码之前引入JQ即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://libs.baidu.com/jquery/1.8.3/jquery.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src="</span>http:<span class="comment">//libs.baidu.com/jquery/1.8.3/jquery.min.js"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://ihuan.me/2172.html" target="_blank" rel="noopener">《分享两种圣诞节雪花特效JS代码(网站下雪效果)》</a></p><h3 id="10-添加背景代码雨特效"><a href="#10-添加背景代码雨特效" class="headerlink" title="10.添加背景代码雨特效"></a>10.添加背景代码雨特效</h3><p>在 \themes\source\js 目录下新建一个 DigitalRain.js 的文件，里面写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取画布对象</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="comment">//获取画布的上下文</span></span><br><span class="line">    <span class="keyword">var</span> context =canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">window</span>.screen;</span><br><span class="line">    <span class="keyword">var</span> W = canvas.width = s.width;</span><br><span class="line">    <span class="keyword">var</span> H = canvas.height;</span><br><span class="line">    <span class="comment">//获取浏览器屏幕的宽度和高度</span></span><br><span class="line">    <span class="comment">//var W = window.innerWidth;</span></span><br><span class="line">    <span class="comment">//var H = window.innerHeight;</span></span><br><span class="line">    <span class="comment">//设置canvas的宽度和高度</span></span><br><span class="line">    canvas.width = W;</span><br><span class="line">    canvas.height = H;</span><br><span class="line">    <span class="comment">//每个文字的字体大小</span></span><br><span class="line">    <span class="keyword">var</span> fontSize = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">//计算列</span></span><br><span class="line">    <span class="keyword">var</span> colunms = <span class="built_in">Math</span>.floor(W /fontSize);</span><br><span class="line">    <span class="comment">//记录每列文字的y轴坐标</span></span><br><span class="line">    <span class="keyword">var</span> drops = [];</span><br><span class="line">    <span class="comment">//给每一个文字初始化一个起始点的位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;colunms;i++)&#123;</span><br><span class="line">        drops.push(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//运动的文字</span></span><br><span class="line">    <span class="keyword">var</span> str =<span class="string">"WELCOME TO WWW.ITRHX.COM"</span>;</span><br><span class="line">    <span class="comment">//4:fillText(str,x,y);原理就是去更改y的坐标位置</span></span><br><span class="line">    <span class="comment">//绘画的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        context.fillStyle = <span class="string">"rgba(238,238,238,.08)"</span>;<span class="comment">//遮盖层</span></span><br><span class="line">        context.fillRect(<span class="number">0</span>,<span class="number">0</span>,W,H);</span><br><span class="line">        <span class="comment">//给字体设置样式</span></span><br><span class="line">        context.font = <span class="string">"600 "</span>+fontSize+<span class="string">"px  Georgia"</span>;</span><br><span class="line">        <span class="comment">//给字体添加颜色</span></span><br><span class="line">        context.fillStyle = [<span class="string">"#33B5E5"</span>, <span class="string">"#0099CC"</span>, <span class="string">"#AA66CC"</span>, <span class="string">"#9933CC"</span>, <span class="string">"#99CC00"</span>, <span class="string">"#669900"</span>, <span class="string">"#FFBB33"</span>, <span class="string">"#FF8800"</span>, <span class="string">"#FF4444"</span>, <span class="string">"#CC0000"</span>][<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">10</span>)];<span class="comment">//randColor();可以rgb,hsl, 标准色，十六进制颜色</span></span><br><span class="line">        <span class="comment">//写入画布中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;colunms;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * str.length);</span><br><span class="line">            <span class="keyword">var</span> x = i*fontSize;</span><br><span class="line">            <span class="keyword">var</span> y = drops[i] *fontSize;</span><br><span class="line">            context.fillText(str[index],x,y);</span><br><span class="line">            <span class="comment">//如果要改变时间，肯定就是改变每次他的起点</span></span><br><span class="line">            <span class="keyword">if</span>(y &gt;= canvas.height &amp;&amp; <span class="built_in">Math</span>.random() &gt; <span class="number">0.99</span>)&#123;</span><br><span class="line">                drops[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            drops[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">randColor</span>(<span class="params"></span>)</span>&#123;<span class="comment">//随机颜色</span></span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"rgb("</span>+r+<span class="string">","</span>+g+<span class="string">","</span>+b+<span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    draw();</span><br><span class="line">    setInterval(draw,<span class="number">35</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在主题文件的相关css文件中（在\themes\source\less_main.less 文件末尾）添加以下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">canvas</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在\themes\layout\layout.ejs 文件中写入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 数字雨 --&gt;</span><br><span class="line">&lt;canvas id=<span class="string">"canvas"</span> width=<span class="string">"1440"</span> height=<span class="string">"900"</span> &gt;&lt;<span class="regexp">/canvas&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src="</span>/js/DigitalRain.js<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>最终效果<br><img src="/img/hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E8%83%8C%E6%99%AF%E4%BB%A3%E7%A0%81%E9%9B%A8.png" alt="背景代码雨"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;结合js做md5加密&#39;</title>
      <link href="/2020/06/16/Blog/%E7%BB%93%E5%90%88js%E5%81%9Amd5%E5%8A%A0%E5%AF%86/"/>
      <url>/2020/06/16/Blog/%E7%BB%93%E5%90%88js%E5%81%9Amd5%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>不管在前端还是后端，我们都会有一些简单的业务对数据进行加密处理，用来防止信息等被盗取，所以我们这里来使用md5加密。</p><h3 id="关于md5加密算法"><a href="#关于md5加密算法" class="headerlink" title="关于md5加密算法"></a>关于md5加密算法</h3><p>MD5信息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。MD5由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于1992年公开，用以取代MD4算法。这套算法的程序在 RFC 1321 标准中被加以规范。1996年后该算法被证实存在弱点，可以被加以破解，对于需要高度安全性的数据，专家一般建议改用其他算法，如SHA-2。2004年，证实MD5算法无法防止碰撞（collision），因此不适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。</p><h3 id="md5依赖库"><a href="#md5依赖库" class="headerlink" title="md5依赖库"></a>md5依赖库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install js-md5</span><br><span class="line"></span><br><span class="line"><span class="comment"># "js-md5": "^0.7.3",</span></span><br></pre></td></tr></table></figure><p>针对md5加密库，因为他不是热库，不需要经常被使用，所以不需要将它加入到main.js中。最好的结果是每次使用单独对他进行调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> md5 <span class="keyword">from</span> <span class="string">'js-md5'</span></span><br></pre></td></tr></table></figure><h3 id="前端代码示例"><a href="#前端代码示例" class="headerlink" title="前端代码示例"></a>前端代码示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123;total&#125;&#125;</span><br><span class="line">    <span class="comment">&lt;!-- 7b7a53e239400a13bd6be6c91c4f6c4e --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> md5 <span class="keyword">from</span> <span class="string">'js-md5'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        total:<span class="string">''</span>,</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="actionscript">  <span class="comment">//注册组件标签</span></span></span><br><span class="line">  components:&#123;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="actionscript">  mounted:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> num = <span class="string">'2020'</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.total = md5(num)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打印结果:7b7a53e239400a13bd6be6c91c4f6c4e</p><h3 id="后端代码示例"><a href="#后端代码示例" class="headerlink" title="后端代码示例"></a>后端代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment">#前端num</span></span><br><span class="line">num = <span class="string">'2020'</span></span><br><span class="line"><span class="comment">#前端传的sign</span></span><br><span class="line">sign = <span class="string">"7b7a53e239400a13bd6be6c91c4f6c4e"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化</span></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line"><span class="comment">#组合要加密的字符串</span></span><br><span class="line">sign_str = num</span><br><span class="line"><span class="comment">#解码</span></span><br><span class="line">mysign = str(sign_str).encode(encoding=<span class="string">"utf-8"</span>)</span><br><span class="line"><span class="comment">#设置加密</span></span><br><span class="line">md5.update(mysign)</span><br><span class="line">mysign = md5.hexdigest()</span><br><span class="line"><span class="comment">#判断</span></span><br><span class="line">print(mysign)</span><br><span class="line"><span class="keyword">if</span> sign == mysign:</span><br><span class="line">print(<span class="string">"签名一致"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"数据被篡改"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印结果：7b7a53e239400a13bd6be6c91c4f6c4e</span></span><br><span class="line"><span class="comment">#签名一致</span></span><br></pre></td></tr></table></figure><p>针对需要保密的信息，使用md5进行加密一下简直不要太完美。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;结合python实现支付宝支付功能&#39;</title>
      <link href="/2020/06/16/Blog/%E7%BB%93%E5%90%88python%E5%AE%9E%E7%8E%B0%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD/"/>
      <url>/2020/06/16/Blog/%E7%BB%93%E5%90%88python%E5%AE%9E%E7%8E%B0%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>现在所有的门户网站还是一下应用，都离不开第三方支付，我们今天讲一下第三方的支付接口也就是支付宝接口付款。<br>支付宝支付采用了RSA加密签名的安全通信机制，开发者可以通过支付宝的公钥验证消息的来源，同时使用自己的私钥进行信息加密。RSA算法及数字签名机制是服务窗平台与开发者网关安全通信的基础。</p><h3 id="支付宝付款流程图"><a href="#支付宝付款流程图" class="headerlink" title="支付宝付款流程图"></a>支付宝付款流程图</h3><p><img src="/img/%E6%94%AF%E4%BB%98/%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BB%98%E6%AC%BE%E9%80%BB%E8%BE%91.png" alt="使用支付宝付款流程图"></p><h3 id="沙箱"><a href="#沙箱" class="headerlink" title="沙箱"></a>沙箱</h3><p>在使用支付宝支付的时候，我们就要使用到沙箱功能。<br>支付宝沙箱网址：<a href="https://openhome.alipay.com/platform/appDaily.htm?tab=info" target="_blank" rel="noopener">https://openhome.alipay.com/platform/appDaily.htm?tab=info</a></p><p>在沙箱应用中，我们需要记住自己的APPID,设置RSA2(SHA256)密钥<br>设置密钥官方文档：<a href="https://opendocs.alipay.com/open/291/105971#LDsXr" target="_blank" rel="noopener">https://opendocs.alipay.com/open/291/105971#LDsXr</a></p><p>根据文档生成自己的应用公钥和密钥。</p><h3 id="实现支付宝接口接入"><a href="#实现支付宝接口接入" class="headerlink" title="实现支付宝接口接入"></a>实现支付宝接口接入</h3><p>创建一个keys文件夹，存放alipay_public_2048.txt支付宝公钥和app_private_2048.txt应用私钥<br><img src="/img/%E6%94%AF%E4%BB%98/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%AC%E9%92%A5%E5%92%8C%E5%BA%94%E7%94%A8%E7%A7%81%E9%92%A5.png" alt="支付宝公钥和应用私钥"></p><p>文档地址：<a href="https://docs.open.alipay.com/api" target="_blank" rel="noopener">https://docs.open.alipay.com/api</a></p><p>根据文档写一个支付基类pay.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Signature <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote_plus</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse, parse_qs</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> decodebytes, encodebytes</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliPay</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    支付宝支付接口(PC端支付接口)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, appid, app_notify_url, app_private_key_path,</span></span></span><br><span class="line"><span class="function"><span class="params">                 alipay_public_key_path, return_url, debug=False)</span>:</span></span><br><span class="line">        self.appid = appid</span><br><span class="line">        self.app_notify_url = app_notify_url</span><br><span class="line">        self.app_private_key_path = app_private_key_path</span><br><span class="line">        self.app_private_key = <span class="literal">None</span></span><br><span class="line">        self.return_url = return_url</span><br><span class="line">        <span class="keyword">with</span> open(self.app_private_key_path) <span class="keyword">as</span> fp:</span><br><span class="line">            self.app_private_key = RSA.importKey(fp.read())</span><br><span class="line">        self.alipay_public_key_path = alipay_public_key_path</span><br><span class="line">        <span class="keyword">with</span> open(self.alipay_public_key_path) <span class="keyword">as</span> fp:</span><br><span class="line">            self.alipay_public_key = RSA.importKey(fp.read())</span><br><span class="line">        <span class="comment">#debug=True为测试模式，false是上线模式</span></span><br><span class="line">        <span class="keyword">if</span> debug <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            self.__gateway = <span class="string">"https://openapi.alipaydev.com/gateway.do"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.__gateway = <span class="string">"https://openapi.alipay.com/gateway.do"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">direct_pay</span><span class="params">(self, subject, out_trade_no, total_amount, return_url=None, **kwargs)</span>:</span></span><br><span class="line">        biz_content = &#123;</span><br><span class="line">            <span class="string">"subject"</span>: subject,</span><br><span class="line">            <span class="string">"out_trade_no"</span>: out_trade_no,</span><br><span class="line">            <span class="string">"total_amount"</span>: total_amount,</span><br><span class="line">            <span class="string">"product_code"</span>: <span class="string">"FAST_INSTANT_TRADE_PAY"</span>,</span><br><span class="line">            <span class="comment"># "qr_pay_mode":4</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        biz_content.update(kwargs)</span><br><span class="line">        data = self.build_body(<span class="string">"alipay.trade.page.pay"</span>, biz_content, self.return_url)</span><br><span class="line">        <span class="keyword">return</span> self.sign_data(data)</span><br><span class="line">    <span class="comment">#构造参数体</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_body</span><span class="params">(self, method, biz_content, return_url=None)</span>:</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"app_id"</span>: self.appid,</span><br><span class="line">            <span class="string">"method"</span>: method,</span><br><span class="line">            <span class="string">"charset"</span>: <span class="string">"utf-8"</span>,</span><br><span class="line">            <span class="string">"sign_type"</span>: <span class="string">"RSA2"</span>,</span><br><span class="line">            <span class="string">"timestamp"</span>: datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>),</span><br><span class="line">            <span class="string">"version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">            <span class="string">"biz_content"</span>: biz_content</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> return_url <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            data[<span class="string">"notify_url"</span>] = self.app_notify_url</span><br><span class="line">            data[<span class="string">"return_url"</span>] = self.return_url</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="comment">#签名数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sign_data</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        data.pop(<span class="string">"sign"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 排序后的字符串</span></span><br><span class="line">        unsigned_items = self.ordered_data(data)</span><br><span class="line">        unsigned_string = <span class="string">"&amp;"</span>.join(<span class="string">"&#123;0&#125;=&#123;1&#125;"</span>.format(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> unsigned_items)</span><br><span class="line">        sign = self.sign(unsigned_string.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">        <span class="comment"># ordered_items = self.ordered_data(data)</span></span><br><span class="line">        quoted_string = <span class="string">"&amp;"</span>.join(<span class="string">"&#123;0&#125;=&#123;1&#125;"</span>.format(k, quote_plus(v)) <span class="keyword">for</span> k, v <span class="keyword">in</span> unsigned_items)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获得最终的订单信息字符串</span></span><br><span class="line">        signed_string = quoted_string + <span class="string">"&amp;sign="</span> + quote_plus(sign)</span><br><span class="line">        <span class="keyword">return</span> signed_string</span><br><span class="line">    <span class="comment">#订单数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ordered_data</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        complex_keys = []</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> data.items():</span><br><span class="line">            <span class="keyword">if</span> isinstance(value, dict):</span><br><span class="line">                complex_keys.append(key)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将字典类型的数据dump出来</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> complex_keys:</span><br><span class="line">            data[key] = json.dumps(data[key], separators=(<span class="string">','</span>, <span class="string">':'</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sorted([(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> data.items()])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">(self, unsigned_string)</span>:</span></span><br><span class="line">        <span class="comment"># 开始计算签名</span></span><br><span class="line">        key = self.app_private_key</span><br><span class="line">        signer = PKCS1_v1_5.new(key)</span><br><span class="line">        signature = signer.sign(SHA256.new(unsigned_string))</span><br><span class="line">        <span class="comment"># base64 编码，转换为unicode表示并移除回车</span></span><br><span class="line">        sign = encodebytes(signature).decode(<span class="string">"utf8"</span>).replace(<span class="string">"\n"</span>, <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">return</span> sign</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_verify</span><span class="params">(self, raw_content, signature)</span>:</span></span><br><span class="line">        <span class="comment"># 开始计算签名</span></span><br><span class="line">        key = self.alipay_public_key</span><br><span class="line">        signer = PKCS1_v1_5.new(key)</span><br><span class="line">        digest = SHA256.new()</span><br><span class="line">        digest.update(raw_content.encode(<span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">if</span> signer.verify(digest, decodebytes(signature.encode(<span class="string">"utf8"</span>))):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verify</span><span class="params">(self, data, signature)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"sign_type"</span> <span class="keyword">in</span> data:</span><br><span class="line">            sign_type = data.pop(<span class="string">"sign_type"</span>)</span><br><span class="line">        <span class="comment"># 排序后的字符串</span></span><br><span class="line">        unsigned_items = self.ordered_data(data)</span><br><span class="line">        message = <span class="string">"&amp;"</span>.join(<span class="string">u"&#123;&#125;=&#123;&#125;"</span>.format(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> unsigned_items)</span><br><span class="line">        <span class="keyword">return</span> self._verify(message, signature)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#请求退款接口</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">api_alipay_trade_refund</span><span class="params">(self,refund_amount,out_trade_no=None,trade_no=None,**kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#构造参数体</span></span><br><span class="line">        biz_content = &#123; <span class="string">"refund_amount"</span>:refund_amount&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#传递可选参数</span></span><br><span class="line">        biz_content.update(**kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#判断使用站外订单还是支付宝订单</span></span><br><span class="line">        <span class="keyword">if</span> out_trade_no:</span><br><span class="line">            biz_content[<span class="string">"out_trade_no"</span>] = out_trade_no</span><br><span class="line">        <span class="keyword">if</span> trade_no:</span><br><span class="line">            biz_content[<span class="string">"trade_no"</span>] = trade_no</span><br><span class="line"></span><br><span class="line">        <span class="comment">#构造支付接口地址</span></span><br><span class="line">        data = self.build_body(<span class="string">"alipay.trade.refund"</span>,biz_content)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#构造url</span></span><br><span class="line">        url = self.__gateway+<span class="string">"?"</span> + self.sign_data(data)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#请求接口</span></span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        html = r.content.decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> html</span><br></pre></td></tr></table></figure><p>在视图定义方法使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">配置路由</span><br><span class="line">    path(<span class="string">'pay_url/'</span>,pay_url),<span class="comment">#支付宝跳转视图</span></span><br><span class="line">    path(<span class="string">'testpay/'</span>,back_url),<span class="comment">#会调地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect</span><br><span class="line"><span class="comment">#导入公共目录变量</span></span><br><span class="line"><span class="keyword">from</span> mydjango.settings <span class="keyword">import</span> BASE_DIR</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="comment">#导入支付宝支付接口</span></span><br><span class="line"><span class="keyword">from</span> mydjango.pay <span class="keyword">import</span> AliPay</span><br><span class="line"><span class="comment">#引入支付宝沙箱秘钥</span></span><br><span class="line"><span class="comment">#应用私钥</span></span><br><span class="line">app_private_key_string = os.path.join(BASE_DIR,<span class="string">'keys/app_private_2048.txt'</span>)</span><br><span class="line"><span class="comment">#支付宝公钥</span></span><br><span class="line">alipay_public_key_string = os.path.join(BASE_DIR,<span class="string">'keys/alipay_public_2048.txt'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#建立支付实例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ali_object</span><span class="params">()</span>:</span></span><br><span class="line">    app_id = <span class="string">'你的沙箱应用ID'</span>  <span class="comment">#沙箱应用ID</span></span><br><span class="line">    <span class="comment">#支付完成后跳转的地址</span></span><br><span class="line">    return_url = <span class="string">'http://localhost:8000/testpay/'</span></span><br><span class="line">    alipay = AliPay(</span><br><span class="line">        appid = app_id,</span><br><span class="line">        app_notify_url = return_url,</span><br><span class="line">        return_url = return_url,</span><br><span class="line">        app_private_key_path = app_private_key_string,</span><br><span class="line">        alipay_public_key_path = alipay_public_key_string,</span><br><span class="line">        <span class="comment">#支付宝公钥,验证支付宝回传消息，不是自己公钥</span></span><br><span class="line">        debug=<span class="literal">True</span>,<span class="comment">#默认false</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> alipay</span><br><span class="line"></span><br><span class="line"><span class="comment">#支付跳转视图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pay_url</span><span class="params">(request)</span>:</span></span><br><span class="line">    alipay = get_ali_object()</span><br><span class="line">    <span class="comment">#生成支付的url</span></span><br><span class="line">    query_params = alipay.direct_pay(</span><br><span class="line">        subject=<span class="string">'test'</span>,<span class="comment">#商品简单描述</span></span><br><span class="line">        out_trade_no=<span class="string">'myorder'</span>+str(time.time()),<span class="comment">#订单号，这里使用的是时间戳来做</span></span><br><span class="line">        total_amount= <span class="number">100.00</span><span class="comment">#交易金额（单元：元 保留两位小数）</span></span><br><span class="line">    )</span><br><span class="line">    pay_url = <span class="string">'https://openapi.alipaydev.com/gateway.do?'</span> + query_params</span><br><span class="line">    <span class="keyword">return</span> redirect(pay_url)</span><br><span class="line">    <span class="comment"># return HttpResponse('123')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#回调网址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">back_url</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'回调成功'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#回调url</span></span><br><span class="line"><span class="comment">#http://localhost:8080/myorder?charset=utf-8&amp;out_trade_no=4370479805276098561&amp;method=alipay.trade.page.pay.return&amp;total_amount=200.00&amp;sign=LCsKfD3ybvAlhzj1%2BJszACsy%2FeOL18p0A%2FmBIa68ZH2SUNb6163FWP5ScmyrGliBlmEtRVcVPkGASVLiY5l5ESTvFkx7OX3FO9%2FtqPRopSvhnf6jaaPjJt90YcG69Z9XZaqJHlK7LqCocLRKSXb4zxWDpek8QRrpUmkn9gxJgKr64Z7%2FlcjsZMpr1SxGjEhyMZp%2FbgcZfD8X4%2BiUkZThXB1LkKNhcRG5gHZTfoiEj%2FKxOFyH%2BNs4klXFjDTe5217UVMUAE351qfq0%2F%2FCXcZ3aHW52XobDAs12J6eVVtijUr8v2xD%2Bpp5SlgCBhkXt86euH4iVfLn61%2FCOMU7b3HLJQ%3D%3D&amp;trade_no=2020061622001482770501026654&amp;auth_app_id=2016092600603658&amp;version=1.0&amp;app_id=2016092600603658&amp;sign_type=RSA2&amp;seller_id=2088102177418159&amp;timestamp=2020-06-16%2013%3A27%3A16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#回调网址中的参数</span></span><br><span class="line"><span class="comment"># out_trade_no=4370479805276098561  #订单号</span></span><br><span class="line"><span class="comment"># total_amount=200.00               #订单价格</span></span><br><span class="line"><span class="comment">#sign='LCsKfD3ybvAlhzj1%2BJszACsy%2FeOL18p0A%2FmBIa68ZH2SUNb6163FWP5ScmyrGliBlmEtRVcVPkGASVLiY5l5ESTvFkx7OX3FO9%2FtqPRopSvhnf6jaaPjJt90YcG69Z9XZaqJHlK7LqCocLRKSXb4zxWDpek8QRrpUmkn9gxJgKr64Z7%2FlcjsZMpr1SxGjEhyMZp%2FbgcZfD8X4%2BiUkZThXB1LkKNhcRG5gHZTfoiEj%2FKxOFyH%2BNs4klXFjDTe5217UVMUAE351qfq0%2F%2FCXcZ3aHW52XobDAs12J6eVVtijUr8v2xD%2Bpp5SlgCBhkXt86euH4iVfLn61%2FCOMU7b3HLJQ%3D%3D'#签名</span></span><br><span class="line"><span class="comment"># trade_no=2020061622001482770501026654 #支付宝订单号</span></span><br><span class="line"><span class="comment"># auth_app_id=2016092600603658  #应用ID</span></span><br><span class="line"><span class="comment"># version=1.0                     #版本</span></span><br><span class="line"><span class="comment"># sign_type='RSA2'                  #算法</span></span><br><span class="line"><span class="comment"># seller_id=2088102177418159    #支付者ID</span></span><br><span class="line"><span class="comment"># timestamp='2020-06-16%2013%3A27%3A16'#时间戳</span></span><br></pre></td></tr></table></figure><p>在沙箱账号中，有个买家和卖家账号，在使用沙箱做测试支付的时候，使用的是买家账号，账号密码还有登陆密码都有说明，还需要充值买家账号余额，这里的金钱都是虚拟的。这样就可以完成测试支付宝付款了。快去测试一波吧！！</p>]]></content>
      
      
      <categories>
          
          <category> 支付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> 支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;分布式ID雪花算法(snowflake)&#39;</title>
      <link href="/2020/06/14/Blog/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95-snowflake/"/>
      <url>/2020/06/14/Blog/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95-snowflake/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>唯一ID可以标识数据的唯一性，在分布式系统中生成唯一ID的方案有很多，常见的方式大概有以下三种：</p><p>依赖数据库，使用如MySQL自增列或Oracle序列等。<br><a href="https://okwzh.cn/2020/06/14/uuid%E7%94%9F%E6%88%90%E5%94%AF%E4%B8%80id/">根据UUID生成</a><br>snowflake雪花算法</p><h3 id="为什么使用snowflake生成ID"><a href="#为什么使用snowflake生成ID" class="headerlink" title="为什么使用snowflake生成ID"></a>为什么使用snowflake生成ID</h3><p>使用uuid生成订单号这类东西也能凑合用，但是它有着罄竹难书的“罪行”：肉眼可见，它是无序的；长度是64位数字字母随机组合的字符串，占用空间巨大；完全不具备业务属性，也就是说使用uuid你完全无法推算出它到底是干嘛的；因为无序，所以趋势递增就更不用指望了；所以用uuid生成订单号就是自杀行为，适合它的是类似生成token令牌的场景。</p><p>雪花算法(snowflake)是Twitter开源的分布式ID生成算法，结果是一个long型的ID。为了满足Twitter每秒上万条消息的请求，每条消息都必须分配一条唯一的id，这些id还需要一些大致的顺序，让twitter可以通过一定的索引来进行检索，而在Twitter庞大的分布式系统中不同机器产生的id必须又必须不同。它的好处显而易见，不仅全局唯一，并且有序按时间递增，同时占用空间少，生成的id仅仅是19位的整形数字，正好契合mysql的bigint数据类型，简直完美。</p><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号，最后还有一个符号位，永远是0。<br>组成：<br><img src="/img/%E7%AE%97%E6%B3%95/snowflake%E7%BB%84%E6%88%90.png" alt="snowflake组成"></p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。 毫秒数在高位，自增序列在低位，整个ID都是趋势递增的。 不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成ID的性能也是非常高的。 可以根据自身业务特性分配bit位，非常灵活。</p><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>强依赖机器时钟，如果机器上时钟回拨，会导致发号重复或者服务会处于不可用状态。</p><h3 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pysnowflake</span><br></pre></td></tr></table></figure><h3 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snowflake_start_server --work&#x3D;1</span><br></pre></td></tr></table></figure><p><img src="/img/%E7%AE%97%E6%B3%95/%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1.png" alt="下载和启动服务"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">指定端口开启服务</span><br><span class="line">snowflake_start_server --work=<span class="number">1</span> --port=端口号</span><br></pre></td></tr></table></figure><p><img src="/img/%E7%AE%97%E6%B3%95/%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3.png" alt="指定端口"></p><h3 id="服务信息"><a href="#服务信息" class="headerlink" title="服务信息"></a>服务信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> snowflake.client</span><br><span class="line"></span><br><span class="line">print(snowflake.client.get_stats())</span><br><span class="line"></span><br><span class="line"><span class="comment">#worker是服务信息,time是时间戳</span></span><br><span class="line"><span class="comment">#&#123;'dc': 0, 'worker': 1, 'timestamp': 1592131606294, 'last_timestamp': 550281600000, 'sequence': 0, 'sequence_overload': 0, 'errors': 0&#125;</span></span><br></pre></td></tr></table></figure><h3 id="获取ID"><a href="#获取ID" class="headerlink" title="获取ID"></a>获取ID</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> snowflake.client</span><br><span class="line"></span><br><span class="line">print(snowflake.client.get_guid())</span><br><span class="line"></span><br><span class="line"><span class="comment">#4369836784469676033</span></span><br></pre></td></tr></table></figure><h3 id="根据ID反解析服务"><a href="#根据ID反解析服务" class="headerlink" title="根据ID反解析服务"></a>根据ID反解析服务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> snowflake.client</span><br><span class="line"></span><br><span class="line">sid = snowflake.client.get_guid()</span><br><span class="line">print(sid)</span><br><span class="line"><span class="comment">#ID：4369838396760133633</span></span><br><span class="line">bid = bin(sid)</span><br><span class="line">print(bid)</span><br><span class="line"><span class="comment">#第一位是标识符，此后是41位的时间戳，紧接着10位的节点标识码，最后12位的递增序列，</span></span><br><span class="line"><span class="comment"># 从后面数12位是：000000000001，再数5位是：00001 这5位就是某个节点的存储标识，我们就二进制的00001转换为十进制</span></span><br><span class="line"><span class="comment">#0b11110010100100110010001101111010010100110000000001000000000001</span></span><br><span class="line">cid = bin(sid)[<span class="number">47</span>:<span class="number">52</span>]</span><br><span class="line">print(<span class="string">'存储节点'</span>,cid)</span><br><span class="line"><span class="comment">#存储节点 00001</span></span><br><span class="line">print(<span class="string">'反解析服务'</span>,int(cid,<span class="number">2</span>))</span><br><span class="line"><span class="comment">#反解析服务 1</span></span><br></pre></td></tr></table></figure><h3 id="使用bigint存储"><a href="#使用bigint存储" class="headerlink" title="使用bigint存储"></a>使用bigint存储</h3><p>在使用好处显而易见，不仅全局唯一，并且有序按时间递增，同时占用空间少，生成的id仅仅是19位的整形数字，正好契合mysql的bigint数据类型，简直完美。<br>但是使用bigint有个bug，就是19位数字传到前端会发生关于js数字精度丢失问题。<br><a href="https://okwzh.cn/2020/06/14/%E5%85%B3%E4%BA%8Ejs%E6%95%B0%E5%AD%97%E8%BF%87%E9%95%BF%E5%87%BA%E7%8E%B0%E7%9A%84%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/">关于精度丢失问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;关于js数字过长出现的精度丢失问题&#39;</title>
      <link href="/2020/06/14/Blog/%E5%85%B3%E4%BA%8Ejs%E6%95%B0%E5%AD%97%E8%BF%87%E9%95%BF%E5%87%BA%E7%8E%B0%E7%9A%84%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/"/>
      <url>/2020/06/14/Blog/%E5%85%B3%E4%BA%8Ejs%E6%95%B0%E5%AD%97%E8%BF%87%E9%95%BF%E5%87%BA%E7%8E%B0%E7%9A%84%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在JavaScript中，由于计算机的二进制实现和位数限制有些数无法有限表示。就像一些无理数不能有限表示。<br>js的整数和浮点数都属于Number类型的，所有数字都是以64位浮点数形式存储。所以我们在前端打印的时候，<br>发现一个很奇怪的问题，就是当console.log(1.00)时，我们发现打印结果是1,后边的.00都被舍去。虽然数值是正确的，<br>但是和理想结果有些偏差。</p><h3 id="针对雪花算法出现的问题"><a href="#针对雪花算法出现的问题" class="headerlink" title="针对雪花算法出现的问题"></a>针对雪花算法出现的问题</h3><p>在做<a href="">雪花算法</a>的时候，说过使用model中的bigint是最好的存储方式，但是在做的时候发现一个问题，就是在前端展示出现展示效果问题，话不多说，上代码</p><h3 id="这是我保存数据库的结果"><a href="#这是我保存数据库的结果" class="headerlink" title="这是我保存数据库的结果"></a>这是我保存数据库的结果</h3><p><img src="/img/Js%E6%95%B0%E5%AD%97%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B1%95%E7%A4%BA%E7%BB%93%E6%9E%9C.png" alt="数据库展示结果"></p><h3 id="这是我后端获取数据"><a href="#这是我后端获取数据" class="headerlink" title="这是我后端获取数据"></a>这是我后端获取数据</h3><p><img src="/img/Js%E6%95%B0%E5%AD%97%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/%E5%90%8E%E7%AB%AF%E5%B1%95%E7%A4%BA%E6%95%B0%E6%8D%AE.png" alt="后端展示数据"></p><h3 id="这是我前端获取数据的结果"><a href="#这是我前端获取数据的结果" class="headerlink" title="这是我前端获取数据的结果"></a>这是我前端获取数据的结果</h3><p><img src="/img/Js%E6%95%B0%E5%AD%97%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/%E5%89%8D%E7%AB%AF%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE.png" alt="前端获取数据"><br>但是在我前端获取数据结果的时候，发现了一件很怪异的事情，就是js自动将我的数据给修改了，也就是前16位都是对着的。经过测试<br>发现，我的后端数据没有问题，在传递给前端的时候出现了差错，经过咨询和百度，发现了是js精度丢失的问题。<br>最常用的解决办法就是使用字符串类型。于是我把数据库的bitint类型给改成了varchar。完美解决。</p><h3 id="JavaScript的16位长度数字不变，超过就发生精度丢失问题。"><a href="#JavaScript的16位长度数字不变，超过就发生精度丢失问题。" class="headerlink" title="JavaScript的16位长度数字不变，超过就发生精度丢失问题。"></a>JavaScript的16位长度数字不变，超过就发生精度丢失问题。</h3><p>针对数字丢失问题，我做了实验。</p><figure class="highlight js"><figcaption><span>16位数字没变</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'最大安全数'</span>,<span class="number">1111111111111111</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大安全数 1111111111111111</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>17位发生变化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'最大安全数'</span>,<span class="number">11111111111111111</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大安全数 11111111111111112</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>20位发生变化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'最大安全数'</span>,<span class="number">11111111111111111111</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最大安全数 11111111111111110000</span></span><br></pre></td></tr></table></figure><p>根据以上代码，我们可以清晰看到在16位整数可以发现数字没有变化，但是在第17位的时候就发生了变化，长度越长后边都以0显示。<br><br>    </p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法:"></a>解决办法:</h3><pre><code>对于整数，前端出现问题的几率可能比较低，毕竟很少有业务需要需要用到超大整数，只要运算结果不超过 Math.pow(2, 53) 就不会丢失精度。对于小数，前端出现问题的几率还是很多的，尤其在一些电商网站涉及到金额等数据。解决方式：把小数放到位整数（乘倍数），再缩小回原来倍数（除倍数）</code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;uuid生成唯一id&#39;</title>
      <link href="/2020/06/14/Blog/uuid%E7%94%9F%E6%88%90%E5%94%AF%E4%B8%80id/"/>
      <url>/2020/06/14/Blog/uuid%E7%94%9F%E6%88%90%E5%94%AF%E4%B8%80id/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>当我们在做订单号的时候，可以发现我们使用订单号有个硬性条件，就是它最好的唯一性的,且最好是自增长。<br>在我们python中，系统自带了一个唯一的模块，就是uuid。但是我们使用uuid来生成订单号虽然也能使用，但是却有一个致命的缺点，就是无序。</p><h2 id="关于UUID-univeral-unique-identifier"><a href="#关于UUID-univeral-unique-identifier" class="headerlink" title="关于UUID(univeral unique identifier)"></a>关于UUID(univeral unique identifier)</h2><p>uuid是128位的全局唯一标识符（univeral unique identifier），通常用32位的一个字符串的形式来表现。python中自带了uuid模块来进行uuid的生成和管理工作。在python中的uuid模块是基于MAC地址、时间戳、命名空间、随机数、伪随机数来生成的。</p><h3 id="uuid-uuid1"><a href="#uuid-uuid1" class="headerlink" title="uuid.uuid1()"></a>uuid.uuid1()</h3><p>基于MAC地址，时间戳，随机数来生成唯一的uuid，可以保证全球范围内的唯一性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">print(uuid.uuid1())</span><br><span class="line"></span><br><span class="line"><span class="comment">#b8200238-ae14-11ea-859b-68ecc5357e24</span></span><br></pre></td></tr></table></figure><h3 id="uuid-uuid2"><a href="#uuid-uuid2" class="headerlink" title="uuid.uuid2()"></a>uuid.uuid2()</h3><p>uuid.uuid2()算法与uuid1相同，不同的是把时间戳的前4位置换为POSIX的UID。不过需要注意的是python中没有基于DCE的算法，所以python的uuid模块中没有uuid2这个方法。</p><h3 id="uuid-uuid3"><a href="#uuid-uuid3" class="headerlink" title="uuid.uuid3()"></a>uuid.uuid3()</h3><p>通过计算一个命名空间和名字的md5散列值来给出一个uuid，所以可以保证命名空间中的不同名字具有不同的uuid，但是相同的名字就是相同的uuid了。<br>namespace并不是一个自己手动指定的字符串或其他量，而是在uuid模块中本身给出的一些值。比如uuid.NAMESPACE_DNS，uuid.NAMESPACE_OID，uuid.NAMESPACE_OID这些值。这些值本身也是UUID对象，根据一定的规则计算得出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">name = <span class="string">'uuid_name'</span></span><br><span class="line">namespace = uuid.NAMESPACE_URL</span><br><span class="line">print(uuid.uuid3(namespace,name))</span><br><span class="line"></span><br><span class="line"><span class="comment">#5b4c833b-b8f0-36de-84d3-5ab20550d1c6</span></span><br></pre></td></tr></table></figure><h3 id="uuid-uuid4"><a href="#uuid-uuid4" class="headerlink" title="uuid.uuid4()"></a>uuid.uuid4()</h3><p>通过伪随机数得到uuid，是有一定概率重复的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">print(uuid.uuid4())</span><br><span class="line"></span><br><span class="line"><span class="comment">#1c0f445e-a357-4568-a9bc-25e0b4c07330</span></span><br></pre></td></tr></table></figure><h3 id="uuid-uuid5"><a href="#uuid-uuid5" class="headerlink" title="uuid.uuid5()"></a>uuid.uuid5()</h3><p>和uuid3基本相同，只不过采用的散列算法是sha1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">name = <span class="string">'uuid_name'</span></span><br><span class="line">namespace = uuid.NAMESPACE_URL</span><br><span class="line">print(uuid.uuid5(namespace,name))</span><br><span class="line"></span><br><span class="line"><span class="comment">#87fec518-b116-571f-87e3-e40ab834ff45</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;使用又拍云及拖拽上传&#39;</title>
      <link href="/2020/06/09/Blog/day10-vue+django+python%E5%AE%8C%E6%88%90%E5%8F%88%E6%8B%8D%E4%BA%91%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E5%AD%98%E5%82%A8/"/>
      <url>/2020/06/09/Blog/day10-vue+django+python%E5%AE%8C%E6%88%90%E5%8F%88%E6%8B%8D%E4%BA%91%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>官方网址：<a href="https://www.upyun.com/" target="_blank" rel="noopener">又拍云官网</a></p><h3 id="1-点击注册或登录"><a href="#1-点击注册或登录" class="headerlink" title="1.点击注册或登录"></a>1.点击注册或登录</h3><h3 id="2-点击云存储"><a href="#2-点击云存储" class="headerlink" title="2.点击云存储"></a>2.点击云存储</h3><p><img src="/img/%E5%8F%88%E6%8B%8D%E4%BA%91/%E5%8F%88%E6%8B%8D%E4%BA%911.png" alt="又拍云1"></p><h3 id="3-创建服务"><a href="#3-创建服务" class="headerlink" title="3.创建服务"></a>3.创建服务</h3><p><img src="/img/%E5%8F%88%E6%8B%8D%E4%BA%91/%E5%8F%88%E6%8B%8D%E4%BA%912.png" alt="又拍云2"></p><h3 id="4-查看又拍云图片"><a href="#4-查看又拍云图片" class="headerlink" title="4.查看又拍云图片"></a>4.查看又拍云图片</h3><p><img src="/img/%E5%8F%88%E6%8B%8D%E4%BA%91/%E5%8F%88%E6%8B%8D%E4%BA%913.png" alt="又拍云3"></p><h4 id="4-1分配的网址-图片名"><a href="#4-1分配的网址-图片名" class="headerlink" title="4.1分配的网址/图片名"></a>4.1分配的网址/图片名</h4><pre><code>http://md-upyun.test.upcdn.net/图片名</code></pre><h4 id="4-2进入文件管理查看"><a href="#4-2进入文件管理查看" class="headerlink" title="4.2进入文件管理查看"></a>4.2进入文件管理查看</h4><h3 id="5-添加操作员"><a href="#5-添加操作员" class="headerlink" title="5.添加操作员"></a>5.添加操作员</h3><p><img src="/img/%E5%8F%88%E6%8B%8D%E4%BA%91/%E5%8F%88%E6%8B%8D%E4%BA%914.jpg" alt="添加操作员"></p><h3 id="6-添加操作员"><a href="#6-添加操作员" class="headerlink" title="6.添加操作员"></a>6.添加操作员</h3><p><img src="/img/%E5%8F%88%E6%8B%8D%E4%BA%91/%E5%8F%88%E6%8B%8D%E4%BA%915.jpg" alt="创建操作员"></p><p>下载依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install upyun</span><br></pre></td></tr></table></figure><h3 id="使用又拍云下载大文件"><a href="#使用又拍云下载大文件" class="headerlink" title="使用又拍云下载大文件"></a>使用又拍云下载大文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#新建又拍云实例</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line"><span class="comment">#文件流操作(节省内存)</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./bg.png'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment">#上传文件</span></span><br><span class="line">    res = up.put(<span class="string">'/bg.png'</span>,f,checksum=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="使用又拍云进行写入文件"><a href="#使用又拍云进行写入文件" class="headerlink" title="使用又拍云进行写入文件"></a>使用又拍云进行写入文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#新建又拍云实例</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line">value = <span class="string">'hello python,恩呢恩'</span></span><br><span class="line">up.put(<span class="string">'/yun.txt'</span>,value)</span><br></pre></td></tr></table></figure><h3 id="使用又拍云进行目录操作，创建文件夹"><a href="#使用又拍云进行目录操作，创建文件夹" class="headerlink" title="使用又拍云进行目录操作，创建文件夹"></a>使用又拍云进行目录操作，创建文件夹</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#新建又拍云实例</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line"><span class="comment">#目录操作,创建文件夹</span></span><br><span class="line">up.mkdir(<span class="string">'/ypyun_test/'</span>)</span><br></pre></td></tr></table></figure><h3 id="使用又拍云移动文件"><a href="#使用又拍云移动文件" class="headerlink" title="使用又拍云移动文件"></a>使用又拍云移动文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#新建又拍云实例</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line"><span class="comment">#移动文件</span></span><br><span class="line"><span class="comment">#src移动谁，dest移动到哪</span></span><br><span class="line">up.move(<span class="string">'bg.png'</span>,<span class="string">'/ypyun_test/bg.png'</span>)</span><br></pre></td></tr></table></figure><h3 id="使用又拍云复制文件"><a href="#使用又拍云复制文件" class="headerlink" title="使用又拍云复制文件"></a>使用又拍云复制文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#新建又拍云实例</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line"><span class="comment">#复制文件</span></span><br><span class="line">up.copy(<span class="string">'9c1d0bd8-8f51-11ea-a567-005056c00008.jpg'</span>,<span class="string">'/ypyun_test/9c1d0bd8-8f51-11ea-a567-005056c00008.jpg'</span>)</span><br></pre></td></tr></table></figure><h3 id="使用又拍云断点续传"><a href="#使用又拍云断点续传" class="headerlink" title="使用又拍云断点续传"></a>使用又拍云断点续传</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#新建又拍云实例</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line"><span class="comment">#断点续传(第二次传的时候是从第一次剩下的开始继续上传)</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'D:\学习资料\视频\猫和老鼠.mp4'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="comment"># need_resume=True断点续传</span></span><br><span class="line">    res = up.put(<span class="string">'/ypyun_test/猫和老鼠.mp4'</span>,f,checksum=<span class="literal">True</span>,need_resume=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="使用又拍云进行下载"><a href="#使用又拍云进行下载" class="headerlink" title="使用又拍云进行下载"></a>使用又拍云进行下载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#新建又拍云实例</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line"><span class="comment">#下载图片</span></span><br><span class="line">res = up.get(<span class="string">'/ypyun_test/9c1d0bd8-8f51-11ea-a567-005056c00008.jpg'</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h3 id="使用又拍云进行删除"><a href="#使用又拍云进行删除" class="headerlink" title="使用又拍云进行删除"></a>使用又拍云进行删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"><span class="comment">#新建又拍云实例</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">up.delete(<span class="string">'/ypyun_test/9c1d0bd8-8f51-11ea-a567-005056c00008.jpg'</span>)</span><br></pre></td></tr></table></figure><h3 id="拖拽上传代码示例"><a href="#拖拽上传代码示例" class="headerlink" title="拖拽上传代码示例"></a>拖拽上传代码示例</h3><p>vue代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> @<span class="attr">change</span>=<span class="string">"upload_upyun"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line">                    拖拽上传</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> upload = <span class="built_in">document</span>.querySelector(<span class="string">'.upload'</span>);</span></span><br><span class="line"><span class="actionscript">        upload.addEventListener(<span class="string">'dragenter'</span>, <span class="keyword">this</span>.onDrag, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">        upload.addEventListener(<span class="string">'dragover'</span>, <span class="keyword">this</span>.onDrag, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">        upload.addEventListener(<span class="string">'drop'</span>, <span class="keyword">this</span>.onDrop, <span class="literal">false</span>);</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    <span class="comment">//自定义方法</span></span></span><br><span class="line">    methods:&#123;</span><br><span class="line">        onDrag (e) &#123;</span><br><span class="line">            e.stopPropagation();</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;,</span><br><span class="line">        onDrop (e) &#123;</span><br><span class="line">            e.stopPropagation();</span><br><span class="line">            e.preventDefault();</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.upload_upyun(e.dataTransfer.files);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="comment">//上传又拍云</span></span></span><br><span class="line"><span class="actionscript">        upload_upyun:<span class="function"><span class="keyword">function</span><span class="params">(files)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//获取文件对象</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// let file = e.target.files[0];</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> file = files[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//声明参数</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> param = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="actionscript">            param.append(<span class="string">'file'</span>,file);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> config = &#123;</span></span><br><span class="line"><span class="actionscript">                headers: &#123; <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data'</span> &#125;</span></span><br><span class="line">            &#125;  </span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.axios(&#123;</span></span><br><span class="line"><span class="actionscript">                url:<span class="string">'http://localhost:8000/ypy/'</span>,</span></span><br><span class="line"><span class="actionscript">                method:<span class="string">'POST'</span>,</span></span><br><span class="line">                data:param,</span><br><span class="line">                config:config</span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(resp)</span></span><br><span class="line">            &#125;)             </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.upload</span> &#123;</span></span><br><span class="line">    margin: 100px auto;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 150px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-id">#f00</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>django代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">urls：    path(<span class="string">'ypy/'</span>,UpyunLoad.as_view()),</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> upyun</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义文件上传类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpyunLoad</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment">#前端获取文件</span></span><br><span class="line">        img = request.FILES.get(<span class="string">'file'</span>)</span><br><span class="line">        <span class="comment">#创建文件名</span></span><br><span class="line">        file_name = str(uuid.uuid1())+<span class="string">'.jpg'</span></span><br><span class="line">        print(file_name)</span><br><span class="line">        up = upyun.UpYun(<span class="string">'你的空间服务名称'</span>, username=<span class="string">'操作员'</span>, password=<span class="string">'生成密码'</span>)</span><br><span class="line">        <span class="comment">#x-gmkerl-rotate旋转角度，目前只允许设置：auto，90，180，270</span></span><br><span class="line">        headers = &#123;<span class="string">'x-gmkerl-rotate'</span>: <span class="string">'auto'</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> img.chunks():</span><br><span class="line">            res = up.put(<span class="string">'/%s'</span>%file_name, chunk, checksum=<span class="literal">True</span>, headers=headers)</span><br><span class="line">        <span class="comment"># 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'filename'</span>: file_name&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> vue </tag>
            
            <tag> 又拍云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;结合又拍云实现多线程异步分块上传&#39;</title>
      <link href="/2020/06/09/Blog/%E7%BB%93%E5%90%88%E5%8F%88%E6%8B%8D%E4%BA%91%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%82%E6%AD%A5%E5%88%86%E5%9D%97%E4%B8%8A%E4%BC%A0/"/>
      <url>/2020/06/09/Blog/%E7%BB%93%E5%90%88%E5%8F%88%E6%8B%8D%E4%BA%91%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%82%E6%AD%A5%E5%88%86%E5%9D%97%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>上一篇我们已经说过又拍云的<a href="https://okwzh.cn/2020/06/09/day10-vue+django+python%E5%AE%8C%E6%88%90%E5%8F%88%E6%8B%8D%E4%BA%91%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E5%AD%98%E5%82%A8/">常用操作</a>,今天我们讲一下结合多线程实现异步上传</p><p>当我们使用第三方依赖，要注意模块是不是最新依赖，进行更新</p><p>UPYUN Python SDK文档：<a href="https://github.com/upyun/python-sdk#upyun-python-sdk" target="_blank" rel="noopener">点击跳转</a><br>查看最新python SDK：<a href="ontawesome.com.cn/faicons/">点击跳转</a></p><h3 id="多线程异步实现又拍云上传"><a href="#多线程异步实现又拍云上传" class="headerlink" title="多线程异步实现又拍云上传"></a>多线程异步实现又拍云上传</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> upyun  <span class="comment"># 又拍云</span></span><br><span class="line"><span class="keyword">import</span> os  <span class="comment"># 文件模块</span></span><br><span class="line"><span class="keyword">import</span> threading  <span class="comment"># 多线程模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建又拍云实例</span></span><br><span class="line"><span class="comment"># 三个参数,又拍云服务名称，操作员名称，操作员密码</span></span><br><span class="line">up = upyun.UpYun(<span class="string">'服务名称'</span>, <span class="string">'操作员名称'</span>, <span class="string">'操作员密码'</span>)</span><br><span class="line"><span class="comment"># 分块上传</span></span><br><span class="line">uploader = up.init_multi_uploader(<span class="string">'/upyun_python/upyun_sanguo.mp4'</span>)</span><br><span class="line"><span class="comment">#同步上传</span></span><br><span class="line"><span class="comment"># uploader.upload(0,os.urandom(1024*1024))</span></span><br><span class="line"><span class="comment"># uploader.upload(1,os.urandom(1024*1024))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#采用多线程调用上传</span></span><br><span class="line"><span class="comment">#创建线程池</span></span><br><span class="line">threads = []</span><br><span class="line"><span class="comment">#uploader.upload不加括号，这里是声明，不是调用，调用的话还是同步</span></span><br><span class="line"><span class="comment">#参数写在args里,(0声明异步上传序号)</span></span><br><span class="line">t1 = threading.Thread(target=uploader.upload,args=(<span class="number">0</span>,os.urandom(<span class="number">1024</span>*<span class="number">1024</span>)))</span><br><span class="line"><span class="comment"># #添加到线程池</span></span><br><span class="line">threads.append(t1)</span><br><span class="line">t2 = threading.Thread(target=uploader.upload,args=(<span class="number">1</span>,os.urandom(<span class="number">1024</span>*<span class="number">1024</span>)))</span><br><span class="line">threads.append(t2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动多线程</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.start()</span><br><span class="line"><span class="comment">#     #阻塞主线程</span></span><br><span class="line">    t.join()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # #声明调用结束</span></span><br><span class="line">res = uploader.complete()</span><br></pre></td></tr></table></figure><h3 id="多线程异步对文件进行分块上传"><a href="#多线程异步对文件进行分块上传" class="headerlink" title="多线程异步对文件进行分块上传"></a>多线程异步对文件进行分块上传</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上传又拍云文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upyun_Post</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 获取视频文件</span></span><br><span class="line">        file = request.FILES.get(<span class="string">'file'</span>)</span><br><span class="line">        print(file)</span><br><span class="line">        up = upyun.UpYun(<span class="string">'服务名称'</span>, <span class="string">'操作员名称'</span>, <span class="string">'操作员密码'</span>)</span><br><span class="line">        uploader = up.init_multi_uploader(<span class="string">"/upyun-python-sdk/%s"</span> % file, part_size=(<span class="number">1024</span> * <span class="number">2048</span>))</span><br><span class="line">        threads = []</span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(file.chunks(chunk_size=(<span class="number">1024</span> * <span class="number">2048</span>))):</span><br><span class="line">            t = threading.Thread(target=uploader.upload, args=(index, value))</span><br><span class="line">            threads.append(t)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> threads:</span><br><span class="line">            i.start()</span><br><span class="line">            i.join()</span><br><span class="line">        res = uploader.complete()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">200</span>,<span class="string">'message'</span>:<span class="string">'上传成功'</span>&#125;)</span><br><span class="line">        <span class="comment"># return HttpResponse(json.dumps(&#123;'filename': file&#125;), content_type='application/json')</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 又拍云 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;响应状态码和请求方法&#39;</title>
      <link href="/2020/06/08/Blog/%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81/"/>
      <url>/2020/06/08/Blog/%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="状态码分类-HTTP-Status-Code"><a href="#状态码分类-HTTP-Status-Code" class="headerlink" title="状态码分类(HTTP Status Code)"></a>状态码分类(HTTP Status Code)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1XX- 信息型，服务器收到请求，需要请求者继续操作。</span><br><span class="line">2XX- 成功型，请求成功收到，理解并处理。</span><br><span class="line">3XX - 重定向，需要进一步的操作以完成请求。</span><br><span class="line">4XX - 客户端错误，请求包含语法错误或无法完成请求。</span><br><span class="line">5XX - 服务器错误，服务器在处理请求的过程中发生了错误。</span><br></pre></td></tr></table></figure><h3 id="常用状态码"><a href="#常用状态码" class="headerlink" title="常用状态码"></a>常用状态码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">100系列：</span><br><span class="line">    100   继续   客户端应当继续发送请求</span><br><span class="line"></span><br><span class="line">200系列：</span><br><span class="line">200   成功   服务器成功处理了请求</span><br><span class="line">300系列：</span><br><span class="line">301   永久移动   请求的网页已永久移动到新位置，永久重定向</span><br><span class="line">302   临时移动   请求的网页暂时跳转到其他页面，临时重定向</span><br><span class="line">400系列：</span><br><span class="line">400   错误请求   服务器无法解析该请求</span><br><span class="line">401   未授权     请求没有进行身份验证或验证未通过</span><br><span class="line">403   禁止访问   服务器拒绝此请求</span><br><span class="line">404   未找到     服务器找不到请求的网页</span><br><span class="line">500系列：</span><br><span class="line">500  服务器内部错误   服务器遇到错误，无法完成请求</span><br><span class="line">501   未实现          服务器不具备完成请求的功能</span><br><span class="line">502   错误网关        服务器做为网关或代理，从上游服务器收到无效响应</span><br><span class="line">504   网关超时        服务器做为网关或代理，但是没有及时从上游服务器收到请求</span><br><span class="line"> 505   HTTP版本不支持  服务器不支持请求中所用的HTTP协议版本</span><br></pre></td></tr></table></figure><h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1).GET：请求页面，并返回页面内容  </span><br><span class="line">2).POST：用于提交表单数据或上传文件，数据包含在请求体中</span><br><span class="line">3).PUT：从客户端向服务器传送的数据取代指定文档中的内容</span><br><span class="line">4).DELETE：请求服务器删除指定的页面</span><br><span class="line">5).CONNECT：把服务器当做跳板，让服务器代替客户端访问其他网页</span><br><span class="line">6).HEAD：类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头</span><br><span class="line">7).OPTIONS：允许客户端查看服务器的性能</span><br><span class="line">8).TRACE：回显服务器收到的请求，主要用于测试或诊断</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#重点掌握GET&amp;POST区别：</span><br><span class="line">1.GET请求中的参数包含在URL里面，数据可以在URL中看到。</span><br><span class="line">而POST请求的URL不会包含这些数据，POST的数据都是通过表单形式传输的，会包含在请求体中。</span><br><span class="line">    2.GET请求提交的数据最多之后1024字节，而POST方式没有限制</span><br><span class="line">    3.POST请求比GET请求相对安全。</span><br></pre></td></tr></table></figure><h3 id="请求响应步骤"><a href="#请求响应步骤" class="headerlink" title="请求响应步骤"></a>请求响应步骤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客户端连接到Web服务器-&gt;发送Http请求-&gt;服务器接受请求并返回HTTP响应-&gt;释放连接TCP连接-&gt;客户端浏览器解析HTML内容</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;HTTP协议和HTTPS协议&#39;</title>
      <link href="/2020/06/08/Blog/HTTP%E5%8D%8F%E8%AE%AE%E5%92%8CHTTPS%E5%8D%8F%E8%AE%AE/"/>
      <url>/2020/06/08/Blog/HTTP%E5%8D%8F%E8%AE%AE%E5%92%8CHTTPS%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="HTTP协议和HTTPS协议的概念"><a href="#HTTP协议和HTTPS协议的概念" class="headerlink" title="HTTP协议和HTTPS协议的概念"></a>HTTP协议和HTTPS协议的概念</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP协议(Hyper Text Transfer Protocol)：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），</span><br><span class="line">    用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</span><br><span class="line">HTTPS协议：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，</span><br><span class="line">    HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</span><br><span class="line">HTTPS协议的主要作用可以分为两种：</span><br><span class="line">    1.一种是建立一个信息安全通道，来保证数据传输的安全；</span><br><span class="line">    2.另一种就是确认网站的真实性。</span><br></pre></td></tr></table></figure><h3 id="HTTP协议的缺点"><a href="#HTTP协议的缺点" class="headerlink" title="HTTP协议的缺点"></a>HTTP协议的缺点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP缺点：</span><br><span class="line">    1.通信使用明文，内容可能被窃听(重要密码泄露)</span><br><span class="line">    2.不验证通信方身份，有可能遭遇伪装(跨站点请求伪造)</span><br><span class="line">    3.无法证明报文的完整性，有可能已遭篡改(运营商劫持)</span><br></pre></td></tr></table></figure><h3 id="http和https的区别与联系及特点"><a href="#http和https的区别与联系及特点" class="headerlink" title="http和https的区别与联系及特点"></a>http和https的区别与联系及特点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    HTTP协议是超文本传输协议，被用于在Web浏览器和网站服务器之间传递信息的，</span><br><span class="line">是一个基于请求与响应，无状态的，应用层的协议，是TCP&#x2F;IP协议传输数据，HTTP协议以明文方式发送内容，</span><br><span class="line">不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，</span><br><span class="line">就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。</span><br><span class="line"></span><br><span class="line">    为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS，</span><br><span class="line">为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，</span><br><span class="line">SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</span><br><span class="line"></span><br><span class="line">无状态：协议对客户端没有状态存储，对事物处理没有“记忆”能力，比如访问一个网站需要反复进行登录操作</span><br><span class="line">无连接：每次请求需要通过TCP三次握手四次挥手，和服务器重新建立连接。</span><br><span class="line">SSL：网景公司设计了SSL（SecureSocketsLayer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。</span><br></pre></td></tr></table></figure><h3 id="HTTPS和HTTP的区别主要如下："><a href="#HTTPS和HTTP的区别主要如下：" class="headerlink" title="HTTPS和HTTP的区别主要如下："></a>HTTPS和HTTP的区别主要如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</span><br><span class="line">2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl（安全套接字层SSL）加密传输协议。</span><br><span class="line">3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</span><br><span class="line">4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</span><br><span class="line">5、https相对于http协议的连接方式来讲，性能方面会有所损耗。</span><br></pre></td></tr></table></figure><h3 id="HTTPS的工作流程"><a href="#HTTPS的工作流程" class="headerlink" title="HTTPS的工作流程"></a>HTTPS的工作流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第一步：客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。</span><br><span class="line">第二步：Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。</span><br><span class="line">第三步：客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。</span><br><span class="line">第四步：客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</span><br><span class="line">第五步：Web服务器利用自己的私钥解密出会话密钥。</span><br><span class="line">第六步：Web服务器利用会话密钥加密与客户端之间的通信。</span><br></pre></td></tr></table></figure><h3 id="HTTPS的优缺点"><a href="#HTTPS的优缺点" class="headerlink" title="HTTPS的优缺点"></a>HTTPS的优缺点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">    <span class="number">1.</span>SEO方面：谷歌曾在<span class="number">2014</span>年<span class="number">8</span>月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</span><br><span class="line">    <span class="number">2.</span>安全性：</span><br><span class="line">        （<span class="number">1</span>）、使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</span><br><span class="line">        （<span class="number">2</span>）、HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，</span><br><span class="line">        要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</span><br><span class="line">        （<span class="number">3</span>）、HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">    <span class="number">1.</span>SEO方面：</span><br><span class="line">        （<span class="number">1</span>）使用HTTPS协议会使页面的加载时间延长近<span class="number">50</span>%，增加<span class="number">10</span>%到<span class="number">20</span>%的耗电</span><br><span class="line">        （<span class="number">2</span>）HTTPS协议还会影响缓存，增加数据开销和功耗，甚至已有安全措施也会受到影响也会因此而受到影响。</span><br><span class="line">        （<span class="number">3</span>）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。</span><br><span class="line">        （<span class="number">4</span>）成本增加。</span><br><span class="line">    <span class="number">2.</span>经济方面：</span><br><span class="line">        (<span class="number">1</span>)SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</span><br><span class="line">        (<span class="number">2</span>)HTTPS连接缓存不如HTTP高效，大流量网站如非必要也不会采</span><br><span class="line">        (<span class="number">3</span>)HTTPS协议握手阶段比较费时，对网站的相应速度有负面影响</span><br></pre></td></tr></table></figure><h3 id="免费HTTPS证书推荐-排名不分先后"><a href="#免费HTTPS证书推荐-排名不分先后" class="headerlink" title="免费HTTPS证书推荐(排名不分先后)"></a>免费HTTPS证书推荐(排名不分先后)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SSL 证书级别分为三种类型，域名型SSL证书（DV SSL）、企业型SSL证书（OVSSL）、增强型SSL证书（EVSSL）</span><br><span class="line">(<span class="number">1</span>).Let<span class="string">'s Encrypt </span></span><br><span class="line"><span class="string">(2).startSSL</span></span><br><span class="line"><span class="string">(3).Wosign沃通SSL</span></span><br><span class="line"><span class="string">(4).NameCheap   </span></span><br><span class="line"><span class="string">(5).腾讯云DV SSL 证书</span></span><br><span class="line"><span class="string">(6).阿里云DV SSL证书</span></span><br><span class="line"><span class="string">(7).360网站卫士、百度云加速免费SSL、又拍云、七牛云</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;结合百度ai实现自然语言分析&#39;</title>
      <link href="/2020/06/07/Blog/%E7%BB%93%E5%90%88%E7%99%BE%E5%BA%A6AI%E5%AE%9E%E7%8E%B0%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%88%86%E6%9E%90/"/>
      <url>/2020/06/07/Blog/%E7%BB%93%E5%90%88%E7%99%BE%E5%BA%A6AI%E5%AE%9E%E7%8E%B0%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>百度AI开放平台地址：<a href="https://ai.baidu.com/" target="_blank" rel="noopener">点击跳转</a><br>官方文档地址：<a href="https://ai.baidu.com/tech/nlp_apply/sentiment_classify" target="_blank" rel="noopener">点击跳转</a></p><h3 id="获取应用"><a href="#获取应用" class="headerlink" title="获取应用"></a>获取应用</h3><p>1.进行注册登陆<br>2.找到文字识别–&gt;应用列表<br>3.创建应用<br>4.获取AppID,API Key,Secret Key<br><img src="/img/python/%E7%99%BE%E5%BA%A6AI%E5%BA%94%E7%94%A8.png" alt="获取应用"></p><p>安装百度AI模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install baidu-aip</span><br></pre></td></tr></table></figure><h3 id="对文本进行错误检查"><a href="#对文本进行错误检查" class="headerlink" title="对文本进行错误检查"></a>对文本进行错误检查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipNlp</span><br><span class="line"></span><br><span class="line">appip = <span class="string">'your appid'</span></span><br><span class="line">appkey = <span class="string">'your appkey'</span></span><br><span class="line">secret_key = <span class="string">'your secret_key'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化对象</span></span><br><span class="line">client = AipNlp(appip,appkey,secret_key)</span><br><span class="line"><span class="comment">#定义检查文本</span></span><br><span class="line">text = <span class="string">'学习python，学习人工只能'</span></span><br><span class="line"><span class="comment">#进行检查</span></span><br><span class="line">res = client.ecnet(text)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;'log_id': 9052624029983259239, 'item': &#123;'vec_fragment': [&#123;'ori_frag': '人工只能', 'begin_pos': 16, 'correct_frag': '人工智能', 'end_pos': 24&#125;], 'score': 0.590899, 'correct_query': '学习python，学习人工智能'&#125;, 'text': '学习python，学习人工只能'&#125;</span></span><br></pre></td></tr></table></figure><h3 id="对文本进行标签处理"><a href="#对文本进行标签处理" class="headerlink" title="对文本进行标签处理"></a>对文本进行标签处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipNlp</span><br><span class="line"></span><br><span class="line">appip = <span class="string">'your appid'</span></span><br><span class="line">appkey = <span class="string">'your appkey'</span></span><br><span class="line">secret_key = <span class="string">'your secret_key'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化对象</span></span><br><span class="line">client = AipNlp(appip,appkey,secret_key)</span><br><span class="line"><span class="comment">#标签</span></span><br><span class="line">title = <span class="string">'python人工智能在线学习'</span></span><br><span class="line">content = <span class="string">'我再北京学习人工智能，他是基于python的一门学科'</span></span><br><span class="line"><span class="comment">#调取标签</span></span><br><span class="line">res = client.keyword(title,content)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;'log_id': 2174377746871861863, 'items': [&#123;'score': 0.9486, 'tag': '人工智能'&#125;, &#123;'score': 0.768706, 'tag': 'python'&#125;]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="对文本进行情感分析"><a href="#对文本进行情感分析" class="headerlink" title="对文本进行情感分析"></a>对文本进行情感分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipNlp</span><br><span class="line"></span><br><span class="line">appip = <span class="string">'your appid'</span></span><br><span class="line">appkey = <span class="string">'your appkey'</span></span><br><span class="line">secret_key = <span class="string">'your secret_key'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化对象</span></span><br><span class="line">client = AipNlp(appip,appkey,secret_key)</span><br><span class="line"><span class="comment">#情感分析</span></span><br><span class="line">text = <span class="string">'华为是一家很棒的公司'</span></span><br><span class="line">print(client.commentTag(text))</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;'log_id': 1058331879559622439, 'items': [&#123;'sentiment': 2, 'abstract': '华为是一家很棒的公司&lt;span&gt;&lt;/span&gt;', 'prop': '感觉', 'begin_pos': 20, 'end_pos': 20, 'adj': '棒'&#125;]&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;第三方登录-gitee登录&#39;</title>
      <link href="/2020/06/06/Blog/day08-%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-gitee%E7%99%BB%E5%BD%95/"/>
      <url>/2020/06/06/Blog/day08-%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-gitee%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="创建gitee应用"><a href="#创建gitee应用" class="headerlink" title="创建gitee应用"></a>创建gitee应用</h3><p>1.登陆gitee <a href="https://gitee.com/" target="_blank" rel="noopener">gitee登录网站</a><br>2.点击头像,设置,第三方应用<br>3.创建应用<br><img src="/img/gitee/gitee%E7%99%BB%E5%BD%95.png" alt="gitee注册应用"><br>4.自定义应用名称，应用描述，应用回调网址等。<br>5.创建完成，获取Client ID,Client Secret,还有应用回调地址。</p><h3 id="gitee开发文档"><a href="#gitee开发文档" class="headerlink" title="gitee开发文档"></a>gitee开发文档</h3><p>开发文档地址：<a href="https://gitee.com/api/v5/oauth_doc#/list-item-2" target="_blank" rel="noopener">点击跳转</a></p><a id="more"></a><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"'http://localhost:8000/static/mayun.png'"</span> <span class="attr">alt</span>=<span class="string">""</span> @<span class="attr">click</span>=<span class="string">"gitee_login"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">//第三方登录--&gt;gitee登录</span></span></span><br><span class="line">        gitee_login()&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> client_id = <span class="string">'8778f21baf13e5a37d2d5d74b66dc74b2716d4f44d18bed2f08f02c229142812'</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> back = <span class="string">'http://localhost:8000/gitee_back'</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> url = <span class="string">'https://gitee.com/oauth/authorize?client_id='</span>+client_id+<span class="string">'&amp;redirect_uri='</span>+back+<span class="string">'&amp;response_type=code'</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.location.href = url</span></span><br><span class="line">        &#125;,</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.获取code来换取access_token</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gitee三方登录</span></span><br><span class="line">url:    path(<span class="string">'gitee_back'</span>,Gitee_Back.as_view()),    <span class="comment">#gitee回调</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gitee_Back</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        code = request.GET.get(<span class="string">'code'</span>)</span><br><span class="line">        print(code)</span><br><span class="line">        redirect_uri = <span class="string">'http://localhost:8000/gitee_back'</span></span><br><span class="line">        <span class="comment"># url = 'https://gitee.com/oauth/authorize?client_id='+ CLIENT_ID +'&amp;redirect_uri=' + redirect_uri +'&amp;response_type=code'</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'client_id'</span>:CLIENT_ID,</span><br><span class="line">            <span class="string">'client_secret'</span>:CLIENT_SECRET,</span><br><span class="line">            <span class="string">'redirect_uri'</span>:redirect_uri,</span><br><span class="line">            <span class="string">'code'</span>:code,</span><br><span class="line">            <span class="string">'grant_type'</span>: <span class="string">'authorization_code'</span></span><br><span class="line">        &#125;</span><br><span class="line">        url = <span class="string">'https://gitee.com/oauth/token?grant_type=authorization_code&amp;code='</span>+code+<span class="string">'&amp;client_id='</span>+ CLIENT_ID +<span class="string">'&amp;redirect_uri='</span>+ redirect_uri +<span class="string">'&amp;client_secret='</span>+CLIENT_SECRET</span><br><span class="line">        res = requests.post(url=url,data=data)</span><br><span class="line">        print(res.json())</span><br></pre></td></tr></table></figure><p>7.点击开发文档，API文档，用户账户，获取授权用户资料，申请授权<br><img src="/img/gitee/gitee%E7%99%BB%E5%BD%952.png" alt="根据code换取access_token"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接上</span></span><br><span class="line">access_token = res.json()[<span class="string">'access_token'</span>]<span class="comment">#获取token</span></span><br><span class="line">token_uri = <span class="string">'https://gitee.com/api/v5/user?access_token='</span> +access_token</span><br><span class="line">res = requests.get(url=token_uri)</span><br><span class="line">print(res.json())</span><br><span class="line">user_id = <span class="string">''</span></span><br><span class="line">username = str(res.json()[<span class="string">'name'</span>])</span><br><span class="line">user = User.objects.filter(username=username).first()</span><br><span class="line"><span class="keyword">if</span> user:</span><br><span class="line">    <span class="comment">#表示曾经登陆过</span></span><br><span class="line">    user_id= int(res.json()[<span class="string">'id'</span>])</span><br><span class="line">    user.username = username</span><br><span class="line">    print(<span class="string">'已经登录过,id是%s,名字是%s'</span>%(user.id,user.username))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    user = User(username=username,id=int(res.json()[<span class="string">'id'</span>]),password=make_password(<span class="string">""</span>))</span><br><span class="line">    user.save()</span><br><span class="line">    user_id = user.id</span><br><span class="line">    print(<span class="string">'第一次注册，id是%s,名字是%s'</span>%(user.id,user.username))</span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">'http://localhost:8080/?user_id='</span>+str(user_id)+<span class="string">'&amp;username='</span>+username)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;VOLANTIS博客的搭建&#39;</title>
      <link href="/2020/06/05/Blog/VOLANTIS%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/06/05/Blog/VOLANTIS%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>站点配置_config.yml是你的博客设置<br><br><br>主题配置_config.yml是你的博客主题设置</p><h3 id="配置博客主题为VOLANTIS"><a href="#配置博客主题为VOLANTIS" class="headerlink" title="配置博客主题为VOLANTIS"></a>配置博客主题为VOLANTIS</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在站点配置_config.yml中修改</span></span><br><span class="line"><span class="string">blog/_config.yml</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">volantis</span></span><br></pre></td></tr></table></figure><h3 id="配置博客主题标题"><a href="#配置博客主题标题" class="headerlink" title="配置博客主题标题"></a>配置博客主题标题</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在站点配置_config.yml中修改</span></span><br><span class="line"><span class="string">blog/_config.yml</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">你博客主题名称</span></span><br></pre></td></tr></table></figure><h3 id="front-matter"><a href="#front-matter" class="headerlink" title="front-matter"></a>front-matter</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">cover:</span> <span class="literal">true</span><span class="string">/false</span> <span class="comment">#设置封面</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">---</span> <span class="comment">#参考资料</span></span><br><span class="line"><span class="attr">references:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Apple</span> <span class="string">Developer</span> <span class="string">Documentation</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://developer.apple.com/documentation/</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;jieba库的安装使用&#39;</title>
      <link href="/2020/06/04/Blog/jieba%E5%BA%93%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/06/04/Blog/jieba%E5%BA%93%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>jieba库的安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jieba</span><br></pre></td></tr></table></figure><p><img src="/img/python/jieba%E5%BA%93%E7%9A%84%E4%B8%8B%E8%BD%BD.png" alt="jieba库的安装"></p><h3 id="jieba库的使用"><a href="#jieba库的使用" class="headerlink" title="jieba库的使用"></a>jieba库的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"></span><br><span class="line">data = <span class="string">"Python 是一种解释型、面向对象、动态数据类型的高级程序设计语言。"</span> \</span><br><span class="line">       <span class="string">"Python 由 Guido van Rossum 于 1989 年底发明，第一个公开发行版发行于 1991 年。"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取标签</span></span><br><span class="line"><span class="keyword">for</span> keyword,weight <span class="keyword">in</span> jieba.analyse.extract_tags(data,withWeight=<span class="literal">True</span>):</span><br><span class="line">    print(<span class="string">'%s:%s'</span> % (keyword,weight))</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出内容</span></span><br><span class="line"><span class="comment"># Building prefix dict from the default dictionary ...</span></span><br><span class="line"><span class="comment"># Loading model from cache C:\Users\10186\AppData\Local\Temp\jieba.cache</span></span><br><span class="line"><span class="comment"># Loading model cost 0.878 seconds.</span></span><br><span class="line"><span class="comment"># Prefix dict has been built successfully.</span></span><br><span class="line"><span class="comment"># Python:1.1385492859904762</span></span><br><span class="line"><span class="comment"># 数据类型:0.585297130452381</span></span><br><span class="line"><span class="comment"># Guido:0.5692746429952381</span></span><br><span class="line"><span class="comment"># van:0.5692746429952381</span></span><br><span class="line"><span class="comment"># Rossum:0.5692746429952381</span></span><br><span class="line"><span class="comment"># 1989:0.5692746429952381</span></span><br><span class="line"><span class="comment"># 1991:0.5692746429952381</span></span><br><span class="line"><span class="comment"># 发行版:0.5270221099</span></span><br><span class="line"><span class="comment"># 面向对象:0.5067895768571429</span></span><br><span class="line"><span class="comment"># 程序设计:0.44264321266619044</span></span><br><span class="line"><span class="comment"># 发明:0.31970364912190474</span></span><br><span class="line"><span class="comment"># 动态:0.3195238865542857</span></span><br><span class="line"><span class="comment"># 高级:0.3114256070914286</span></span><br><span class="line"><span class="comment"># 语言:0.29349988448285713</span></span><br><span class="line"><span class="comment"># 第一个:0.28425680430714284</span></span><br><span class="line"><span class="comment"># 解释:0.2720391527752381</span></span><br><span class="line"><span class="comment"># 年底:0.2701318006847619</span></span><br><span class="line"><span class="comment"># 公开:0.26735277138999997</span></span><br><span class="line"><span class="comment"># 发行:0.22793990734714284</span></span><br><span class="line"><span class="comment"># 一种:0.19674458076142856</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;无限极分类&#39;</title>
      <link href="/2020/06/03/Blog/%E6%97%A0%E9%99%90%E6%9E%81%E5%88%86%E7%B1%BB/"/>
      <url>/2020/06/03/Blog/%E6%97%A0%E9%99%90%E6%9E%81%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>什么是无限极分类呢？</p><p>无限极分类简单点说就是一个类可以分成多个子类，然后一个子类又可以分另外多个子类这样无限分下去，<br>就好象windows可以新建一个文件夹，然后在这个文件夹里又可以建一些个文件夹，在文件夹底下还可以建一些文件夹一样.</p><p>无限极分类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">衣服</span><br><span class="line">    上衣</span><br><span class="line">        短袖</span><br><span class="line">        卫衣</span><br><span class="line">    裤子</span><br><span class="line">        牛仔裤</span><br><span class="line">        休闲裤</span><br><span class="line">    鞋子</span><br><span class="line">        运动鞋</span><br><span class="line">        休闲鞋</span><br></pre></td></tr></table></figure><p>无限极分类应用场景很广泛，例：<br>    帖子的回复功能<br>    课程的目录章节</p><h3 id="基于python-结合django-vue实现无限极分类-递归层级结构"><a href="#基于python-结合django-vue实现无限极分类-递归层级结构" class="headerlink" title="基于python,结合django+vue实现无限极分类(递归层级结构)"></a>基于python,结合django+vue实现无限极分类(递归层级结构)</h3><p>在myapp中model.py文件下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cate</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment">#id是主键，自增</span></span><br><span class="line"><span class="comment">#分类名称</span></span><br><span class="line">name = models.CharField(max_length=<span class="number">200</span>,null=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#父级分类id</span></span><br><span class="line">pid = models.IntegerField()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">db_table = <span class="string">'cate'</span></span><br></pre></td></tr></table></figure><p>数据库配置数据<br><img src="/img/%E7%AE%97%E6%B3%95/%E6%97%A0%E9%99%90%E6%9E%81%E5%88%86%E7%B1%BB.png" alt="无限极分类数据库配置"></p><p>使用drf框架进行序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Cate</span><br><span class="line"></span><br><span class="line"><span class="comment">#序列化类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CateSer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Cate</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></table></figure><p>写一个用来进行递归的方法，进行层级结构划分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Xtree</span><span class="params">(datas)</span>:</span></span><br><span class="line">    lists = []</span><br><span class="line">    tree = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> datas:</span><br><span class="line">        tree[item[<span class="string">'id'</span>]] = item</span><br><span class="line">        print(tree[item[<span class="string">'id'</span>]])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> datas:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> i[<span class="string">'pid'</span>]:</span><br><span class="line">            root = tree[i[<span class="string">'id'</span>]]</span><br><span class="line">            lists.append(root)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parent_id = i[<span class="string">'pid'</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'child'</span> <span class="keyword">not</span> <span class="keyword">in</span> tree[parent_id]:</span><br><span class="line">                tree[parent_id][<span class="string">'child'</span>] = []</span><br><span class="line">            tree[parent_id][<span class="string">'child'</span>].append(tree[i[<span class="string">'id'</span>]])</span><br><span class="line">    <span class="keyword">return</span> lists</span><br></pre></td></tr></table></figure><p>写视图接口并分配路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .myser <span class="keyword">import</span> CateSer</span><br><span class="line"><span class="keyword">from</span> .cengji <span class="keyword">import</span> Xtree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归层级分类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTree</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        cates = Cate.objects.all()</span><br><span class="line">        ser = CateSer(cates,many=<span class="literal">True</span>)</span><br><span class="line">        trees = Xtree(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(trees)</span><br><span class="line"><span class="comment">#分配url</span></span><br><span class="line"><span class="comment"># path('tree/',MyTree.as_view()),</span></span><br></pre></td></tr></table></figure><p>测试接口,以json形式返回层级结构数据<br><img src="/img/%E7%AE%97%E6%B3%95/%E6%97%A0%E9%99%90%E6%9E%81%E5%88%86%E7%B1%BB%E5%90%8E%E7%AB%AF%E5%B1%95%E7%A4%BA%E6%95%B0%E6%8D%AE.png" alt="后端接口返回数据"></p><h3 id="前端使用递归组件渲染"><a href="#前端使用递归组件渲染" class="headerlink" title="前端使用递归组件渲染"></a>前端使用递归组件渲染</h3><p>所谓递归组件: 就是组件可以在它们自己的模板中调用自身，<br>不过它们只能通过 name 选项来做这件事，例如给组件设置属性 name: ‘Reply’，<br>然后在模板中就可以使用 Reply 调用自己进行递归调用了</p><p>设置Reply.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[data.id==0 ? 'root':'','reply']"</span>&gt;</span></span><br><span class="line">                &#123;&#123;data.name&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">"data.child &amp;&amp; data.child.length&gt;0"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Reply</span> <span class="attr">v-for</span>=<span class="string">"c in data.child"</span> <span class="attr">:key</span>=<span class="string">"c.id"</span> <span class="attr">:data</span>=<span class="string">"c"</span>&gt;</span><span class="tag">&lt;/<span class="name">Reply</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name:<span class="string">"Reply"</span>,<span class="comment">//递归需要设置name属性，才能在模板中调用自身</span></span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    props:[<span class="string">'data'</span>],</span></span><br><span class="line">    mounted() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.reply</span>&#123;</span></span><br><span class="line">    padding-left: 4px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-left</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#eee</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">ul&#123;</span><br><span class="line">    padding-left: 20px;</span><br><span class="line">    list-style: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.root</span>&#123;</span></span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在其他组件调用Reply.vue,配置前端url</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">import cengji from '@/components/cengji'</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    path:'/cengji',</span></span><br><span class="line"><span class="comment">    name:'cengji',</span></span><br><span class="line"><span class="comment">    component:cengji</span></span><br><span class="line"><span class="comment">&#125;,</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Reply</span> <span class="attr">:data</span>=<span class="string">"data"</span>&gt;</span><span class="tag">&lt;/<span class="name">Reply</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// import &#123;config,formatXml&#125; from '../config'</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// import mh_test from './mh_test.vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Reply <span class="keyword">from</span> <span class="string">'./Reply'</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// import md5 from 'js-md5'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            online:0,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        Reply</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.get_token()</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        get_token()&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.axios(&#123;</span></span><br><span class="line"><span class="actionscript">                url:<span class="string">"http://localhost:8000/tree/"</span>,</span></span><br><span class="line"><span class="actionscript">                method:<span class="string">"GET"</span></span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(resp)</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> tree = &#123;<span class="string">'id'</span>:<span class="number">0</span>,name:<span class="string">"123"</span>&#125;</span></span><br><span class="line"><span class="actionscript">                tree[<span class="string">'child'</span>] = resp.data</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.data = tree</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.data)</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.on</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#cdcbff</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.off</span> &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span>: <span class="selector-id">#fefdff</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前端结果展示<br><img src="/img/%E7%AE%97%E6%B3%95/%E5%89%8D%E7%AB%AF%E5%B1%95%E7%A4%BA%E6%95%B0%E6%8D%AE.png" alt="无限极分类前端结果展示"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;算法-斐波那契数列&#39;</title>
      <link href="/2020/06/03/Blog/%E7%AE%97%E6%B3%95-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
      <url>/2020/06/03/Blog/%E7%AE%97%E6%B3%95-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递归的方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）</p><h3 id="递归斐波那契数列"><a href="#递归斐波那契数列" class="headerlink" title="递归斐波那契数列"></a>递归斐波那契数列</h3><p>(写法最简洁，但是效率最低，会出现大量的重复计算，时间复杂度O（1.618^n）,而且最深度1000)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_func</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="comment"># 定义出口</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> func(n<span class="number">-1</span>)+func(n<span class="number">-2</span>)  <span class="comment">#第一位数和第二位数相加的结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    print(fib_func(i),end=<span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1 1 2 3 5 8 13 21 34 55</span></span><br></pre></td></tr></table></figure><h3 id="生成器斐波那契数列"><a href="#生成器斐波那契数列" class="headerlink" title="生成器斐波那契数列"></a>生成器斐波那契数列</h3><p>带有yield的函数都被看成生成器，生成器是可迭代对象，且具备<strong>iter</strong> 和 <strong>next</strong>方法， 可以遍历获取元素<br>python要求迭代器本身也是可迭代的，所以我们还要为迭代器实现<strong>iter</strong>方法，而<strong>iter</strong>方法要返回一个迭代器，迭代器自身正是一个迭代器，所以迭代器的<strong>iter</strong>方法返回自身即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_func</span><span class="params">(max)</span>:</span></span><br><span class="line">    n,a,b = <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b = b,a+b</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">fib_list = fib_func(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fib_list:      <span class="comment">#使用for循环遍历</span></span><br><span class="line">    print(i,end=<span class="string">" "</span>)</span><br><span class="line"><span class="comment">#1 1 2 3 5 8 13 21 34 55</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;redis命令即使用&#39;</title>
      <link href="/2020/06/03/Blog/redis/"/>
      <url>/2020/06/03/Blog/redis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Redis的安装"><a href="#Redis的安装" class="headerlink" title="Redis的安装"></a>Redis的安装</h3><p>Reids官网：<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Redis的安装：</span></span><br><span class="line"><span class="number">1</span>).下载地址：可以在官网下载最新版本</span><br><span class="line">  <span class="number">2</span>).在该文件夹下输入cmd,进入黑窗口：<span class="string">'redis-server ./redis.windows.conf'</span>,可以看到运行效果图。基于C/S架构</span><br><span class="line">    <span class="comment">#如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略,是默认的。</span></span><br><span class="line">    <span class="number">3</span>).运行：另启动一个cmd窗口，输入<span class="string">'redis-cli'</span>,当看到<span class="string">'127.0.0.1:6379'</span>时，就可以启动成功了</span><br><span class="line">    <span class="comment">#注意：原来的reids-server窗口不能关闭，不然就无法访问服务端了。</span></span><br><span class="line">    <span class="number">4</span>).<span class="string">'127.0.0.1:6379'</span>:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>是本机ip，<span class="number">6379</span>是Reids的服务端口，输入ping命令，返回PONG，就证明成功了。</span><br></pre></td></tr></table></figure><h3 id="Redis的数据类型"><a href="#Redis的数据类型" class="headerlink" title="Redis的数据类型"></a>Redis的数据类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Redis的数据类型：</span></span><br><span class="line">Redis支持五种数据类型：</span><br><span class="line">        string（字符串）  <span class="comment">#二进制安全，可以包含任何数据，最大存储512MB</span></span><br><span class="line">        hash（哈希）   <span class="comment">#键值对集合，适用于存储对象。</span></span><br><span class="line">        list（列表）   <span class="comment">#简单的字符串列表，按照插入顺序排序，</span></span><br><span class="line">        set（集合）    <span class="comment">#无序集合，时间复杂O(1),元素唯一，存在返回0</span></span><br><span class="line">        zset(sorted set：有序集合)    <span class="comment">#有序集合，不能重复，不同的是每个元素都会关联一个double类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序。</span></span><br></pre></td></tr></table></figure><h3 id="Redis的定义"><a href="#Redis的定义" class="headerlink" title="Redis的定义"></a>Redis的定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Redis的定义：</span></span><br><span class="line">redis是一个key-value存储系统。redis的操作都是原子性的，redis支持各种不同方式的排序，redis的数据都是缓存在内存中。redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</span><br></pre></td></tr></table></figure><h3 id="Redis的优势"><a href="#Redis的优势" class="headerlink" title="Redis的优势"></a>Redis的优势</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#redis介绍：</span></span><br><span class="line">    <span class="number">1</span>).redis是使用C语言开发，支持网络，可基于内存亦可持久化的日志型key-value数据库，为开发语言提供多种API</span><br><span class="line">    <span class="number">2</span>).redis存储数据，可以将内存中的数据保存在磁盘中，重启可以再次加载。</span><br><span class="line">    <span class="number">3</span>).redis分为几种类型</span><br><span class="line">    4).redis支持数据备份，master-slave模式的数据备份--&gt;master:主人，slave：奴隶--&gt;主从模式</span><br><span class="line"></span><br><span class="line"><span class="comment">#Redis的优势：</span></span><br><span class="line">    <span class="number">1</span>).性能极高 – Redis能读的速度是<span class="number">110000</span>次/s,写的速度是<span class="number">81000</span>次/s 。</span><br><span class="line">    <span class="number">2</span>).丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</span><br><span class="line">    <span class="number">3</span>).原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</span><br><span class="line">    <span class="number">4</span>).丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</span><br><span class="line">    </span><br><span class="line"><span class="comment">#redis的应用场景：</span></span><br><span class="line">    <span class="number">1</span>).用来做缓存 --- redis的所有数据是放在内存中（内存型的数据库） </span><br><span class="line">    <span class="number">2</span>).可以应用在某些特定的场景，比如社交类应用</span><br><span class="line">    <span class="number">3</span>).在一些大型的系统中，巧妙的实现一些特定的功能：购物车，session的共享</span><br></pre></td></tr></table></figure><h3 id="Redis的命令"><a href="#Redis的命令" class="headerlink" title="Redis的命令"></a>Redis的命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>).启动redis服务器：redis-server</span><br><span class="line"><span class="number">2</span>).连接redis服务器：redis-cli</span><br><span class="line"><span class="number">3</span>).远程服务执行命令：  redis-cli -h host -p port -a password</span><br><span class="line"><span class="comment">#例：连接到主机为127.0.0.1,端口为6379,密码为123的redis服务上     redis-cli -h 127.0.0.1 -p 6379 -a '123'</span></span><br><span class="line"><span class="comment">#中文乱码：redis-cli --raw</span></span><br></pre></td></tr></table></figure><h3 id="Redis-keys命令"><a href="#Redis-keys命令" class="headerlink" title="Redis keys命令"></a>Redis keys命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>).set key value   添加key值    </span><br><span class="line"><span class="number">2</span>).get key         获取key值</span><br><span class="line"><span class="number">3</span>).<span class="keyword">del</span> key         key存在，删除key值</span><br><span class="line"><span class="number">4</span>).dump key     序列化给定key，返回被序列化得值</span><br><span class="line"><span class="number">5</span>).exists key   检查key是否存在</span><br><span class="line"><span class="number">6</span>).expire key seconds(秒数)    给key设置过期时间，以秒计时</span><br><span class="line"><span class="number">7</span>).keys */key   获取key名称</span><br><span class="line"><span class="number">8</span>).persist key       取消key的过期时间，key将永久保持</span><br><span class="line"><span class="number">9</span>).ttl key  以秒为单位，返回key的剩余过期时间</span><br><span class="line"><span class="number">10</span>).randomkey从数据库随机返回一个key</span><br><span class="line"><span class="number">11</span>).rename key newkey修改key名字</span><br><span class="line"><span class="number">12</span>).type key返回key所储存的值的类型</span><br></pre></td></tr></table></figure><h3 id="Redis-string命令"><a href="#Redis-string命令" class="headerlink" title="Redis string命令"></a>Redis string命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>).getrange key start end返回key中value的值，从<span class="number">0</span>开始</span><br><span class="line"><span class="number">2</span>).getset key value将oldvalue改为newvalue，返回oldvalue</span><br><span class="line"><span class="number">3</span>).mget key1 key2 key3获取多个key值</span><br><span class="line"><span class="number">4</span>).strlen key返回value的长度</span><br><span class="line"><span class="number">5</span>).mst key1 value1 key2 value2      同时设置一个或多个key-value对</span><br><span class="line"><span class="number">6</span>).append key value 将指定的 value 追加到该 key 原来值（value）的末尾。</span><br><span class="line"><span class="number">7</span>).incr key    将key中储存的数字值+<span class="number">1</span></span><br><span class="line"><span class="number">8</span>).decr key将key中储存的数字值<span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="Redis-hash命令"><a href="#Redis-hash命令" class="headerlink" title="Redis hash命令"></a>Redis hash命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> (key=hash表，field=字段，value=值)</span><br><span class="line">Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象</span><br><span class="line">    <span class="number">1</span>).hmset key filed1 value1 field2 value2   创建一个hash表key，指定字段和value</span><br><span class="line">   <span class="number">2</span>).hdel key field1 field2删除一个或多个hash表</span><br><span class="line">    <span class="number">3</span>).hexists key field1查看hash表中，指定field是否存在</span><br><span class="line">    <span class="number">4</span>).hget key field获取hash表指定字段得值</span><br><span class="line">    <span class="number">5</span>).hgetall key获取hash表所有字段和值</span><br><span class="line">    <span class="number">6</span>).hkeys key  获取hash表中的字段</span><br><span class="line">    <span class="number">7</span>).hlen key获取hash表中字段的数量</span><br><span class="line">    <span class="number">8</span>).hmget key field1 field2获取hash表中给定字段的值</span><br><span class="line">    <span class="number">9</span>).hset key field value将hash表中字段得值设为value</span><br><span class="line">    <span class="number">10</span>).hvals key 获取hash表中所有值</span><br></pre></td></tr></table></figure><h3 id="Redis-list命令"><a href="#Redis-list命令" class="headerlink" title="Redis list命令"></a>Redis list命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</span><br><span class="line">    <span class="number">1</span>).lpush key value1 value2 创建一个key列表，插入值</span><br><span class="line">   <span class="number">2</span>).lrange key start end查询key列表，从start到end之间的value</span><br><span class="line">    <span class="number">3</span>).blpop key timeout删除第一个元素，</span><br><span class="line">    <span class="number">4</span>).brpop key timeout删除最后一个元素</span><br><span class="line">    <span class="number">5</span>).lindex key index根据索引获取列表中的元素</span><br><span class="line">    <span class="number">6</span>).llen key 获取列表长度</span><br><span class="line">    <span class="number">7</span>).lpop key删除并获取第一个元素</span><br><span class="line">    <span class="number">8</span>).lpush key value1 value2将一个或多个值插入列表头部</span><br><span class="line">    <span class="number">9</span>).lpushx key value将一个值插入到已存在的列表头部</span><br><span class="line">    <span class="number">10</span>).rpop key删除列表的最后一个元素，返回删除的元素</span><br></pre></td></tr></table></figure><h3 id="Redis-set命令"><a href="#Redis-set命令" class="headerlink" title="Redis set命令"></a>Redis set命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Redis的Set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</span><br><span class="line">Redis中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(<span class="number">1</span>)。</span><br><span class="line">    <span class="number">1</span>).sadd key value1 value2创建一个集合，添加一个或多个值</span><br><span class="line">    <span class="number">2</span>).scard key   获取集合的值的数量</span><br><span class="line">    <span class="number">3</span>).sinter key1 key2返回给定集合的交集</span><br><span class="line">    <span class="number">4</span>).sismember key value判断value是否在集合key中</span><br><span class="line">    <span class="number">5</span>).smembers key    返回集合中的所有value</span><br><span class="line">    <span class="number">6</span>).smove key1 key2 value将value从key1集合移动到key2集合</span><br><span class="line">    <span class="number">7</span>).spop keycount随机删除key集合中的count个元素</span><br><span class="line">    <span class="number">8</span>).srandmember key count随机返回key集合中的count个元素</span><br><span class="line">    <span class="number">9</span>).srem key value1 value2删除集合中的value元素</span><br></pre></td></tr></table></figure><h3 id="Redis-set命令-1"><a href="#Redis-set命令-1" class="headerlink" title="Redis set命令"></a>Redis set命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。</span><br><span class="line">不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</span><br><span class="line">有序集合的成员是唯一的,但分数(score)却可以重复。</span><br><span class="line">集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(<span class="number">1</span>)。</span><br><span class="line">  <span class="number">1</span>).zadd key(有序集合) 分数 value创建一个集合，并给出分数</span><br><span class="line">  <span class="number">2</span>).zadd key start end withscore(分数)     查询集合从start到end之间的value，带分数</span><br><span class="line">  <span class="number">3</span>).zcard key   获取有序集合和数量</span><br><span class="line">  <span class="number">4</span>).zcount key min max 计算在有序集合中指定区间分数的数量</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;递归算法&#39;</title>
      <link href="/2020/06/03/Blog/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/"/>
      <url>/2020/06/03/Blog/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="有关递归算法的小故事"><a href="#有关递归算法的小故事" class="headerlink" title="有关递归算法的小故事"></a>有关递归算法的小故事</h2><p>从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢?…</p><h3 id="什么是函数嵌套调用？什么是递归？"><a href="#什么是函数嵌套调用？什么是递归？" class="headerlink" title="什么是函数嵌套调用？什么是递归？"></a>什么是函数嵌套调用？什么是递归？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">函数内部是可以调用其他函数的，这种调用就是函数的嵌套调用。</span><br><span class="line"></span><br><span class="line">递归就是&#39;函数在内部直接或间接调用自己本身&#39;。</span><br></pre></td></tr></table></figure><h3 id="使用递归的注意事项"><a href="#使用递归的注意事项" class="headerlink" title="使用递归的注意事项"></a>使用递归的注意事项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.必须有明确的退出条件</span><br><span class="line">2.每次进入更深一层递归时，问题规模比上次递归都有所减少</span><br><span class="line">3.递归到一定层次就会出现结果</span><br><span class="line">4.递归效率不高，递归层数过多会导致栈溢出(栈内存不够用)</span><br><span class="line">5.栈溢出默认是1000,但是当递归到998就已经报错了。</span><br></pre></td></tr></table></figure><h3 id="栈溢出错误："><a href="#栈溢出错误：" class="headerlink" title="栈溢出错误："></a>栈溢出错误：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">栈溢出错误：RecursionError: maximum recursion depth exceeded in comparison</span><br></pre></td></tr></table></figure><h3 id="解决栈溢出的办法："><a href="#解决栈溢出的办法：" class="headerlink" title="解决栈溢出的办法："></a>解决栈溢出的办法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改递归深度的值</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><h3 id="关于栈溢出例子："><a href="#关于栈溢出例子：" class="headerlink" title="关于栈溢出例子："></a>关于栈溢出例子：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">2000</span>) <span class="comment">#设置最大递归深度是2000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digui_func</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> n + sum_digui_func(n<span class="number">-1</span>)</span><br><span class="line"><span class="comment">#当我们运行到1997是，还是可以运行的。到1998就报错，所以可以认为比设置最大递归深度-3就是可以运行的。</span></span><br><span class="line">print(sum_digui_func(<span class="number">1997</span>))</span><br></pre></td></tr></table></figure><p>说到递归就要说下逆向思维，在大部分情况下，人们所想的是都是片面，也就是有局限性。逆向思维就是突破这个局限性，从另一方面去想怎么解决这个事情。 </p><h3 id="逆向思维小故事"><a href="#逆向思维小故事" class="headerlink" title="逆向思维小故事"></a>逆向思维小故事</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">关于司马光砸缸：</span><br><span class="line">    讲述了司马光砸坏水缸，救出同伴的古诗。</span><br><span class="line">    在大部分情况下的人，当时所想的是如何让人脱离水，从而救出人。</span><br><span class="line">    我们通过逆向思维，想到也可以使水脱离人，从而脱救，于是把水缸砸坏，使水流光从而进行救助。</span><br></pre></td></tr></table></figure><h3 id="递归求和"><a href="#递归求和" class="headerlink" title="递归求和"></a>递归求和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_func</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="comment">#设定出口，退出条件</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment">#调用自身，每次和自身-1相加</span></span><br><span class="line">    <span class="keyword">return</span> n + sum_func(n<span class="number">-1</span>)</span><br><span class="line">print(sum_func(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h3 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ride_func</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="comment">#设定出口，退出条件</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="comment">#调用自身，每次和自身-1相乘</span></span><br><span class="line">    <span class="keyword">return</span> n + ride_func(n<span class="number">-1</span>)</span><br><span class="line">print(ride_func(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;设计模式之工厂模式&#39;</title>
      <link href="/2020/06/02/Blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/06/02/Blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>工厂模式是一个在软件开发中用来创建对象的设计模式。是一个在软件开发中用来创建对象的设计模式。</p><p>工厂模式就是建立对象的类就是一个工厂，需要被建立的对象就是一个个产品；在工厂中加工的产品，使用产品的人不在乎产品是如何生产出来的。<br>从开发角度来说，有效降低了模块之间的耦合度</p><p>简单工厂的作用是实例化对象，而不需要客户了解这个对象属于哪个具体的子类。简单工厂实例化的类具有相同的接口或者基类，在子类比较固定并不需要扩展时，可以使用简单工厂。如数据库生产工厂就是简单工厂的一个应用采用简单工厂的优点是可以使用户根据参数获得对应的类实例，避免了直接实例化类，降低了耦合性；缺点是可实例化的类型在编译期间已经被确定，如果增加新类型，则需要修改工厂，不符合OCP（开闭原则）的原则。简单工厂需要知道所有要生成的类型，当子类过多或者子类层次过多时不适合使用。</p><p>与django结合实现工厂模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiBo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'使用微博进行第三方登录'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DingDing</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'使用钉钉进行第三方登录'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gitee</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'使用马云进行第三方登录'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化类</span></span><br><span class="line">weibo = WeiBo()</span><br><span class="line">dingding = DingDing()</span><br><span class="line">gitee = Gitee()</span><br><span class="line"></span><br><span class="line"><span class="comment">#简单工厂模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span>:</span></span><br><span class="line">    <span class="comment">#这里使用静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Login</span><span class="params">(name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">'weibo'</span>:</span><br><span class="line">            <span class="keyword">return</span> WeiBo()</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">'dingding'</span>:</span><br><span class="line">            <span class="keyword">return</span> DingDing()</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">'gitee'</span>:</span><br><span class="line">            <span class="keyword">return</span> Gitee()</span><br><span class="line"></span><br><span class="line">factory = Factory.Login(<span class="string">"weibo"</span>)</span><br><span class="line"><span class="comment">#当name==weibo，输出使用微博进行第三方登录</span></span><br><span class="line"><span class="comment">#当name==dingding，输出使用使用钉钉进行第三方登录</span></span><br><span class="line"><span class="comment">#当name==gitee，输出使用马云进行第三方登录</span></span><br><span class="line">print(factory)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;schedule的定时任务&#39;</title>
      <link href="/2020/06/01/Blog/celery%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2020/06/01/Blog/celery%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>启动定时任务命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在和manage.py文件同级目录下：</span><br><span class="line">    celery -A  mydjango beat -l info</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">启动定时任务需要启动三个服务</span><br><span class="line"><span class="number">1.</span>django后台服务：python manage.py runserver</span><br><span class="line"><span class="number">2.</span>selery后台服务：celery worker -A mydjango -l info -P eventlet</span><br><span class="line"><span class="number">3.</span>定时任务服务：celery -A  mydjango beat -l info</span><br></pre></td></tr></table></figure><h3 id="启动定时任务出现错误"><a href="#启动定时任务出现错误" class="headerlink" title="启动定时任务出现错误"></a>启动定时任务出现错误</h3><p><img src="/img/celery/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E9%94%99%E8%AF%AF.png" alt="定时任务错误"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Pidfile (celerybeat.pid) already exists.</span><br><span class="line">Seems we<span class="string">'re already running? (pid: 29396)</span></span><br></pre></td></tr></table></figure><p>这个错误就是说启动服务的文件夹里有启动文件celerybeat.pid了，把他删掉就可以了，记得再次重启</p><h3 id="在settings中配置"><a href="#在settings中配置" class="headerlink" title="在settings中配置"></a>在settings中配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定时任务</span></span><br><span class="line"><span class="comment">#导入celery定时模块</span></span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"><span class="comment">#导入时间模块</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line">CELERY_BEAT_SCHEDULE = &#123;</span><br><span class="line">    <span class="comment">#定义定时任务</span></span><br><span class="line">    <span class="string">'celery_work'</span>:&#123;</span><br><span class="line">        <span class="string">'task'</span>:<span class="string">'myapp.tasks.async_test'</span>,   <span class="comment">#任务名称,解析字符串寻找</span></span><br><span class="line">        <span class="string">'schedule'</span>:timedelta(seconds=<span class="number">7200</span>)  <span class="comment">#定时时长</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/celery/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.png" alt="定时任务"></p><h3 id="结合Django使用一个小案例：每1分钟提交一次log文件"><a href="#结合Django使用一个小案例：每1分钟提交一次log文件" class="headerlink" title="结合Django使用一个小案例：每1分钟提交一次log文件"></a>结合Django使用一个小案例：每1分钟提交一次log文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">在settings配置</span><br><span class="line"><span class="comment">#定时任务</span></span><br><span class="line"><span class="comment">#导入celery定时模块</span></span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"><span class="comment">#导入时间模块</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line">CELERY_BEAT_SCHEDULE = &#123;</span><br><span class="line">    <span class="comment">#定义定时任务</span></span><br><span class="line">    <span class="string">'celery_work'</span>:&#123;</span><br><span class="line">        <span class="string">'task'</span>:<span class="string">'myapp.tasks.async_test'</span>,   <span class="comment">#任务名称</span></span><br><span class="line">        <span class="string">'schedule'</span>:timedelta(seconds=<span class="number">60</span>)  <span class="comment">#定时时长，,1分钟</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">创建一个task.py文件</span><br><span class="line"><span class="keyword">from</span> celery.task <span class="keyword">import</span> task</span><br><span class="line"><span class="comment">#自定义异步任务</span></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'异步任务'</span>)</span><br><span class="line">    <span class="comment">#文件名</span></span><br><span class="line">    filename = <span class="string">'celeray.log'</span> </span><br><span class="line">    <span class="comment">#追加形式写入</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment">#写入文件时间</span></span><br><span class="line">        f.write(str(datetime.datetime.now())+<span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'123123'</span></span><br></pre></td></tr></table></figure><p><img src="/img/celery/%E5%AE%9A%E6%97%B61%E5%88%86%E9%92%9F.png" alt="定时启动"><br><img src="/img/celery/log%E6%96%87%E4%BB%B6%E8%AE%B0%E5%BD%95%E6%97%B6%E9%97%B4.png" alt="log文件记录时间"></p>]]></content>
      
      
      <categories>
          
          <category> celery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;关于使用celery执行post请求出现启动服务错误的问题&#39;</title>
      <link href="/2020/06/01/Blog/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8celery%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/06/01/Blog/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8celery%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>启动celery命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery worker -A celery_task -l info -P eventlet</span><br></pre></td></tr></table></figure><p><img src="/img/celery/celery1.png" alt="selery"></p><h3 id="在django中使用restful风格做开发时，发现都不能发送"><a href="#在django中使用restful风格做开发时，发现都不能发送" class="headerlink" title="在django中使用restful风格做开发时，发现都不能发送"></a>在django中使用restful风格做开发时，发现都不能发送</h3><p>在使用post方法的时候，因为我的celery后台一直是启动的，所以不运行task中封装的函数，<br>然后一直在找解决办法，于是我重启celery后台，会出现一个错误<br><img src="/img/celery/celery%E9%94%99%E8%AF%AF.png" alt="selery"></p><p>该错误描述：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: wrap_socket() got an unexpected keyword argument <span class="string">'_context'</span></span><br></pre></td></tr></table></figure><h3 id="于是找了解决办法，换个启动命令"><a href="#于是找了解决办法，换个启动命令" class="headerlink" title="于是找了解决办法，换个启动命令"></a>于是找了解决办法，换个启动命令</h3><p>request包的request.post发送后，传不回数据</p><p>所以，在改变服务器启动方法不要用eventlet，加个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery worker -A mydjango -l info -P=solo</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> celery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;celery异步的使用&#39;</title>
      <link href="/2020/06/01/Blog/celery%E5%BC%82%E6%AD%A5%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/06/01/Blog/celery%E5%BC%82%E6%AD%A5%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>使用celery异步需要的包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用的版本：</span><br><span class="line">    pip install django==<span class="number">2.0</span><span class="number">.4</span></span><br><span class="line">    pip install celery==<span class="number">4.4</span><span class="number">.2</span></span><br><span class="line">    pip install eventlet==<span class="number">0.25</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="django配置celery"><a href="#django配置celery" class="headerlink" title="django配置celery"></a>django配置celery</h2><h3 id="在settings中配置"><a href="#在settings中配置" class="headerlink" title="在settings中配置"></a>在settings中配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#代理url，异步任务代理</span></span><br><span class="line">CELERY_BROKER_URL = <span class="string">'redis://localhost:6379/'</span></span><br><span class="line"><span class="comment">#保存结果</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://localhost:6379/'</span></span><br><span class="line"><span class="comment">#保存类型格式，使用json</span></span><br><span class="line">CELERY_RESULT_SERIALIZER = <span class="string">'json'</span></span><br></pre></td></tr></table></figure><h3 id="在和settings同一级目录下，创建celery-py文件，进行配置文件，用来启动服务"><a href="#在和settings同一级目录下，创建celery-py文件，进行配置文件，用来启动服务" class="headerlink" title="在和settings同一级目录下，创建celery.py文件，进行配置文件，用来启动服务"></a>在和settings同一级目录下，创建celery.py文件，进行配置文件，用来启动服务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'mydjango.settings'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册Celery的APP</span></span><br><span class="line">app = Celery(<span class="string">'mydjango'</span>)</span><br><span class="line"><span class="comment"># 绑定配置文件,声明命名空间,可以在电脑任何位置启动</span></span><br><span class="line">app.config_from_object(<span class="string">'django.conf:settings'</span>, namespace=<span class="string">'CELERY'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动发现各个app下的tasks.py文件</span></span><br><span class="line">app.autodiscover_tasks()</span><br></pre></td></tr></table></figure><h3 id="在和settings同一级目录下的init-py文件下，当启动服务，加载init-py文件配置"><a href="#在和settings同一级目录下的init-py文件下，当启动服务，加载init-py文件配置" class="headerlink" title="在和settings同一级目录下的init.py文件下，当启动服务，加载init.py文件配置"></a>在和settings同一级目录下的<strong>init</strong>.py文件下，当启动服务，加载<strong>init</strong>.py文件配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</span><br><span class="line"></span><br><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载celery应用</span></span><br><span class="line">__all__ = [<span class="string">'celery_app'</span>]</span><br></pre></td></tr></table></figure><h3 id="在myapp文件夹下，创建一个tasks-py文件，自定义任务"><a href="#在myapp文件夹下，创建一个tasks-py文件，自定义任务" class="headerlink" title="在myapp文件夹下，创建一个tasks.py文件，自定义任务"></a>在myapp文件夹下，创建一个tasks.py文件，自定义任务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery.task <span class="keyword">import</span> task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义异步任务</span></span><br><span class="line"><span class="comment">#实用装饰器声明是异步任务</span></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'异步任务'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'123123'</span></span><br></pre></td></tr></table></figure><h3 id="触发异步任务队列"><a href="#触发异步任务队列" class="headerlink" title="触发异步任务队列"></a>触发异步任务队列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#调用tasks异步</span></span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> tasks</span><br><span class="line"><span class="comment">#触发异步任务视图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">celery_test</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment">#使用delay()异步任务调用</span></span><br><span class="line">    res = tasks.async_test.delay()</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'task_id'</span>:res.task_id&#125;)</span><br></pre></td></tr></table></figure><h3 id="配置url"><a href="#配置url" class="headerlink" title="配置url"></a>配置url</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> myapp.views <span class="keyword">import</span> celery_test</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment">#定义超链接路由</span></span><br><span class="line">    path(<span class="string">'celery_test/'</span>,celery_test),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="启动celery服务"><a href="#启动celery服务" class="headerlink" title="启动celery服务"></a>启动celery服务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>先启动django服务：python manage.py runserver</span><br><span class="line"><span class="number">2.</span>在manage.py文件的同级目录下，启动celery服务</span><br><span class="line"><span class="number">3.</span>以协程方式启动服务命令：celery worker -A mydjango -l info -P eventlet</span><br></pre></td></tr></table></figure><p><img src="/img/celery/celery1.png" alt="selery"></p><h3 id="实例-做邮件发送使用celery"><a href="#实例-做邮件发送使用celery" class="headerlink" title="实例:做邮件发送使用celery"></a>实例:做邮件发送使用celery</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#task中：</span></span><br><span class="line"><span class="keyword">from</span> celery.task <span class="keyword">import</span> task</span><br><span class="line"><span class="keyword">from</span> mydjango.settings <span class="keyword">import</span> MY_MAIL,MY_PASS</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> formataddr</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mail</span><span class="params">(subject,content,mailaddr)</span>:</span></span><br><span class="line">    <span class="comment">#声明邮件对象</span></span><br><span class="line">    msg = MIMEText(content,<span class="string">'plain'</span>,<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment">#设置发送方对象</span></span><br><span class="line">    msg[<span class="string">'From'</span>] = formataddr([<span class="string">'在线教育平台'</span>,MY_MAIL])</span><br><span class="line">    <span class="comment">#设置收件方对象</span></span><br><span class="line">    msg[<span class="string">'To'</span>] = formataddr([<span class="string">'尊敬的客户'</span>,mailaddr])</span><br><span class="line">    <span class="comment">#设置标题</span></span><br><span class="line">    msg[<span class="string">'Subject'</span>] = subject</span><br><span class="line">    <span class="comment">#设置smtp服务器</span></span><br><span class="line">    server = smtplib.SMTP_SSL(<span class="string">'smtp.qq.com'</span>,<span class="number">465</span>)</span><br><span class="line">    <span class="comment">#登录邮箱</span></span><br><span class="line">    server.login(MY_MAIL,MY_PASS)</span><br><span class="line">    <span class="comment">#发送邮件</span></span><br><span class="line">    server.sendmail(MY_MAIL,[mailaddr],msg.as_string())</span><br><span class="line">    <span class="comment">#关闭smtp连接，节约系统资源</span></span><br><span class="line">    server.quit()<span class="comment">#退出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在视图中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        email = request.data.get(<span class="string">'email'</span>)       <span class="comment">#获取前端用户邮件</span></span><br><span class="line">        subject = <span class="string">'亲爱的用户您好：,欢迎注册在线教育平台'</span>     <span class="comment">#邮件标题</span></span><br><span class="line">        yanzhengma = random.randint(<span class="number">1000</span>,<span class="number">9999</span>)</span><br><span class="line">        print(yanzhengma)      <span class="comment">#数字验证码</span></span><br><span class="line">        r.set(<span class="string">'email'</span>,yanzhengma,<span class="number">120</span>)               <span class="comment">#存到redis</span></span><br><span class="line">        print(<span class="number">123</span>,r.get(<span class="string">'email'</span>))</span><br><span class="line">        content = <span class="string">'欢迎注册在线教育平台，您的验证码是%s，请在2分钟内输入，失效请重新获取'</span> % yanzhengma</span><br><span class="line">        print(content)      <span class="comment">#邮件内容</span></span><br><span class="line">        mailaddr = email    <span class="comment">#给发送邮件</span></span><br><span class="line">        <span class="comment">#参数需要存放到delay(里)</span></span><br><span class="line">        send_email = tasks.mail.delay(subject, content, mailaddr)  <span class="comment">#异步发送邮件调用邮件</span></span><br><span class="line">        <span class="comment">#使用celery需要使用JsonResponse返回</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'code'</span>:<span class="number">200</span>,<span class="string">'yzm'</span>:yanzhengma,<span class="string">'send_email'</span>:send_email.task_id&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> celery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2020/05/31/Blog/git/"/>
      <url>/2020/05/31/Blog/git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>工作中的注意事项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line">    在每天工作的第一件事就是先git pull拉取线上最新的版本。</span><br><span class="line">    每天下班前要做的就是git push，将本地代码提交到线上仓库。</span><br></pre></td></tr></table></figure><h2 id="Git的下载与安装"><a href="#Git的下载与安装" class="headerlink" title="Git的下载与安装"></a>Git的下载与安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git的下载与安装:https:&#x2F;&#x2F;blog.csdn.net&#x2F;Dan_Xiao_Hui&#x2F;article&#x2F;details&#x2F;105637182</span><br></pre></td></tr></table></figure><h2 id="在Gitee上创建仓库"><a href="#在Gitee上创建仓库" class="headerlink" title="在Gitee上创建仓库"></a>在Gitee上创建仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">在Gitee上创建仓库：</span><br><span class="line">    1.点击+号，新建仓库，如图1,</span><br><span class="line">    2.编辑仓库名，仓库路径，仓库描述，公开</span><br><span class="line">    3.点击创建</span><br><span class="line"></span><br><span class="line">创建git仓库：</span><br><span class="line">    1.创建一个文件夹cangku:mkdir cangku</span><br><span class="line">    2.进入文件夹：cd cangku</span><br><span class="line">    3.初始化git：git init</span><br><span class="line">    4.将要上传的文件添加到暂存区：git add -A</span><br><span class="line">    5.将暂存区文件提交到仓库：git commit -m &#39;描述&#39;</span><br><span class="line">    6.因为是第一次上传，所以需要确定好gitee的git仓库：</span><br><span class="line">        git remote add origin https:&#x2F;&#x2F;gitee.com&#x2F;wang_zeng_hui&#x2F;cangku.git</span><br><span class="line">        #####只有第一次上传，需要确定Git仓库位置，以后不需要</span><br><span class="line">    7.推送到云端：git push -u origin master</span><br><span class="line"></span><br><span class="line">需要用户名或密码：(只需要写入一次)(图4)</span><br><span class="line">    git config --global user.name &quot;你登录gitee的名字&quot;</span><br><span class="line">    git config --global user.email &quot;你登录的email&quot;</span><br><span class="line"></span><br><span class="line">删除仓库：</span><br><span class="line">    1.进入管理(如图5)</span><br><span class="line">    2.点击删除仓库(如图6)</span><br><span class="line">    3.根据要求输入内容(如图7)</span><br><span class="line">    4.登录账号,进行验证(如图8)</span><br></pre></td></tr></table></figure><h3 id="图1"><a href="#图1" class="headerlink" title="图1"></a>图1</h3><p><img src="/git%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E4%BB%93%E5%BA%93/Snipaste_2020-04-21_16-51-34.png" alt="图1"></p><h3 id="图2"><a href="#图2" class="headerlink" title="图2"></a>图2</h3><p><img src="/git%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E4%BB%93%E5%BA%93/Snipaste_2020-04-21_16-55-37.png" alt="图2"></p><h3 id="图3"><a href="#图3" class="headerlink" title="图3"></a>图3</h3><p><img src="/git%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E4%BB%93%E5%BA%93/Snipaste_2020-04-21_16-56-28.png" alt="图3"></p><h3 id="图4"><a href="#图4" class="headerlink" title="图4"></a>图4</h3><p><img src="/git%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E4%BB%93%E5%BA%93/Snipaste_2020-04-21_17-04-28.png" alt="图4"></p><h2 id="删除仓库"><a href="#删除仓库" class="headerlink" title="删除仓库"></a>删除仓库</h2><h3 id="图5"><a href="#图5" class="headerlink" title="图5"></a>图5</h3><p><img src="/git%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E4%BB%93%E5%BA%93/Snipaste_2020-04-21_17-06-30.png" alt="图5"></p><h3 id="图6"><a href="#图6" class="headerlink" title="图6"></a>图6</h3><p><img src="/git%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E4%BB%93%E5%BA%93/Snipaste_2020-04-21_17-07-24.png" alt="图6"></p><h3 id="图7"><a href="#图7" class="headerlink" title="图7"></a>图7</h3><p><img src="/git%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E4%BB%93%E5%BA%93/Snipaste_2020-04-21_17-09-41.png" alt="图7"></p><h3 id="图8"><a href="#图8" class="headerlink" title="图8"></a>图8</h3><p><img src="/git%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E4%BB%93%E5%BA%93/Snipaste_2020-04-21_17-10-21.png" alt="图8"></p><h2 id="Git的命令"><a href="#Git的命令" class="headerlink" title="Git的命令"></a>Git的命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Git的常用命令：</span><br><span class="line">    1.将线上网址克隆到本地：git clone git网址</span><br><span class="line">    2.将工作区的修改添加到暂存区：git add -A</span><br><span class="line">    3.将暂存区的文件提交到仓库：git commit -m &#39;描述&#39;</span><br><span class="line">    4.将仓库推送到云端：git push origin master</span><br><span class="line"></span><br><span class="line">其他命令：</span><br><span class="line">    清掉配置：git config --system --unset credential.helper   </span><br><span class="line">    保存密码：git config --global credential.helper store</span><br><span class="line">    查看版本日志：git log</span><br><span class="line">    简单日志：git log --pretty&#x3D;oneline</span><br><span class="line">    回退操作：git reset --hard &#39;版本号&#x2F;日志&#39;</span><br><span class="line">    回退之后返回之前操作日志：git reflog</span><br><span class="line">        git reset --hard &#39;版本号&#x2F;日志&#39;</span><br></pre></td></tr></table></figure><h2 id="Git的分支命令"><a href="#Git的分支命令" class="headerlink" title="Git的分支命令"></a>Git的分支命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在我们每次提交之后都会有记录，Git把它们穿成时间线，形成类似于时间轴的东西。</span><br><span class="line">这个时间轴就是一个分支，我们称之为master分支。</span><br><span class="line"></span><br><span class="line">分支相关命令：</span><br><span class="line">    查看分支：git branch</span><br><span class="line">    查看所有分支：git branch -a</span><br><span class="line">    查看远端分支：git branch -r</span><br><span class="line">    创建并切换分支：git checkout -b 分支名</span><br><span class="line">    建立本地与线上分支关联：git push --set-upstream origin 分支名(可以不切换分支就能提交)</span><br><span class="line">    创建分支：git branch 分支名</span><br><span class="line">    切换分支：git checkout 分支名</span><br><span class="line">    合并分支：git merge 被合并的分支名（需要先切换到master分支）</span><br><span class="line">    删除分支：git branch -d 分支名</span><br><span class="line">    删除远程分支：git push origin --delete 分支名</span><br><span class="line">    注意：当我们进行删除分支的时候，注意要先退出要删除的分支，不然会报错。</span><br></pre></td></tr></table></figure><h2 id="Git的合并"><a href="#Git的合并" class="headerlink" title="Git的合并"></a>Git的合并</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.创建dev分支：git checkout -b dev</span><br><span class="line">2.将本地分支提交线上：git push --set-upstream origin dev</span><br><span class="line">3.切换master分支：git checkout master</span><br><span class="line">4.合并分支：git merge dev</span><br><span class="line">(直接push提交，不需要推送)</span><br><span class="line">5.合并之后推送到线上：git push origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;序列化类的使用&#39;</title>
      <link href="/2020/05/10/Blog/day13-%E5%BA%8F%E5%88%97%E5%8C%96%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/05/10/Blog/day13-%E5%BA%8F%E5%88%97%E5%8C%96%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="rest-framework的下载"><a href="#rest-framework的下载" class="headerlink" title="rest_framework的下载"></a>rest_framework的下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure><h3 id="在settings中注册rest-framework"><a href="#在settings中注册rest-framework" class="headerlink" title="在settings中注册rest_framework"></a>在settings中注册rest_framework</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'corsheaders'</span>,    <span class="comment">#后端跨域</span></span><br><span class="line">    <span class="string">'rest_framework'</span>,   <span class="comment">#rest_framework框架</span></span><br><span class="line">    <span class="string">'myapp'</span>,</span><br><span class="line">    <span class="string">'dwebsocket'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="在django的app中创建一个serializers-py文件"><a href="#在django的app中创建一个serializers-py文件" class="headerlink" title="在django的app中创建一个serializers.py文件"></a>在django的app中创建一个serializers.py文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入需要序列化的表</span></span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#建立序列化类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarouselSer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="comment">#针对表进行序列化</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Carousel <span class="comment">#表名</span></span><br><span class="line">        fields = <span class="string">'__all__'</span>    <span class="comment">#所有字段</span></span><br></pre></td></tr></table></figure><h3 id="在views视图中"><a href="#在views视图中" class="headerlink" title="在views视图中"></a>在views视图中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> myapp.myser <span class="keyword">import</span> *  <span class="comment">#导入序列器</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetCarousel</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment">#读库</span></span><br><span class="line">        carousels = Carousel.objects.all()</span><br><span class="line">        <span class="comment">#序列化操作</span></span><br><span class="line">        carousels_ser = CarouselSer(carousels,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(carousels_ser.data)</span><br></pre></td></tr></table></figure><h3 id="使用序列化的增删改查操作"><a href="#使用序列化的增删改查操作" class="headerlink" title="使用序列化的增删改查操作"></a>使用序列化的增删改查操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#url： path('getcarousel/',GetCarousel.as_view()),</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetCarousel</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment">#查询操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment">#读库</span></span><br><span class="line">        carousels = Carousel.objects.all()</span><br><span class="line">        <span class="comment">#序列化操作</span></span><br><span class="line">        carousels_ser = CarouselSer(carousels,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'data'</span>:carousels_ser.data&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#添加操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        name = request.data.get(<span class="string">'name'</span>,<span class="literal">None</span>)</span><br><span class="line">        src = request.data.get(<span class="string">'link'</span>,<span class="literal">None</span>)</span><br><span class="line">        img = request.data.get(<span class="string">'imgs'</span>,<span class="literal">None</span>)</span><br><span class="line">        ser = Carousel.objects.filter(name=name).first()</span><br><span class="line">        <span class="keyword">if</span> ser:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">'msg'</span>:<span class="string">'幻灯片已存在'</span>&#125;)</span><br><span class="line">        carousel = Carousel(name=name,src=src,img=img)</span><br><span class="line">        carousel.save() <span class="comment">#保存入库</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>: <span class="number">200</span>, <span class="string">'msg'</span>: <span class="string">'添加成功'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#删除操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        id = request.GET.get(<span class="string">'id'</span>,<span class="literal">None</span>)</span><br><span class="line">        Carousel.objects.filter(id=id).delete()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>: <span class="number">200</span>, <span class="string">'msg'</span>: <span class="string">'删除成功'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#修改操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        id = request.data.get(<span class="string">'id'</span>,<span class="literal">None</span>)</span><br><span class="line">        name = request.data.get(<span class="string">'name'</span>,<span class="literal">None</span>)</span><br><span class="line">        src = request.data.get(<span class="string">'link'</span>,<span class="literal">None</span>)</span><br><span class="line">        img = request.data.get(<span class="string">'imgs'</span>,<span class="literal">None</span>)</span><br><span class="line">        car = Carousel.objects.filter(id=id).first()</span><br><span class="line">        car.name = name</span><br><span class="line">        car.src = src</span><br><span class="line">        car.img = img</span><br><span class="line">        car.save()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'code'</span>:<span class="number">200</span>, <span class="string">'msg'</span>: <span class="string">'修改成功'</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rest_framework自带增删改查四种方法</span><br><span class="line">查询：get：Carousel.objects.all() ---&gt;method:'GET'</span><br><span class="line">增加：post：carousel.save()       ---&gt;method:'POST(data)',request.data.get()</span><br><span class="line">删除：delete：Carousel.objects.filter(id=id).delete() ---&gt;method:'DELETE(params)',request.GET.get()</span><br><span class="line">修改：put：carousel.save()        ---&gt;method:'PUT(data)',request.data.get()</span><br></pre></td></tr></table></figure><h3 id="vue代码"><a href="#vue代码" class="headerlink" title="vue代码"></a>vue代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        名称</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        链接</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        图片</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        添加</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        修改</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        删除</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in lunbo_list"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span>            &#123;&#123;item.name&#125;&#125;           <span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span>        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"item.src"</span> <span class="attr">target</span>=<span class="string">"_black"</span>&gt;</span>&#123;&#123;item.src&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>        <span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span>        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.img"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span>        <span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span>        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">color</span>=<span class="string">"green"</span> @<span class="attr">click</span>=<span class="string">"put_lunbo(item.id)"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">Button</span>&gt;</span>     <span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span>        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">color</span>=<span class="string">"red"</span> @<span class="attr">click</span>=<span class="string">"del_lunbo(item.id)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">Button</span>&gt;</span>       <span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    name：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    img：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"imgs"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    src：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"link"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span>        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">color</span>=<span class="string">"blue"</span> @<span class="attr">click</span>=<span class="string">"add_lunbo"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">Button</span>&gt;</span>      <span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                name：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                img：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"imgs"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                src：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"link"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span>        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">color</span>=<span class="string">"blue"</span> @<span class="attr">click</span>=<span class="string">"put_lunbo1"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">Button</span>&gt;</span>      <span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line">            lunbo_list:[],</span><br><span class="line"><span class="actionscript">            name:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">            link:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">            imgs:<span class="string">""</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.lunbo();</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        lunbo()&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.axios(&#123;</span></span><br><span class="line"><span class="actionscript">                url:<span class="string">'http://localhost:8000/getcarousel/'</span>,</span></span><br><span class="line"><span class="actionscript">                method:<span class="string">'GET'</span>,</span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(resp)</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.lunbo_list = resp.data.data</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="comment">//增加</span></span></span><br><span class="line">        add_lunbo()&#123; </span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.axios(&#123;</span></span><br><span class="line"><span class="actionscript">                url:<span class="string">'http://127.0.0.1:8000/getcarousel/'</span>,</span></span><br><span class="line"><span class="actionscript">                method:<span class="string">'POST'</span>,</span></span><br><span class="line">                data:&#123;</span><br><span class="line"><span class="actionscript">                    name:<span class="keyword">this</span>.name,</span></span><br><span class="line"><span class="actionscript">                    link:<span class="keyword">this</span>.link,</span></span><br><span class="line"><span class="actionscript">                    imgs:<span class="keyword">this</span>.imgs,</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(resp)              </span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$router.go(<span class="number">0</span>)</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="comment">//删除</span></span></span><br><span class="line">        del_lunbo(id)&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.axios(&#123;</span></span><br><span class="line"><span class="actionscript">                url:<span class="string">'http://127.0.0.1:8000/getcarousel/'</span>,</span></span><br><span class="line"><span class="actionscript">                method:<span class="string">'DELETE'</span>,</span></span><br><span class="line">                params:&#123;</span><br><span class="line">                    id:id</span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(resp)</span></span><br><span class="line">                alert(resp.data.msg)</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$router.go(<span class="number">0</span>)</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="comment">//修改跳转</span></span></span><br><span class="line">        put_lunbo(id)&#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">//网页跳转传递id</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$router.push(&#123;<span class="string">'path'</span>:<span class="string">'/my_lunbo'</span>,query:&#123;<span class="string">'aid'</span>:id&#125;&#125;)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="comment">//修改</span></span></span><br><span class="line">        put_lunbo1()&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.axios(&#123;</span></span><br><span class="line"><span class="actionscript">                url:<span class="string">'http://127.0.0.1:8000/getcarousel/'</span>,</span></span><br><span class="line"><span class="actionscript">                method:<span class="string">'PUT'</span>,<span class="comment">//指定修改方法</span></span></span><br><span class="line">                data:&#123;</span><br><span class="line"><span class="actionscript">                    id:<span class="keyword">this</span>.$route.query.aid,</span></span><br><span class="line"><span class="actionscript">                    name:<span class="keyword">this</span>.name,</span></span><br><span class="line"><span class="actionscript">                    link:<span class="keyword">this</span>.link,</span></span><br><span class="line"><span class="actionscript">                    imgs:<span class="keyword">this</span>.imgs,</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(resp)</span></span><br><span class="line">                alert(resp.data.msg)</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$router.go(<span class="number">0</span>)</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">img&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;Django中间件&#39;</title>
      <link href="/2020/05/08/Blog/day13-django%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2020/05/08/Blog/day13-django%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="django的生命周期流程图"><a href="#django的生命周期流程图" class="headerlink" title="django的生命周期流程图"></a>django的生命周期流程图</h3><p>中间件位于web服务端与url路由层之间</p><p>中间件的响应流程：当用户发起请求的时候会依次经过所有的的中间件，这个时候的请求时process_request,最后到达views的函数中，views函数处理后，在依次穿过中间件，这个时候是process_response,最后返回给请求者。</p><p><img src="/img/python/django%E8%AF%B7%E6%B1%82%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="生命周期"></p><h3 id="中间件的五个方法"><a href="#中间件的五个方法" class="headerlink" title="中间件的五个方法"></a>中间件的五个方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin  <span class="comment">#中间件</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_MiddlewareMixin</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="comment"># 请求之前</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 视图渲染之前</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, view_func, view_args, view_kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 该方法对视图函数返回值有要求，必须是一个含有render方法类的对象，才会执行此方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_template_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self, request, exception)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回之前</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        <span class="comment"># 注意：response需要使用return返回，不然报错</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h3 id="process-view的参数"><a href="#process-view的参数" class="headerlink" title="process_view的参数"></a>process_view的参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该方法有四个参数</span></span><br><span class="line"><span class="comment"># request是HttpRequest对象。</span></span><br><span class="line"><span class="comment"># view_func是Django即将使用的视图函数。 （它是实际的函数对象，而不是函数的名称作为字符串。）</span></span><br><span class="line"><span class="comment"># view_args是将传递给视图的位置参数的列表（无名分组分过来的值）.</span></span><br><span class="line"><span class="comment"># view_kwargs是将传递给视图的关键字参数的字典（有名分组分过来的值）。 view_args和view_kwargs都不包含第一个视图参数（request）。</span></span><br><span class="line"><span class="comment"># Django会在调用视图函数之前调用process_view方法。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, view_func, view_args, view_kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="process-response错误："><a href="#process-response错误：" class="headerlink" title="process_response错误："></a>process_response错误：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> response.get(<span class="string">'X-Frame-Options'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'get'</span></span><br><span class="line"><span class="comment"># 原因：就是没有返回response</span></span><br><span class="line"><span class="comment"># 解决</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h3 id="定义中间件之后在settings中注册中间件"><a href="#定义中间件之后在settings中注册中间件" class="headerlink" title="定义中间件之后在settings中注册中间件"></a>定义中间件之后在settings中注册中间件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'corsheaders.middleware.CorsMiddleware'</span>, <span class="comment">#这里是新增的中间件</span></span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="comment"># 'django.middleware.csrf.CsrfViewMiddleware',</span></span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">    <span class="comment">#加载自定义中间件   文件夹名.文件名.类名</span></span><br><span class="line">    <span class="comment"># 'myapp.views.MyMiddleware',</span></span><br><span class="line">    <span class="string">'myapp.md_user.My_MiddlewareMixin'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="使用django原生Httpresponse返回Json格式"><a href="#使用django原生Httpresponse返回Json格式" class="headerlink" title="使用django原生Httpresponse返回Json格式"></a>使用django原生Httpresponse返回Json格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="comment"># 第一种：</span></span><br><span class="line">    <span class="comment"># content_type="application/json"声明json类型</span></span><br><span class="line">    <span class="comment"># indent=4四个空格，美观</span></span><br><span class="line">    <span class="comment"># ensure_ascii=False不使用ascii编码，输出中文</span></span><br><span class="line">    <span class="keyword">return</span> Httpresponse(json.dumps(&#123;<span class="string">'message'</span>:<span class="string">'您的秘钥无权限'</span>&#125;,indent=<span class="number">4</span>,ensure_ascii=<span class="literal">False</span>),content_type=<span class="string">"application/json"</span>)</span><br><span class="line">    <span class="comment"># 第二种：</span></span><br><span class="line">    <span class="comment"># json_dumps_params=dict</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'message'</span>:<span class="string">'您的秘钥无权限'</span>&#125;,safe=<span class="literal">False</span>,json_dumps_params=(&#123;<span class="string">'ensure_ascii'</span>:<span class="literal">False</span>,<span class="string">'indent'</span>:<span class="number">4</span>&#125;))</span><br></pre></td></tr></table></figure><h3 id="因为每次请求都要走中间件，所以针对路由判断是否走中间件"><a href="#因为每次请求都要走中间件，所以针对路由判断是否走中间件" class="headerlink" title="因为每次请求都要走中间件，所以针对路由判断是否走中间件"></a>因为每次请求都要走中间件，所以针对路由判断是否走中间件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="comment"># 获取路由</span></span><br><span class="line">    <span class="keyword">if</span> request.path_info.startswith(<span class="string">'/userinfo/'</span>):</span><br><span class="line">        <span class="keyword">return</span> Httpresponse(json.dumps(&#123;<span class="string">'message'</span>:<span class="string">'您的秘钥无权限'</span>&#125;,indent=<span class="number">4</span>,ensure_ascii=<span class="literal">False</span>),content_type=<span class="string">"application/json"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;第三方登录-钉钉登录&#39;</title>
      <link href="/2020/04/28/Blog/day08-%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-%E9%92%89%E9%92%89%E7%99%BB%E5%BD%95/"/>
      <url>/2020/04/28/Blog/day08-%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-%E9%92%89%E9%92%89%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>钉钉企业注册：<a href="https://www.dingtalk.com/oasite/register_new.htm?source=1001&lwfrom=2017120202091367000000111#/" target="_blank" rel="noopener">点击跳转</a></p><p>官方文档：<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/kymkv6" target="_blank" rel="noopener">点击跳转</a></p><p>悦哥钉钉登录博客：<a href="https://v3u.cn/a_id_124" target="_blank" rel="noopener">点击查看</a></p><h3 id="钉钉登录"><a href="#钉钉登录" class="headerlink" title="钉钉登录"></a>钉钉登录</h3><p>1.注册钉钉企业</p><p>2.登录企业后台管理</p><p>3.选择应用开发</p><p>4.移动接入应用-&gt;登录<br><img src="/img/%E9%92%89%E9%92%89%E7%99%BB%E5%BD%95/%E9%92%89%E9%92%89%E7%99%BB%E5%BD%951.png" alt="顶顶登录1"></p><p>5.创建扫码登录应用授权<br><img src="/img/%E9%92%89%E9%92%89%E7%99%BB%E5%BD%95/%E9%92%89%E9%92%89%E7%99%BB%E5%BD%952.png" alt="顶顶登录2"><br><img src="/img/%E9%92%89%E9%92%89%E7%99%BB%E5%BD%95/%E9%92%89%E9%92%89%E7%99%BB%E5%BD%953.png" alt="顶顶登录3"></p><p>6.获取创建以后企业应用的appid,appsecret,回调域名<br><img src="/img/%E9%92%89%E9%92%89%E7%99%BB%E5%BD%95/%E9%92%89%E9%92%89%E7%99%BB%E5%BD%954.png" alt="顶顶登录4"></p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">urls：path(<span class="string">'ding_url/'</span>,ding_login),</span><br><span class="line"><span class="comment">#登录顶顶</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ding_login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment">#钉钉应用的appid</span></span><br><span class="line">    appid = <span class="string">'dingoab7edavvvtdcwqcra'</span></span><br><span class="line">    <span class="comment"># 钉钉应用的回调地址</span></span><br><span class="line">    redirect_uri = <span class="string">'http://127.0.0.1:8000/callback/'</span></span><br><span class="line">    <span class="comment">#重定向到</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'https://oapi.dingtalk.com/connect/qrconnect?appid='</span></span><br><span class="line">    +appid+<span class="string">'&amp;response_type=code&amp;scope=snsapi_login&amp;state=STATE&amp;redirect_uri='</span>+redirect_uri)</span><br></pre></td></tr></table></figure><p>7.钉钉会将code返回到回调网址中<br><img src="/img/%E9%92%89%E9%92%89%E7%99%BB%E5%BD%95/%E9%92%89%E9%92%89%E7%99%BB%E5%BD%955.png" alt="顶顶登录5"><br>因为钉钉只有java和php的sdk,所以使用hmac加密自己写sdk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">urls：path(<span class="string">'callback/'</span>,ding_back),</span><br><span class="line"><span class="comment">#构造钉钉对调方法。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ding_back</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment">#获取code</span></span><br><span class="line">    code = request.GET.get(<span class="string">'code'</span>,<span class="literal">None</span>)</span><br><span class="line">    print(<span class="string">'code是：%s'</span>%code)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#构造时间戳</span></span><br><span class="line">    t = time.time()</span><br><span class="line">    timestamp = str(int(round(t*<span class="number">1000</span>)))</span><br><span class="line">    print(<span class="string">'时间：'</span>,timestamp)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#URL签名参数说明</span></span><br><span class="line">    <span class="comment">#钉钉的appSecret</span></span><br><span class="line">    appSecret = <span class="string">'8F3q2UmU-2ljILNJAtodsnFaLllpMEioNWI5GRtnoz5OyubMYbiTxlVC3yrPmHiE'</span></span><br><span class="line">    <span class="comment">#构造签名</span></span><br><span class="line">    signature = base64.b64encode(hmac.new(appSecret.encode(<span class="string">'utf-8'</span>),timestamp.encode(<span class="string">'utf-8'</span>),digestmod=sha256).digest())</span><br><span class="line">    <span class="comment">#请求接口，换取用户名</span></span><br><span class="line">    payload = &#123;<span class="string">'tmp_auth_code'</span>:code&#125;</span><br><span class="line">    headers = &#123;<span class="string">'Content-Type'</span>:<span class="string">'application/json'</span>&#125;</span><br><span class="line">    res = requests.post(<span class="string">'https://oapi.dingtalk.com/sns/getuserinfo_bycode?'</span></span><br><span class="line">                        <span class="string">'accessKey=dingoab7edavvvtdcwqcra&amp;timestamp='</span>+timestamp+</span><br><span class="line">                        <span class="string">'&amp;signature='</span>+urllib.parse.quote(signature.decode(<span class="string">'utf-8'</span>)),headers=headers,data=json.dumps(payload))</span><br><span class="line"></span><br><span class="line">    res_dict = json.loads(res.text)</span><br><span class="line">    print(res_dict)</span><br><span class="line">    username = str(res_dict[<span class="string">'user_info'</span>][<span class="string">'nick'</span>])</span><br><span class="line">    user = User.objects.filter(username=username).first()</span><br><span class="line">    <span class="keyword">if</span> user:</span><br><span class="line">        <span class="comment">#数据库有该用户名，直接登录</span></span><br><span class="line">        user.username = username</span><br><span class="line">        print(<span class="string">'已经登陆过，用户名'</span>,username)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#没有登录,注册</span></span><br><span class="line">        user = User(username=username)</span><br><span class="line">        user.save()</span><br><span class="line">        print(<span class="string">'首次注册，用户名'</span>,username)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'http://localhost:8080/?username='</span>+username)</span><br><span class="line">    <span class="comment"># return HttpResponse(res.text)</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E9%92%89%E9%92%89%E7%99%BB%E5%BD%95/%E9%92%89%E9%92%89%E7%99%BB%E5%BD%956.png" alt="顶顶登录6"></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三方登录-微博登录</title>
      <link href="/2020/04/28/Blog/day08-%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-%E5%BE%AE%E5%8D%9A%E7%99%BB%E5%BD%95/"/>
      <url>/2020/04/28/Blog/day08-%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95-%E5%BE%AE%E5%8D%9A%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="微博登录思维导图"><a href="#微博登录思维导图" class="headerlink" title="微博登录思维导图"></a>微博登录思维导图</h3><p><img src="/img/%E5%BE%AE%E5%8D%9A/%E5%BE%AE%E5%8D%9A%E7%99%BB%E5%BD%95.jpg" alt="微博登录思维导图"></p><h3 id="在微博创建应用"><a href="#在微博创建应用" class="headerlink" title="在微博创建应用"></a>在微博创建应用</h3><p>1.第一步<br><img src="/img/%E5%BE%AE%E5%8D%9A/%E5%BE%AE%E5%8D%9A1.png" alt="1"><br>2.第二步<br><img src="/img/%E5%BE%AE%E5%8D%9A/%E5%BE%AE%E5%8D%9A2.png" alt="2"><br>3.第三步<br><img src="/img/%E5%BE%AE%E5%8D%9A/%E5%BE%AE%E5%8D%9A3.png" alt="3"><br>4.第四步<br><img src="/img/%E5%BE%AE%E5%8D%9A/%E5%BE%AE%E5%8D%9A4.png" alt="4"><br>5.第五步<br><img src="/img/%E5%BE%AE%E5%8D%9A/%E5%BE%AE%E5%8D%9A5.png" alt="5"><br>6.第六步<br><img src="/img/%E5%BE%AE%E5%8D%9A/%E5%BE%AE%E5%8D%9A6.png" alt="6"></p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>vue代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"wb_src"</span> <span class="attr">alt</span>=<span class="string">"点击跳转微博第三方登录"</span> @<span class="attr">click</span>=<span class="string">"sina"</span>  <span class="attr">class</span>=<span class="string">"imgcode"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//微博登录url</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//图片路径</span></span></span><br><span class="line"><span class="actionscript">    wb_src:<span class="string">'http://127.0.0.1:8000/static/sina.png'</span>,</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line"><span class="actionscript">    <span class="comment">//微博第三方登录</span></span></span><br><span class="line">      sina()&#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">//拼接url</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//App Key</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> client_id = <span class="number">2731357014</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//授权回调页</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> redirect_uri = <span class="string">'http://127.0.0.1:8000/md_admin/weibo'</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// //请求url</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> url = <span class="string">'https://api.weibo.com/oauth2/authorize?client_id='</span>+client_id+<span class="string">'&amp;redirect_uri='</span>+redirect_uri;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// //跳转微博登录页,//返回code，然后后端去接收</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.location.href = url</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>django代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">urls路径配置：path(<span class="string">'md_admin/weibo/'</span>,wb_back),</span><br><span class="line"></span><br><span class="line"><span class="comment">#新浪微博回调方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wb_back</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment">#接受参数</span></span><br><span class="line">    code = request.GET.get(<span class="string">'code'</span>,<span class="literal">None</span>)</span><br><span class="line">    print(<span class="string">'code是%s'</span>%code)</span><br><span class="line">    <span class="comment">#定义token的获取地址</span></span><br><span class="line">    url = <span class="string">'https://api.weibo.com/oauth2/access_token'</span></span><br><span class="line">    <span class="comment">#定义参数</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'client_id'</span>:<span class="string">'2731357014'</span>,<span class="comment">#App Key</span></span><br><span class="line">        <span class="string">'client_secret'</span>:<span class="string">'3eb11995fdd72c3b33b3971caac21ffe'</span>,<span class="comment">#App Secret</span></span><br><span class="line">        <span class="string">'grant_type'</span>:<span class="string">'authorization_code'</span>,<span class="comment">#类型</span></span><br><span class="line">        <span class="string">'code'</span>:code,<span class="comment">#获取到的code</span></span><br><span class="line">        <span class="string">'redirect_uri'</span>:<span class="string">'http://127.0.0.1:8000/md_admin/weibo'</span></span><br><span class="line">    &#125;</span><br><span class="line">    re = requests.post(url=url,data=data)</span><br><span class="line">    print(<span class="string">'re的json是：'</span>,re.json())</span><br><span class="line"></span><br><span class="line">    <span class="comment">#换取新浪微博用户昵称</span></span><br><span class="line">    weibo_url = <span class="string">'https://api.weibo.com/2/users/show.json'</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'access_token'</span>:re.json()[<span class="string">'access_token'</span>],</span><br><span class="line">        <span class="string">'uid'</span>:re.json()[<span class="string">'uid'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.get(url=weibo_url,params=params)</span><br><span class="line">    print(<span class="string">'res的json是：'</span>,res.json())</span><br><span class="line">    print(res.json())</span><br><span class="line">    <span class="comment">#定义新浪id和用户id</span></span><br><span class="line">    sina_id = <span class="string">''</span></span><br><span class="line">    user_id = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#判断是否使用新浪微博登陆过</span></span><br><span class="line">    user = User.objects.filter(username=str(res.json()[<span class="string">'name'</span>])).first()</span><br><span class="line">    <span class="keyword">if</span> user:</span><br><span class="line">        <span class="comment">#代表该账号曾经登陆过</span></span><br><span class="line">        sina_id = user.username</span><br><span class="line">        user_id = user.id</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#首次登录,入库</span></span><br><span class="line">        user = User(username=str(res.json()[<span class="string">'name'</span>]),password=<span class="string">""</span>)</span><br><span class="line">        user.save()</span><br><span class="line">        user = User.objects.filter(username=str(res.json()[<span class="string">'name'</span>])).first()</span><br><span class="line">        sina_id = user.username</span><br><span class="line">        user_id = user.id</span><br><span class="line">    print(<span class="string">'用户是：'</span>,sina_id,user_id)</span><br><span class="line">    <span class="comment">#重定向到首页</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'http://127.0.0.1:8080?sina_id='</span>+str(sina_id)+<span class="string">'&amp;user_id='</span>+str(user_id))</span><br><span class="line">    <span class="comment"># return HttpResponse('回调成功')</span></span><br></pre></td></tr></table></figure><h3 id="关于错误"><a href="#关于错误" class="headerlink" title="关于错误"></a>关于错误</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">今日写微博登录犯了一个很典型的错误:</span><br><span class="line">  就是单词打错：所有的client都拼写成了clinet</span><br><span class="line">  因为是在访问url，所以报了一个<span class="string">'请求不合法错误'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装使用及命令</title>
      <link href="/2020/04/27/Blog/docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/04/27/Blog/docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="docker的下载和安装"><a href="#docker的下载和安装" class="headerlink" title="docker的下载和安装"></a>docker的下载和安装</h2><p>下载网址：<a href="http://get.daocloud.io/toolbox/" target="_blank" rel="noopener">点击跳转</a></p><p>安装和配置国内镜像可以观看悦哥视频进行下载与安装：<a href="https://www.bilibili.com/video/BV1pE411x72w" target="_blank" rel="noopener">刘悦的个人博客</a></p><h2 id="Docker-的主要用途，目前有三大类。"><a href="#Docker-的主要用途，目前有三大类。" class="headerlink" title="Docker 的主要用途，目前有三大类。"></a>Docker 的主要用途，目前有三大类。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</span><br><span class="line">2.提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</span><br><span class="line">3.组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</span><br></pre></td></tr></table></figure><h2 id="docker的命令"><a href="#docker的命令" class="headerlink" title="docker的命令"></a>docker的命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">查看当前docker中的所有镜像：docker images</span><br><span class="line"></span><br><span class="line">显示版本号：docker -v</span><br><span class="line"></span><br><span class="line">进入虚拟机：docker-machine ssh </span><br><span class="line">            例：进入默认虚拟机：docker-machine ssh default</span><br><span class="line">    </span><br><span class="line">设置国内源为阿里源：sudo sed -i <span class="string">"s|EXTRA_ARGS='|EXTRA_ARGS='--registry-mirror=https://umd2c3rd.mirror.aliyuncs.com |g"</span> /var/lib/boot2docker/profile</span><br><span class="line">                    <span class="comment">#网址是在阿里云提供的镜像加速fuwu</span></span><br><span class="line"></span><br><span class="line">重启镜像：docker-machine restart default</span><br><span class="line"></span><br><span class="line">查看所有docker内容：docker info</span><br><span class="line"></span><br><span class="line">将镜像导出到位置/保存镜像：docker save -o <span class="string">'导出路径位置'</span> redis/镜像名</span><br><span class="line"></span><br><span class="line">删除镜像：docker rmi -f <span class="number">975</span>f/镜像ID</span><br><span class="line"></span><br><span class="line">删除所有镜像：docker rmi $(docker images -q)</span><br><span class="line"></span><br><span class="line">导入镜像：docker load -i <span class="string">'D:\Program Files (x86)\docker\docker镜像\redis1.tar'</span>/路径</span><br><span class="line"></span><br><span class="line">查看所有容器：docker ps -a</span><br><span class="line"></span><br><span class="line">查看正在运行的容器：docker ps</span><br><span class="line"></span><br><span class="line">关闭正在运行的容器：docker stop 镜像ID(docker ps中的ID)</span><br><span class="line"></span><br><span class="line">杀死所有正在运行的容器</span><br><span class="line">alias dockerkill=<span class="string">'docker kill $(docker ps -a -q)'</span></span><br><span class="line"></span><br><span class="line">删除所有已经停止的容器.</span><br><span class="line">alias dockercleanc=<span class="string">'docker rm $(docker ps -a -q)'</span></span><br><span class="line"> </span><br><span class="line">删除所有未打标bai签的镜像.</span><br><span class="line">alias dockercleani=<span class="string">'docker rmi $(docker images -q -f dangling=true)'</span></span><br><span class="line"></span><br><span class="line">删除所有已经停止的容器和未打标签的镜像.</span><br><span class="line">alias dockerclean=<span class="string">'dockercleanc || true &amp;&amp; dockercleani'</span></span><br><span class="line">    </span><br><span class="line">删除容器：docker rm $(docker ps -a(所有容器) -q(quit,已经退出的容器))</span><br><span class="line">          例：docker rm $(docker ps -a -q)</span><br><span class="line"></span><br><span class="line">后台启动服务和端口映射：docker run -p 主机未使用ip:服务端默认ip 镜像名称 服务名称  </span><br><span class="line">                       例：docker run -p <span class="number">6380</span>:<span class="number">6379</span> redis redis-server</span><br><span class="line"></span><br><span class="line">查看镜像服务：docker run -ti 镜像id</span><br><span class="line">              例：docker run -ti <span class="number">975</span>f</span><br><span class="line"></span><br><span class="line">查看ip：docker-machine ip default</span><br><span class="line"></span><br><span class="line">退出镜像：exit</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;项目目录&#39;</title>
      <link href="/2020/04/21/Blog/day02%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95/"/>
      <url>/2020/04/21/Blog/day02%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>vue有关项目目录</p><h2 id="vue的项目目录"><a href="#vue的项目目录" class="headerlink" title="vue的项目目录"></a>vue的项目目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">build:打包文件</span><br><span class="line">config:配置文件</span><br><span class="line">    dev.env.js:开发环境变量</span><br><span class="line">    index.js:生产环境变量</span><br><span class="line">    prod.env.js:灰度环境</span><br><span class="line">dist:打包之后存放的文件</span><br><span class="line">node_modules:安装的依赖，配置文件,基于package.json下载(该文件不能提交到仓库,需要加入.gitignore)</span><br><span class="line">.gitignore:存放不需要上传仓库的文件</span><br><span class="line">package.json:读取存放依赖，配置等信息</span><br><span class="line">    heyui:网页样式</span><br><span class="line">    js-mds:加密</span><br><span class="line">    style-loader:样式</span><br><span class="line">    vue:vue本体</span><br><span class="line">    vue-drag-verify:验证码</span><br><span class="line">    vue-router:路由</span><br><span class="line">components:组件文件夹</span><br><span class="line">router&#x2F;index.js:路由</span><br><span class="line">    path：路径url</span><br><span class="line">    name：命名空间</span><br><span class="line">    components:导包组件</span><br><span class="line">    mode：&#39;history&#39;   取消hash风格的#</span><br><span class="line">App.vue：渲染组件</span><br><span class="line">main.js：入口文件，vue的组件，实例等都存在这里</span><br></pre></td></tr></table></figure><h2 id="hugo的项目目录"><a href="#hugo的项目目录" class="headerlink" title="hugo的项目目录"></a>hugo的项目目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">archetypes:文本配置文件</span><br><span class="line">content:生成的md文档</span><br><span class="line">data:数据文件夹</span><br><span class="line">layouts:布局</span><br><span class="line">public:打包文件</span><br><span class="line">resources:资源</span><br><span class="line">static:静态文件</span><br><span class="line">thems:主题</span><br><span class="line">config.homl:网站配置文件</span><br><span class="line">    baseURL:线上&#x2F;线下url</span><br><span class="line">    languageCode:语言</span><br><span class="line">    title:标题</span><br><span class="line">    theme:主题</span><br><span class="line">    params：简介和描述</span><br><span class="line">        description:简介</span><br><span class="line">        themColor:博客主题颜色</span><br><span class="line"></span><br><span class="line">修改主题颜色：在themes--&gt;hyde--&gt;static--&gt;css--&gt;hyde.css中改颜色(可以自定义主题和颜色)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue启动和命令</title>
      <link href="/2020/04/21/Blog/day02vue%E5%90%AF%E5%8A%A8%E5%92%8C%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/04/21/Blog/day02vue%E5%90%AF%E5%8A%A8%E5%92%8C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>配置node.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">配置node.js：</span><br><span class="line">    1.node官网：https:&#x2F;&#x2F;nodejs.org&#x2F;en&#x2F;</span><br><span class="line">    2.下载需要的版本---&gt;图1</span><br><span class="line">    3.下载成功，开始安装</span><br><span class="line">    4.在环境变量中配置node</span><br><span class="line"></span><br><span class="line">查询node是否启动和环境变量有无问题</span><br><span class="line">    命令：node -v   (v13.3.0)</span><br></pre></td></tr></table></figure><p><img src="/vue/Snipaste_2020-04-21_15-10-27.png" alt="图1"></p><h2 id="三大框架-三大框架都是基于node"><a href="#三大框架-三大框架都是基于node" class="headerlink" title="三大框架(三大框架都是基于node)"></a>三大框架(三大框架都是基于node)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">React：     1 自组件重复渲染问题需要手动优化</span><br><span class="line">            2 可以使用redux进行状态管理，函数式，不可变，模式化，时间旅行</span><br><span class="line">            3 可使用JSX，完全的javascript能力</span><br><span class="line">            4更繁荣的社区生态</span><br><span class="line"></span><br><span class="line">Vue：       1 可使用JSX，但推荐使用模版语言而不是JSX</span><br><span class="line">            2 学习曲线平缓</span><br><span class="line"></span><br><span class="line">Angular：   1 完善的MV框架，包含模版，数据双向绑定，路由，模块化，服务，过滤器，依赖注入等所有功能</span><br><span class="line">            2 typescript</span><br><span class="line">            3 脏检查，对脏数据的检查，比较UI和后台的数据是否一致</span><br></pre></td></tr></table></figure><h2 id="安装依赖-npm"><a href="#安装依赖-npm" class="headerlink" title="安装依赖(npm)"></a>安装依赖(npm)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm：</span><br><span class="line">    1.npm官网：https:&#x2F;&#x2F;www.npmjs.com&#x2F;</span><br><span class="line">    2.下载安装npm</span><br><span class="line">    3.给npm配置环境变量</span><br><span class="line"></span><br><span class="line">检查npm：</span><br><span class="line">    命令：npm -v  (6.14.4)</span><br><span class="line"></span><br><span class="line">关于npm命令：</span><br><span class="line">    1.npm默认源是github，因为是外网，所以我们要改源（淘宝源）。命令：</span><br><span class="line">        npm set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">    2.查看npm配置：npm config list</span><br><span class="line">    3.当npm版本过低，更新版本：npm install -g npm</span><br></pre></td></tr></table></figure><h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vue的中文文档：https:&#x2F;&#x2F;cn.vuejs.org&#x2F;v2&#x2F;guide&#x2F;syntax.html</span><br><span class="line"></span><br><span class="line">关于vue命令：</span><br><span class="line">    1.清空本地缓存：npm cache clean --force</span><br><span class="line">    1.在vue中安装依赖&#x2F;配置文件：npm install</span><br><span class="line">    2.启动vue：npm run dev</span><br><span class="line">    退出：ctrl+c</span><br><span class="line"></span><br><span class="line">vue依赖：</span><br><span class="line">    npm install axios --save</span><br><span class="line">    npm install style-loader —-save</span><br><span class="line">    npm install heyui --save</span><br><span class="line">    npm install js-md5 --save</span><br><span class="line"></span><br><span class="line">关于vue服务启动失败：</span><br><span class="line">    1.关掉命令行，退到上一级目录，手动删除node_modules,然后npm install</span><br><span class="line">    2.下载rimarf命令：npm install rimraf -g</span><br><span class="line">        删除node_modules命令：rimraf node_modules   (图2)</span><br><span class="line">        #使用前提，npm需要是新版本</span><br><span class="line">    #优先使用第二个理由：第一个手动删除需要花费大量时间，删除进度缓慢</span><br></pre></td></tr></table></figure><p><img src="/vue/Snipaste_2020-04-21_15-51-47.png" alt="图2"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境变量的配置</title>
      <link href="/2020/04/21/Blog/day02%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2020/04/21/Blog/day02%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>环境变量的配置<br>1.找到此电脑</p><p><img src="/img/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/image-20200421124427513.png" alt="image-20200421124427513.png"></p><p>2.点击右键–&gt;属性<br><img src="/img/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/image-20200421124458429.png" alt="image-20200421124458429.png"></p><p>3.点击高级系统设置<br><img src="/img/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/image-20200421124627634.png" alt="image-20200421124627634.png"></p><p>4.点击环境变量<br><img src="/img/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/image-20200421124741357.png" alt="image-20200421124741357.png"></p><p>5.选择用户变量或者系统变量，点击path，点击编辑<br><img src="/img/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/image-20200421124915333.png" alt="image-20200421124915333.png"></p><p>6.点击新建，然后输入需要配置环境变量的路径，一般情况下在bin目录（或者在cmd下）<br><img src="/img/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/image-20200421125010563.png" alt="image-20200421125010563.png"></p><p>7.编辑好路径之后，点击确定，再点击确定。然后退出环境变量，确保更改成功。<br>8.ok</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
